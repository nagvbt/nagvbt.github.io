"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["32504"],{18342:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>r,default:()=>h,toc:()=>d,metadata:()=>s,assets:()=>c,contentTitle:()=>a});var s=JSON.parse('{"id":"UIFrameworks/Events","title":"Events","description":"REACT","source":"@site/docs/UIFrameworks/Events.md","sourceDirName":"UIFrameworks","slug":"/UIFrameworks/Events","permalink":"/docs/UIFrameworks/Events","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":12,"frontMatter":{"sidebar_position":12},"sidebar":"tutorialSidebar","previous":{"title":"Props","permalink":"/docs/UIFrameworks/Props"},"next":{"title":"Conditional Rendering","permalink":"/docs/UIFrameworks/ConditionalRendering"}}'),l=t(85893),i=t(50065);let r={sidebar_position:12},a="Events",c={},d=[{value:"<strong>REACT</strong>",id:"react",level:2},{value:"What are React Events?",id:"what-are-react-events",level:3},{value:"Handling Events in React (onClick, onChange)",id:"handling-events-in-react-onclick-onchange",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example: onClick &amp; onChange",id:"example-onclick--onchange",level:3},{value:"<strong>SVELTE</strong>",id:"svelte",level:2},{value:"What are Svelte Events?",id:"what-are-svelte-events",level:3},{value:"Handling Events in Svelte (<code>on:click</code>, <code>on:input</code>)",id:"handling-events-in-svelte-onclick-oninput",level:2},{value:"Syntax of Events in Svelte",id:"syntax-of-events-in-svelte",level:3},{value:"Example: <code>on:click</code> &amp; <code>on:input</code>",id:"example-onclick--oninput",level:3},{value:"<strong>REACT</strong> - Updating Events",id:"react---updating-events",level:2},{value:"Updating State Based on Events",id:"updating-state-based-on-events",level:2},{value:"Definition",id:"definition",level:3},{value:"Syntax of Updating Events",id:"syntax-of-updating-events",level:3},{value:"Example: Button Click to Update State",id:"example-button-click-to-update-state",level:3},{value:"Example Explanation",id:"example-explanation",level:3},{value:"<strong>SVELTE</strong> - Updating Events",id:"svelte---updating-events",level:2},{value:"Updating State Based on Events in Svelte",id:"updating-state-based-on-events-in-svelte",level:2},{value:"Definition of Updating States in Svelte",id:"definition-of-updating-states-in-svelte",level:3},{value:"Syntax of Updating States in Svelte",id:"syntax-of-updating-states-in-svelte",level:3},{value:"Example: Button Click to Update State in Svelte",id:"example-button-click-to-update-state-in-svelte",level:3},{value:"Explanation of the above Example",id:"explanation-of-the-above-example",level:3}];function o(e){let n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.a)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,l.jsx)(n.h2,{id:"react",children:(0,l.jsx)(n.strong,{children:"REACT"})}),"\n",(0,l.jsx)(n.h3,{id:"what-are-react-events",children:"What are React Events?"}),"\n",(0,l.jsxs)(n.p,{children:["In React, ",(0,l.jsx)(n.strong,{children:"events"})," (like ",(0,l.jsx)(n.code,{children:"onClick"}),", ",(0,l.jsx)(n.code,{children:"onChange"}),", etc.) work just like HTML DOM events, but are\r\nwritten in ",(0,l.jsx)(n.strong,{children:"camelCase"})," and use ",(0,l.jsx)(n.strong,{children:"JSX functions"})," instead of strings."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsx)(n.p,{children:"You handle user actions like clicks, typing, submitting forms using event handlers."}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"handling-events-in-react-onclick-onchange",children:"Handling Events in React (onClick, onChange)"}),"\n",(0,l.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:"<button onClick={handleClick}>Click Me</button>\r\n<input onChange={handleChange} />\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"example-onclick--onchange",children:"Example: onClick & onChange"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:'import React, { useState } from \'react\';\r\n\r\nconst EventExample: React.FC = () => {\r\n  const [name, setName] = useState<string>("");\r\n  const [clicked, setClicked] = useState<boolean>(false);\r\n\r\n  // Called when input changes\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  // Called when button is clicked\r\n  const handleClick = () => {\r\n    setClicked(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type="text"\r\n        value={name}\r\n        onChange={handleInputChange}\r\n        placeholder="Enter your name"\r\n      />\r\n      <button onClick={handleClick}>Submit</button>\r\n\r\n      {/* Conditional Rendering */}\r\n      {clicked && <p>Hello, {name}!</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventExample;\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h2,{id:"svelte",children:(0,l.jsx)(n.strong,{children:"SVELTE"})}),"\n",(0,l.jsx)(n.h3,{id:"what-are-svelte-events",children:"What are Svelte Events?"}),"\n",(0,l.jsxs)(n.p,{children:["In Svelte, ",(0,l.jsx)(n.strong,{children:"events"})," like ",(0,l.jsx)(n.code,{children:"on:click"}),", ",(0,l.jsx)(n.code,{children:"on:input"}),", ",(0,l.jsx)(n.code,{children:"on:submit"}),", etc., allow components to respond\r\nto user interactions."]}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["Svelte events are similar to native DOM events but use ",(0,l.jsx)(n.code,{children:"on:eventName"})," syntax. You write event\r\nhandlers directly in the markup or bind them to functions."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h2,{id:"handling-events-in-svelte-onclick-oninput",children:["Handling Events in Svelte (",(0,l.jsx)(n.code,{children:"on:click"}),", ",(0,l.jsx)(n.code,{children:"on:input"}),")"]}),"\n",(0,l.jsx)(n.h3,{id:"syntax-of-events-in-svelte",children:"Syntax of Events in Svelte"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-svelte",children:"<button on:click={handleClick}>Click Me</button>\r\n<input on:input={handleInput} />\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"example-onclick--oninput",children:["Example: ",(0,l.jsx)(n.code,{children:"on:click"})," & ",(0,l.jsx)(n.code,{children:"on:input"})]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- EventExample.svelte --\x3e\r\n<script lang="ts">\r\n  let name: string = "";\r\n  let clicked: boolean = false;\r\n\r\n  const handleInput = (e: Event) => {\r\n    const target = e.target as HTMLInputElement;\r\n    name = target.value;\r\n  };\r\n\r\n  const handleClick = () => {\r\n    clicked = true;\r\n  };\r\n<\/script>\r\n\r\n<input\r\n  type="text"\r\n  placeholder="Enter your name"\r\n  on:input={handleInput}\r\n/>\r\n<button on:click={handleClick}>Submit</button>\r\n\r\n{#if clicked}\r\n  <p>Hello, {name}!</p>\r\n{/if}\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h2,{id:"react---updating-events",children:[(0,l.jsx)(n.strong,{children:"REACT"})," - Updating Events"]}),"\n",(0,l.jsx)(n.h2,{id:"updating-state-based-on-events",children:"Updating State Based on Events"}),"\n",(0,l.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,l.jsxs)(n.p,{children:["React uses functions like ",(0,l.jsx)(n.code,{children:"setState"})," or ",(0,l.jsx)(n.code,{children:"useState"})," hooks to update values based on user actions\r\n(click, input, etc.)."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"syntax-of-updating-events",children:"Syntax of Updating Events"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:"const [count, setCount] = useState<number>(0);\r\n\r\n<button onClick={() => setCount(count + 1)}>Add</button>\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"example-button-click-to-update-state",children:"Example: Button Click to Update State"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\r\n\r\nconst Counter: React.FC = () => {\r\n  const [count, setCount] = useState<number>(0);\r\n\r\n  const handleIncrement = () => {\r\n    setCount(count + 1); // updates state on click\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h3>Count: {count}</h3>\r\n      <button onClick={handleIncrement}>+1</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\n"})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"example-explanation",children:"Example Explanation"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Concept"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsxs)(n.td,{children:[(0,l.jsx)(n.code,{children:"onClick"}),", ",(0,l.jsx)(n.code,{children:"onChange"})]}),(0,l.jsx)(n.td,{children:"React event handlers"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"useState()"})}),(0,l.jsx)(n.td,{children:"Hook to store and update values"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"handleChange()"})}),(0,l.jsx)(n.td,{children:"Reads input and updates state"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"handleClick()"})}),(0,l.jsx)(n.td,{children:"Executes logic when user clicks something"})]})]})]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h2,{id:"svelte---updating-events",children:[(0,l.jsx)(n.strong,{children:"SVELTE"})," - Updating Events"]}),"\n",(0,l.jsx)(n.h2,{id:"updating-state-based-on-events-in-svelte",children:"Updating State Based on Events in Svelte"}),"\n",(0,l.jsx)(n.h3,{id:"definition-of-updating-states-in-svelte",children:"Definition of Updating States in Svelte"}),"\n",(0,l.jsxs)(n.p,{children:["Svelte updates ",(0,l.jsx)(n.strong,{children:"reactive variables"})," directly (no ",(0,l.jsx)(n.code,{children:"useState"}),"). When an event happens, update the\r\nvariable \u2014 the UI reacts automatically."]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"syntax-of-updating-states-in-svelte",children:"Syntax of Updating States in Svelte"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-svelte",children:'<script lang="ts">\r\n  let count: number = 0;\r\n<\/script>\r\n\r\n<button on:click={() => count += 1}>Add</button>\r\n<p>Count: {count}</p>\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"example-button-click-to-update-state-in-svelte",children:"Example: Button Click to Update State in Svelte"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- Counter.svelte --\x3e\r\n<script lang="ts">\r\n  let count: number = 0;\r\n\r\n  const handleIncrement = () => {\r\n    count += 1;\r\n  };\r\n<\/script>\r\n\r\n<h3>Count: {count}</h3>\r\n<button on:click={handleIncrement}>+1</button>\n'})}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsx)(n.h3,{id:"explanation-of-the-above-example",children:"Explanation of the above Example"}),"\n",(0,l.jsxs)(n.table,{children:[(0,l.jsx)(n.thead,{children:(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.th,{children:"Concept"}),(0,l.jsx)(n.th,{children:"Description"})]})}),(0,l.jsxs)(n.tbody,{children:[(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"on:click"})}),(0,l.jsx)(n.td,{children:"Runs function when user clicks"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"on:input"})}),(0,l.jsx)(n.td,{children:"Reads text input value"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"let variable"})}),(0,l.jsx)(n.td,{children:"Declares reactive variables (like state)"})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"{#if condition}"})}),(0,l.jsxs)(n.td,{children:["Conditionally render block (like JSX ",(0,l.jsx)(n.code,{children:"&&"}),")"]})]}),(0,l.jsxs)(n.tr,{children:[(0,l.jsx)(n.td,{children:(0,l.jsx)(n.code,{children:"count += 1"})}),(0,l.jsx)(n.td,{children:"Directly updates reactive variable in Svelte"})]})]})]})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(o,{...e})}):o(e)}},50065:function(e,n,t){t.d(n,{Z:()=>a,a:()=>r});var s=t(67294);let l={},i=s.createContext(l);function r(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);