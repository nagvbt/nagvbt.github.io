"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["24629"],{63125:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>s,default:()=>h,toc:()=>d,metadata:()=>i,assets:()=>o,contentTitle:()=>a});var i=JSON.parse('{"id":"Languages/Files","title":"Files","description":"Working with files allows a program to read from and write data to disk. This is essential for tasks like saving user input, configuration settings, logging, or handling external data. Each programming language has its own way of handling file input/output (I/O), but the core concepts remain consistent.","source":"@site/docs/Languages/Files.md","sourceDirName":"Languages","slug":"/Languages/Files","permalink":"/docs/Languages/Files","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":17,"frontMatter":{"sidebar_position":17},"sidebar":"tutorialSidebar","previous":{"title":"Exceptions","permalink":"/docs/Languages/Exceptions"},"next":{"title":"React","permalink":"/docs/category/react"}}'),t=r(85893),l=r(50065);let s={sidebar_position:17},a="Files",o={},d=[{value:"C#",id:"c",level:2},{value:"Definition:",id:"definition",level:3},{value:"Syntax:",id:"syntax",level:3},{value:"Example:",id:"example",level:3},{value:"Java",id:"java",level:2},{value:"Definition:",id:"definition-1",level:3},{value:"Syntax:",id:"syntax-1",level:3},{value:"Example:",id:"example-1",level:3},{value:"Python",id:"python",level:2},{value:"Definition:",id:"definition-2",level:3},{value:"Syntax:",id:"syntax-2",level:3},{value:"Example:",id:"example-2",level:3},{value:"JavaScript (Node.js)",id:"javascript-nodejs",level:2},{value:"Definition:",id:"definition-3",level:3},{value:"Syntax:",id:"syntax-3",level:3},{value:"Example:",id:"example-3",level:3},{value:"C++",id:"c-1",level:2},{value:"<strong>Syntax</strong>",id:"syntax-4",level:2},{value:"<strong>Example</strong>",id:"example-4",level:2},{value:"TypeScript (Node.js)",id:"typescript-nodejs",level:2},{value:"<strong>Syntax</strong>",id:"syntax-5",level:2},{value:"<strong>Example</strong>",id:"example-5",level:2}];function c(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"files",children:"Files"})}),"\n",(0,t.jsxs)(n.p,{children:["Working with ",(0,t.jsx)(n.strong,{children:"files"})," allows a program to read from and write data to disk. This is essential for tasks like saving user input, configuration settings, logging, or handling external data. Each programming language has its own way of handling file input/output (I/O), but the core concepts remain consistent."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c",children:"C#"}),"\n",(0,t.jsx)(n.h3,{id:"definition",children:"Definition:"}),"\n",(0,t.jsxs)(n.p,{children:["In C#, file handling is provided by the ",(0,t.jsx)(n.code,{children:"System.IO"})," namespace, which includes classes such as ",(0,t.jsx)(n.code,{children:"File"}),", ",(0,t.jsx)(n.code,{children:"StreamWriter"}),", and ",(0,t.jsx)(n.code,{children:"StreamReader"})," for reading from and writing to files."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System.IO;\r\n\r\nFile.WriteAllText("filename.txt", "Text to write");\r\nstring content = File.ReadAllText("filename.txt");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\r\nusing System.IO;\r\n\r\nclass Program {\r\n    static void Main() {\r\n        string filePath = "example.txt";\r\n        \r\n        // Write to file\r\n        File.WriteAllText(filePath, "Hello, World!");\r\n        \r\n        // Read from file\r\n        string content = File.ReadAllText(filePath);\r\n        Console.WriteLine(content);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"java",children:"Java"}),"\n",(0,t.jsx)(n.h3,{id:"definition-1",children:"Definition:"}),"\n",(0,t.jsxs)(n.p,{children:["Java provides file handling through classes in the ",(0,t.jsx)(n.code,{children:"java.io"})," and ",(0,t.jsx)(n.code,{children:"java.nio.file"})," packages. The ",(0,t.jsx)(n.code,{children:"Files"})," class and ",(0,t.jsx)(n.code,{children:"BufferedWriter/BufferedReader"})," are commonly used for reading and writing."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax-1",children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'Files.write(Paths.get("filename.txt"), "Text to write".getBytes());\r\nString content = new String(Files.readAllBytes(Paths.get("filename.txt")));\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'import java.io.IOException;\r\nimport java.nio.file.*;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws IOException {\r\n        String filePath = "example.txt";\r\n        \r\n        // Write to file\r\n        Files.write(Paths.get(filePath), "Hello, World!".getBytes());\r\n        \r\n        // Read from file\r\n        String content = new String(Files.readAllBytes(Paths.get(filePath)));\r\n        System.out.println(content);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"python",children:"Python"}),"\n",(0,t.jsx)(n.h3,{id:"definition-2",children:"Definition:"}),"\n",(0,t.jsxs)(n.p,{children:["Python uses built-in functions like ",(0,t.jsx)(n.code,{children:"open()"})," along with file methods such as ",(0,t.jsx)(n.code,{children:"read()"})," and ",(0,t.jsx)(n.code,{children:"write()"})," to handle file I/O. The ",(0,t.jsx)(n.code,{children:"with"})," statement ensures files are properly closed."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax-2",children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'with open("filename.txt", "w") as file:\r\n    file.write("Text to write")\r\n\r\nwith open("filename.txt", "r") as file:\r\n    content = file.read()\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-2",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Write to file\r\nwith open("example.txt", "w") as file:\r\n    file.write("Hello, World!")\r\n\r\n# Read from file\r\nwith open("example.txt", "r") as file:\r\n    content = file.read()\r\n    print(content)\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"javascript-nodejs",children:"JavaScript (Node.js)"}),"\n",(0,t.jsx)(n.h3,{id:"definition-3",children:"Definition:"}),"\n",(0,t.jsxs)(n.p,{children:["In Node.js, file operations are performed using the ",(0,t.jsx)(n.code,{children:"fs"})," module. It supports both synchronous and asynchronous methods for reading and writing files."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax-3",children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const fs = require(\'fs\');\r\n\r\nfs.writeFileSync("filename.txt", "Text to write");\r\nlet content = fs.readFileSync("filename.txt", "utf8");\n'})}),"\n",(0,t.jsx)(n.h3,{id:"example-3",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'const fs = require(\'fs\');\r\n\r\nconst filePath = "example.txt";\r\n\r\n// Write to file\r\nfs.writeFileSync(filePath, "Hello, World!");\r\n\r\n// Read from file\r\nconst content = fs.readFileSync(filePath, "utf8");\r\nconsole.log(content);\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c-1",children:"C++"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.strong,{children:"C++"}),", ",(0,t.jsx)(n.strong,{children:"file handling"})," is done using the standard library ",(0,t.jsx)(n.code,{children:"<fstream>"}),". It allows reading from and writing to files. File operations are performed using the following classes:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ofstream"})," \u2013 for writing (output) to files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ifstream"})," \u2013 for reading (input) from files"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"fstream"})," \u2013 for both reading and writing"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["These classes are part of the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"<fstream>"})})," header and use file streams (like ",(0,t.jsx)(n.code,{children:"cin"}),"/",(0,t.jsx)(n.code,{children:"cout"})," but for files)."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"syntax-4",children:(0,t.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <fstream>  // Required for file operations\r\n\r\n// Writing to a file\r\nstd::ofstream outFile("filename.txt");\r\noutFile << "Some text";\r\noutFile.close();\r\n\r\n// Reading from a file\r\nstd::ifstream inFile("filename.txt");\r\nstd::string data;\r\ninFile >> data;\r\ninFile.close();\r\n\r\n// Reading line-by-line\r\nstd::string line;\r\nwhile (std::getline(inFile, line)) {\r\n    // process line\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"example-4",children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\r\n#include <fstream>\r\n#include <string>\r\n\r\nint main() {\r\n    // Writing to file\r\n    std::ofstream outFile("example.txt");\r\n    if (outFile.is_open()) {\r\n        outFile << "Hello, File!\\n";\r\n        outFile << "C++ File I/O Example\\n";\r\n        outFile.close();\r\n    } else {\r\n        std::cout << "Unable to open file for writing.\\n";\r\n    }\r\n\r\n    // Reading from file\r\n    std::ifstream inFile("example.txt");\r\n    std::string line;\r\n    if (inFile.is_open()) {\r\n        while (std::getline(inFile, line)) {\r\n            std::cout << line << std::endl;\r\n        }\r\n        inFile.close();\r\n    } else {\r\n        std::cout << "Unable to open file for reading.\\n";\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"typescript-nodejs",children:"TypeScript (Node.js)"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.strong,{children:"TypeScript"})," (running on Node.js), ",(0,t.jsx)(n.strong,{children:"file handling"})," is done using the built-in ",(0,t.jsx)(n.code,{children:"fs"})," module. It allows reading from and writing to files. You can perform file operations either ",(0,t.jsx)(n.strong,{children:"synchronously"})," or ",(0,t.jsx)(n.strong,{children:"asynchronously"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"syntax-5",children:(0,t.jsx)(n.strong,{children:"Syntax"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import * as fs from 'fs';\r\n\r\n// Writing to a file (synchronously)\r\nfs.writeFileSync('filename.txt', 'Some text');\r\n\r\n// Reading from a file (synchronously)\r\nconst data = fs.readFileSync('filename.txt', 'utf-8');\r\nconsole.log(data);\r\n\r\n// Reading line-by-line (asynchronously)\r\nimport * as readline from 'readline';\r\nimport { createReadStream } from 'fs';\r\n\r\nconst rl = readline.createInterface({\r\n    input: createReadStream('filename.txt'),\r\n    output: process.stdout,\r\n    terminal: false\r\n});\r\n\r\nrl.on('line', (line) => {\r\n    // process each line\r\n    console.log(line);\r\n});\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"example-5",children:(0,t.jsx)(n.strong,{children:"Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import * as fs from 'fs';\r\nimport * as readline from 'readline';\r\nimport { createReadStream } from 'fs';\r\n\r\ntry {\r\n    // Writing to file\r\n    fs.writeFileSync('example.txt', 'Hello, File!\\nTypeScript File I/O Example\\n');\r\n    console.log('File written successfully.');\r\n} catch (err) {\r\n    console.error('Unable to write file.', err);\r\n}\r\n\r\n// Reading from file line-by-line\r\nconst rl = readline.createInterface({\r\n    input: createReadStream('example.txt'),\r\n    output: process.stdout,\r\n    terminal: false\r\n});\r\n\r\nrl.on('line', (line) => {\r\n    console.log(line);\r\n});\r\n\r\nrl.on('error', (err) => {\r\n    console.error('Unable to read file.', err);\r\n});\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"#files",children:"Back to top"})})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,n,r){r.d(n,{Z:()=>a,a:()=>s});var i=r(67294);let t={},l=i.createContext(t);function s(e){let n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);