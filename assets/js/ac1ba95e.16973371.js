"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[47236],{96891:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>l,toc:()=>o});var i=n(85893),a=n(11151);const s={sidebar_position:5},c="Templates and Exception Handling",l={id:"articles/Cpp/Templates",title:"Templates and Exception Handling",description:"Templates",source:"@site/docs/articles/Cpp/Templates.md",sourceDirName:"articles/Cpp",slug:"/articles/Cpp/Templates",permalink:"/docs/articles/Cpp/Templates",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Stack",permalink:"/docs/articles/Cpp/DataStructures/Stack"},next:{title:"Type Casting and others",permalink:"/docs/articles/Cpp/TypeCastingOthers"}},r={},o=[{value:"Templates",id:"templates",level:2},{value:"1.What is a Function Template ?",id:"1what-is-a-function-template-",level:3},{value:"2.What is a class Template  ?",id:"2what-is-a-class-template--",level:3},{value:"3.What is Explicitly over loading /explicit specialization ?",id:"3what-is-explicitly-over-loading-explicit-specialization-",level:3},{value:"Exception Handling",id:"exception-handling",level:2},{value:"1.What is Exception handling?",id:"1what-is-exception-handling",level:3},{value:"2.Define Try, Throw, Catch ?",id:"2define-try-throw-catch-",level:3},{value:"3.What is the order of placing base and derived class Expections in try catch blocks ?",id:"3what-is-the-order-of-placing-base-and-derived-class-expections-in-try-catch-blocks-",level:3}];function p(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"templates-and-exception-handling",children:"Templates and Exception Handling"}),"\n",(0,i.jsx)(t.h2,{id:"templates",children:"Templates"}),"\n",(0,i.jsx)(t.h3,{id:"1what-is-a-function-template-",children:"1.What is a Function Template ?"}),"\n",(0,i.jsx)(t.p,{children:"Using templates we can create generic functions. We can use one function with several different types of data without having to explicitly recode specific versions for each data type."}),"\n",(0,i.jsx)(t.p,{children:"Syntax:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"template <class Type1, class Type2>\r\nreturn_type funName(param_list)\r\n{\r\n    // Function Body\r\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"2what-is-a-class-template--",children:"2.What is a class Template  ?"}),"\n",(0,i.jsx)(t.p,{children:"Using templates we can create generic classes. We can use one class with several different types of data without having to explicitly recode specific versions for each data type."}),"\n",(0,i.jsx)(t.p,{children:"Syntax:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:"template <class Type1, class Type2>\r\nclass className\r\n{\r\n    //Code\r\n}\r\nclassName <Type1, Type2>obj;\n"})}),"\n",(0,i.jsx)(t.h3,{id:"3what-is-explicitly-over-loading-explicit-specialization-",children:"3.What is Explicitly over loading /explicit specialization ?"}),"\n",(0,i.jsx)(t.p,{children:"Even through a generic function/class overloads itself needed we can explicitly over loaded one too. This is formally called as explicit specialization."}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.code,{children:"template<>"})," construct to indicate specialization."]}),"\n",(0,i.jsx)(t.h2,{id:"exception-handling",children:"Exception Handling"}),"\n",(0,i.jsx)(t.h3,{id:"1what-is-exception-handling",children:"1.What is Exception handling?"}),"\n",(0,i.jsx)(t.p,{children:"Exception handling allows to manage runtime errors in an orderly fashion.\r\nException handling build upon 3 keywords: Try, Throw, Catch."}),"\n",(0,i.jsx)(t.h3,{id:"2define-try-throw-catch-",children:"2.Define Try, Throw, Catch ?"}),"\n",(0,i.jsx)(t.p,{children:"Try: Program statements that we want to monitor for exceptions are contained in try block."}),"\n",(0,i.jsx)(t.p,{children:"Throw: If an exception i.e. error occurs within the try block, it is thrown using throw."}),"\n",(0,i.jsx)(t.p,{children:"Catch: The exception is caught using catch and processed."}),"\n",(0,i.jsx)(t.h3,{id:"3what-is-the-order-of-placing-base-and-derived-class-expections-in-try-catch-blocks-",children:"3.What is the order of placing base and derived class Expections in try catch blocks ?"}),"\n",(0,i.jsx)(t.p,{children:"To catch base class exception put always derived class object first in the catch blocks."})]})}function d(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>c});var i=n(67294);const a={},s=i.createContext(a);function c(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);