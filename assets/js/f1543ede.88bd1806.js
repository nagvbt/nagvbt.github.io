"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[65477],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,g=p["".concat(s,".").concat(f)]||p[f]||m[f]||i;return n?r.createElement(g,o(o({ref:t},u),{},{components:n})):r.createElement(g,o({ref:t},u))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},58137:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={tags:["C++"]},o="Variable arguments handling in C/C++",l={permalink:"/blog/2011/09/18/variable-arguments-handling",source:"@site/blog/2011-09-18-variable-arguments-handling.md",title:"Variable arguments handling in C/C++",description:"Use valist to accept a VARYING NUMBER OF ARGUMENTS for any function in C/C++. printf(const char\\*Format, ...) is a real time function which uses va_list.",date:"2011-09-18T00:00:00.000Z",formattedDate:"September 18, 2011",tags:[{label:"C++",permalink:"/blog/tags/c"}],readingTime:.705,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["C++"]},prevItem:{title:"Size Matters (C++)",permalink:"/blog/2011/09/18/size-matters-c"},nextItem:{title:"Why size of an empty C++ class not zero?",permalink:"/blog/2011/09/18/why-size-of-an-empty-c-class-not-zero"}},s={authorsImageUrls:[]},c=[],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Use va_list to accept a VARYING NUMBER OF ARGUMENTS for any function in C/C++. printf(const char","*","_Format, ...) is a real time function which uses va_list."),(0,a.kt)("p",null,"For using va_list we need to know about the following macros"),(0,a.kt)("p",null,"va_start Initialize a variable argument list (macro) va_arg Retrieve next argument (macro) va_end End using variable argument list (macro)"),(0,a.kt)("p",null,"The sample explains how to use VARYING NUMBER OF ARGUMENTS"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'\n# include <stdarg.h>\n\nint Add(int args, ...) \n{ \n  int sum = 0; \n  int temp = 0;\n\n  va_list va; //1. Declare a va_list\n\n  va_start(va, args); //2. Initialise\n\n  for(int i = 0; i<=args; i++) { \n    temp = va_arg(va, int); //3. Retrieve \n    sum = temp+sum; \n  }\n\nva_end(va); //4. END\n\nreturn sum; \n}\n\nvoid main() { \n  printf("sum=%d n ", Add(2, 1, 2, 5)); \n  //OutPut: 8 \n  }\n')))}m.isMDXComponent=!0}}]);