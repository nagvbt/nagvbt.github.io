"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["26069"],{42913:function(n,e,r){r.r(e),r.d(e,{frontMatter:()=>s,default:()=>c,toc:()=>m,metadata:()=>t,assets:()=>i,contentTitle:()=>a});var t=JSON.parse('{"id":"UIFrameworks/Forms","title":"Forms","description":"React","source":"@site/docs/UIFrameworks/Forms.md","sourceDirName":"UIFrameworks","slug":"/UIFrameworks/Forms","permalink":"/docs/UIFrameworks/Forms","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"Lists","permalink":"/docs/UIFrameworks/Lists"},"next":{"title":"Router","permalink":"/docs/UIFrameworks/Router"}}'),l=r(85893),o=r(50065);let s={sidebar_position:15},a="Forms",i={},m=[{value:"<strong>React</strong>",id:"react",level:2},{value:"Definition",id:"definition",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Controlled Form",id:"controlled-form",level:4},{value:"Uncontrolled Form",id:"uncontrolled-form",level:4},{value:"Example: Controlled Form with Multiple Inputs",id:"example-controlled-form-with-multiple-inputs",level:3},{value:"<strong>Svelte</strong>",id:"svelte",level:2},{value:"Definition-Forms",id:"definition-forms",level:3},{value:"Syntax Overview",id:"syntax-overview",level:3},{value:"Controlled Forms",id:"controlled-forms",level:4},{value:"Uncontrolled Forms",id:"uncontrolled-forms",level:4},{value:"Example Form with Multiple Inputs",id:"example-form-with-multiple-inputs",level:3}];function d(n){let e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(e.header,{children:(0,l.jsx)(e.h1,{id:"forms",children:"Forms"})}),"\n",(0,l.jsx)(e.h2,{id:"react",children:(0,l.jsx)(e.strong,{children:"React"})}),"\n",(0,l.jsx)(e.h3,{id:"definition",children:"Definition"}),"\n",(0,l.jsxs)(e.p,{children:["In React, ",(0,l.jsx)(e.strong,{children:"forms"})," are used to collect user input. React supports both ",(0,l.jsx)(e.strong,{children:"controlled"})," and\r\n",(0,l.jsx)(e.strong,{children:"uncontrolled"})," forms:"]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Controlled Form"}),": Form data is handled by React state."]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Uncontrolled Form"}),": Form data is handled by the DOM using refs."]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h3,{id:"syntax",children:"Syntax"}),"\n",(0,l.jsx)(e.h4,{id:"controlled-form",children:"Controlled Form"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-tsx",children:"const [value, setValue] = useState<string>('');\r\n<input type=\"text\" value={value} onChange={(e) => setValue(e.target.value)} />\n"})}),"\n",(0,l.jsx)(e.h4,{id:"uncontrolled-form",children:"Uncontrolled Form"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-tsx",children:'const inputRef = useRef<HTMLInputElement>(null);\r\n<input type="text" ref={inputRef} />\n'})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h3,{id:"example-controlled-form-with-multiple-inputs",children:"Example: Controlled Form with Multiple Inputs"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-tsx",children:"// App.tsx\r\nimport React, { useState, FC, ChangeEvent } from 'react';\r\nimport FormInput from './FormInput';\r\nimport FormDisplay from './FormDisplay';\r\n\r\nconst App: FC = () => {\r\n  const [formData, setFormData] = useState<{ name: string; email: string }>({\r\n    name: '',\r\n    email: ''\r\n  });\r\n\r\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>React Forms Example</h1>\r\n      <FormInput formData={formData} onChange={handleChange} />\r\n      <FormDisplay formData={formData} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\n"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-tsx",children:'// FormInput.tsx\r\nimport React, { FC, ChangeEvent } from \'react\';\r\n\r\ninterface Props {\r\n  formData: {\r\n    name: string;\r\n    email: string;\r\n  };\r\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst FormInput: FC<Props> = ({ formData, onChange }) => (\r\n  <form>\r\n    <input\r\n      type="text"\r\n      name="name"\r\n      value={formData.name}\r\n      onChange={onChange}\r\n      placeholder="Name"\r\n    />\r\n    <input\r\n      type="email"\r\n      name="email"\r\n      value={formData.email}\r\n      onChange={onChange}\r\n      placeholder="Email"\r\n    />\r\n  </form>\r\n);\r\n\r\nexport default FormInput;\n'})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-tsx",children:"// FormDisplay.tsx\r\nimport React, { FC } from 'react';\r\n\r\ninterface Props {\r\n  formData: {\r\n    name: string;\r\n    email: string;\r\n  };\r\n}\r\n\r\nconst FormDisplay: FC<Props> = ({ formData }) => (\r\n  <div>\r\n    <p><strong>Name:</strong> {formData.name}</p>\r\n    <p><strong>Email:</strong> {formData.email}</p>\r\n  </div>\r\n);\r\n\r\nexport default FormDisplay;\n"})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h2,{id:"svelte",children:(0,l.jsx)(e.strong,{children:"Svelte"})}),"\n",(0,l.jsx)(e.h3,{id:"definition-forms",children:"Definition-Forms"}),"\n",(0,l.jsxs)(e.p,{children:["In Svelte, ",(0,l.jsx)(e.strong,{children:"forms"})," are used to collect user input similarly to React. But Svelte makes it simpler\r\nwith ",(0,l.jsx)(e.strong,{children:"two-way binding"})," using ",(0,l.jsx)(e.code,{children:"bind:"}),"."]}),"\n",(0,l.jsxs)(e.ul,{children:["\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Controlled Form"}),": Use ",(0,l.jsx)(e.code,{children:"bind:"})," to directly connect input fields to variables."]}),"\n",(0,l.jsxs)(e.li,{children:[(0,l.jsx)(e.strong,{children:"Uncontrolled Form"}),": You can still access values using ",(0,l.jsx)(e.code,{children:"refs"})," or DOM APIs, but it's less common\r\ndue to Svelte's simplicity."]}),"\n"]}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsx)(e.h3,{id:"syntax-overview",children:"Syntax Overview"}),"\n",(0,l.jsx)(e.h4,{id:"controlled-forms",children:"Controlled Forms"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-svelte",children:'<script lang="ts">\r\n  let value: string = \'\';\r\n<\/script>\r\n\r\n<input type="text" bind:value />\n'})}),"\n",(0,l.jsx)(e.h4,{id:"uncontrolled-forms",children:"Uncontrolled Forms"}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-svelte",children:'<script lang="ts">\r\n  let inputRef: HTMLInputElement;\r\n  \r\n  function handleClick() {\r\n    alert(inputRef.value);\r\n  }\r\n<\/script>\r\n\r\n<input type="text" bind:this={inputRef} />\r\n<button on:click={handleClick}>Show Value</button>\n'})}),"\n",(0,l.jsx)(e.hr,{}),"\n",(0,l.jsxs)(e.h3,{id:"example-form-with-multiple-inputs",children:["Example",":Controlled"," Form with Multiple Inputs"]}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-svelte",children:"\x3c!-- App.svelte --\x3e\r\n<script lang=\"ts\">\r\n  import FormInput from './FormInput.svelte';\r\n  import FormDisplay from './FormDisplay.svelte';\r\n\r\n  let formData = {\r\n    name: '',\r\n    email: ''\r\n  };\r\n<\/script>\r\n\r\n<h1>Svelte Forms Example</h1>\r\n<FormInput bind:formData />\r\n<FormDisplay {formData} />\n"})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-svelte",children:'\x3c!-- FormInput.svelte --\x3e\r\n<script lang="ts">\r\n  export let formData: {\r\n    name: string;\r\n    email: string;\r\n  };\r\n<\/script>\r\n\r\n<form>\r\n  <input\r\n    type="text"\r\n    placeholder="Name"\r\n    bind:value={formData.name}\r\n  />\r\n  <input\r\n    type="email"\r\n    placeholder="Email"\r\n    bind:value={formData.email}\r\n  />\r\n</form>\n'})}),"\n",(0,l.jsx)(e.pre,{children:(0,l.jsx)(e.code,{className:"language-svelte",children:'\x3c!-- FormDisplay.svelte --\x3e\r\n<script lang="ts">\r\n  export let formData: {\r\n    name: string;\r\n    email: string;\r\n  };\r\n<\/script>\r\n\r\n<div>\r\n  <p><strong>Name:</strong> {formData.name}</p>\r\n  <p><strong>Email:</strong> {formData.email}</p>\r\n</div>\n'})}),"\n",(0,l.jsx)(e.hr,{})]})}function c(n={}){let{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(d,{...n})}):d(n)}},50065:function(n,e,r){r.d(e,{Z:()=>a,a:()=>s});var t=r(67294);let l={},o=t.createContext(l);function s(n){let e=t.useContext(o);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(l):n.components||l:s(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);