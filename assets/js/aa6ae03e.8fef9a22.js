"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["42323"],{79397:function(n,r,e){e.r(r),e.d(r,{frontMatter:()=>o,default:()=>h,toc:()=>c,metadata:()=>t,assets:()=>s,contentTitle:()=>l});var t=JSON.parse('{"id":"COM-ATL/COMTutorial","title":"COMTutorial","description":"If you are new to COM ( Component Object model ) please refer the below items.","source":"@site/docs/COM-ATL/COMTutorial.md","sourceDirName":"COM-ATL","slug":"/COM-ATL/COMTutorial","permalink":"/docs/COM-ATL/COMTutorial","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"C FAQ","permalink":"/docs/C/CFaq"},"next":{"title":"ATL Tutorial","permalink":"/docs/COM-ATL/ATL"}}'),i=e(85893),a=e(50065);let o={sidebar_position:2},l="COM Step by Step Tutorial",s={},c=[{value:"Steps for adding required files and writing code",id:"steps-for-adding-required-files-and-writing-code",level:2}];function d(n){let r={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"com-step-by-step-tutorial",children:"COM Step by Step Tutorial"})}),"\n",(0,i.jsx)(r.p,{children:"If you are new to COM ( Component Object model ) please refer the below items."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"/docs/COM-ATL/COM-Basics",children:"1. COM Basics"})}),"\n",(0,i.jsxs)(r.p,{children:["Creating\xa0",(0,i.jsx)(r.strong,{children:"comMathServLib"})," which is a COM In-Process DLL for implementing an Simple\r\nAddition (Add) and\xa0Subtraction (Sub) functions by writing IMath interface . Finally a\r\nconsole application '",(0,i.jsx)(r.strong,{children:"comClient"}),"' will consumes the\xa0comMathServLib."]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:(0,i.jsx)(r.em,{children:"Conventions:"})})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"**uuidof(CMathComp) = classID or CLSID\r\n**uuidof(IMath) = InterfaceID or IID\n"})}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"To get an Interface pointer to IMath call CoCreateInstance(...)"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"IMath* pIMath;\r\nHRESULT hr = CoCreateInstance ( **uuidof(CMathComp), NULL, CLSCTX_INPROC_SERVER,\r\n**uuidof(IMath), (void**) &pIMath );\n"})}),"\n",(0,i.jsxs)(r.ol,{start:"2",children:["\n",(0,i.jsx)(r.li,{children:"CoCreateInstance calls CoGetClassObject(...)"}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"CoGetClassObject( **uuidof(CMathComp), CLSCTX_INPROC_SERVER, NULL,** uuidof(IMath),\r\n(void**) &pIMath);\n"})}),"\n",(0,i.jsx)(r.p,{children:"CoGetClassObject invokes the COM Service Control Manager, which searches in the Registry using the classID. It finds the associated ComServer DLL, loads it into memory, and calls the DllGetClassObject method of the DLL."}),"\n",(0,i.jsxs)(r.ol,{start:"3",children:["\n",(0,i.jsx)(r.li,{children:"The DLL contains an object of CMathCompClassFactory. The DllGetClassObject gets the IClassFactory pointer and COM calls CreateInstance(...)"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"CreateInstance(...) method creates the CMathComp and returns the Pointer to IMath as requested by CoCreateInstance"}),"\n",(0,i.jsxs)(r.p,{children:["Steps for creating \xa0",(0,i.jsx)(r.strong,{children:"comMathServLib"})," Project:"]}),"\n",(0,i.jsxs)(r.p,{children:["A. Open Visual Studio 2008",(0,i.jsx)(r.br,{}),"\n","B. Go to File -> New Project : In the new project dialog under 'Visual C++' select Win32 - Right side select the Win32 Project Template and give the project name as 'comMathServLib'",(0,i.jsx)(r.br,{}),"\n","C. Win32 Application Wizard Dialog pops up",(0,i.jsx)(r.br,{}),"\n","-> Click Next",(0,i.jsx)(r.br,{}),"\n","->In Application Setting -> Application type: Select DLL and click Finish"]}),"\n",(0,i.jsx)(r.h2,{id:"steps-for-adding-required-files-and-writing-code",children:"Steps for adding required files and writing code"}),"\n",(0,i.jsx)(r.p,{children:"File can be added by Right click on the Project in 'Solution Explorer' -> Add -> New Item..."}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsxs)(r.strong,{children:["1. Add a Header File [IMath.h] to declare the Interface for our Math Component class ",(0,i.jsx)(r.em,{children:"CMathComp"})]})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"IMath.h"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:'\r\n# include "Unknown.h"\r\n\r\ninterface IMath : IUnknown\r\n{\r\n//Simple Math Functions\r\nvirtual int **stdcall Add(int i, int j) = 0;\r\nvirtual int** stdcall Sub(int i, int j) = 0;\r\n};\n'})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"2.\xa0Add a C++ File [MathComp.cpp] to Implement the IMath Interface and also to implement the IUnkown Interface methods"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"MathComp.cpp"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:'\r\n# include "stdafx.h"\r\n# include "IMath.h"\r\n# include "MathCompGuidDef.h"\r\n\r\nclass CMathComp : public IMath\r\n{\r\npublic:\r\nCMathComp()\r\n{\r\nm_uRefCount = 0;\r\ng_uDllLockCount++;\r\n}\r\n\r\nvirtual ~CMathComp()\r\n{\r\n    g_uDllLockCount--;\r\n}\r\n\r\n// IUnknown methods\r\nvirtual ULONG __stdcall AddRef()\r\n{\r\n    m_uRefCount = m_uRefCount+1;  // Increment this object\'s reference count.\r\n    return m_uRefCount;\r\n}\r\n\r\nvirtual ULONG __stdcall Release()\r\n{\r\n    ULONG uRet = m_uRefCount-1;   // Decrement this object\'s reference count.\r\n\r\n    if ( 0 == m_uRefCount )       // Releasing last reference?\r\n    {\r\n        delete this;\r\n    }\r\n\r\n    return uRet;\r\n}\r\n\r\nvirtual HRESULT __stdcall QueryInterface( REFIID riid, void** ppv )\r\n{\r\n    HRESULT hrRet = S_OK;\r\n\r\n    // Check that ppv really points to a void*.\r\n    if ( IsBadWritePtr ( ppv, sizeof(void*) ))\r\n    {\r\n        return E_POINTER;\r\n    }\r\n\r\n    // Standard QI initialization - set *ppv to NULL.\r\n    *ppv = NULL;\r\n\r\n    // If the client is requesting an interface we support, set *ppv.\r\n    if ( InlineIsEqualGUID ( riid, IID_IUnknown ))\r\n    {\r\n        *ppv = (IUnknown*) this;\r\n    }\r\n    else if ( InlineIsEqualGUID ( riid, __uuidof(IMath) ))\r\n    {\r\n        *ppv = (IMath*) this;\r\n    }\r\n    else\r\n    {\r\n        hrRet = E_NOINTERFACE;\r\n    }\r\n\r\n    // If we\'re returning an interface pointer, AddRef() it.\r\n    if ( S_OK == hrRet )\r\n    {\r\n        ((IUnknown*) *ppv)->AddRef();\r\n    }\r\n\r\n    return hrRet;\r\n}\r\n\r\n//IMath Implementation\r\nvirtual int __stdcall Add(int i, int j)\r\n{\r\n    return i+j;\r\n}\r\n\r\nvirtual int __stdcall Sub(int i, int j)\r\n{\r\n    return i-j;\r\n}\r\n\r\nprotected:\r\nUINT m_uRefCount; // object\'s reference count\r\n};\n'})}),"\n",(0,i.jsxs)(r.ol,{start:"3",children:["\n",(0,i.jsx)(r.li,{children:"Add a Header File [MathCompGuidDef.h] for assigning GUIDS for IMath and CMathComp"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"MathCompGuidDef.h"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:'struct **declspec(uuid("{4024093A-F7C4-4ecf-8E60-B79C5AEAE6E0}")) IMath;\r\nclass** declspec(uuid("{3429CFBA-BCEA-4b1d-9441-E1E3C26BD8E9}")) CMathComp;\n'})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"3. Add a C++ File [CMathCompClassFactory.h] to Implement the IClassFactory Interface for our Math Component"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"CMathCompClassFactory.h"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"\r\n# include \"stdafx.h\"\r\n# include \"MathComp.cpp\"\r\nclass CMathCompClassFactory : public IClassFactory\r\n{\r\npublic:\r\nCMathCompClassFactory()\r\n{\r\nm_uRefCount = 0;\r\ng_uDllLockCount++;\r\n}\r\nvirtual ~CMathCompClassFactory()\r\n{\r\n    g_uDllLockCount--;\r\n}\r\n\r\n// IUnknown methods\r\nvirtual ULONG __stdcall AddRef()\r\n{\r\n    m_uRefCount = m_uRefCount+1;  // Increment this object's reference count.\r\n    return m_uRefCount;\r\n}\r\n\r\nvirtual ULONG __stdcall Release()\r\n{\r\n    ULONG uRet = m_uRefCount-1;   // Decrement this object's reference count.\r\n\r\n    if ( 0 == m_uRefCount )       // Releasing last reference?\r\n    {\r\n        delete this;\r\n    }\r\n\r\n    return uRet;\r\n}\r\n\r\nvirtual HRESULT __stdcall QueryInterface( REFIID riid, void** ppv )\r\n{\r\n    HRESULT hrRet = S_OK;\r\n\r\n    // Check that ppv really points to a void*.\r\n    if ( IsBadWritePtr ( ppv, sizeof(void*) ))\r\n    {\r\n        return E_POINTER;\r\n    }\r\n\r\n    // Standard QI initialization - set *ppv to NULL.\r\n    *ppv = NULL;\r\n\r\n    // If the client is requesting an interface we support, set *ppv.\r\n    if ( InlineIsEqualGUID ( riid, IID_IUnknown ))\r\n    {\r\n        *ppv = (IUnknown*) this;\r\n    }\r\n    else if ( InlineIsEqualGUID ( riid, IID_IClassFactory ))\r\n    {\r\n        *ppv = (IClassFactory*) this;\r\n    }\r\n    else\r\n    {\r\n        hrRet = E_NOINTERFACE;\r\n    }\r\n\r\n    // If we're returning an interface pointer, AddRef() it.\r\n    if ( S_OK == hrRet )\r\n    {\r\n        ((IUnknown*) *ppv)->AddRef();\r\n    }\r\n\r\n    return hrRet;\r\n\r\n}\r\n\r\n// IClassFactory\r\nvirtual HRESULT __stdcall CreateInstance ( IUnknown* pUnkOuter,\r\nREFIID riid,\r\nvoid** ppv )\r\n{\r\nHRESULT hrRet;\r\n\r\n\r\n    // No support aggregation, so pUnkOuter must be NULL.\r\n    if ( NULL != pUnkOuter )\r\n    {\r\n        return CLASS_E_NOAGGREGATION;\r\n    }\r\n\r\n    // Check that ppv really points to a void*.\r\n    if ( IsBadWritePtr ( ppv, sizeof(void*) ))\r\n    {\r\n        return E_POINTER;\r\n    }\r\n\r\n    *ppv = NULL;\r\n\r\n    // Create a new COM object!\r\n    m_pMathServ = new CMathComp();\r\n\r\n    if ( NULL == m_pMathServ )\r\n    {\r\n        return E_OUTOFMEMORY;\r\n    }\r\n\r\n    // QueryInterface the object for the interface the client is requesting.\r\n    hrRet = m_pMathServ->QueryInterface ( riid, ppv );\r\n\r\n    // If the QI failed, delete the COM object since the client isn't able\r\n    // to use it (the client doesn't have any interface pointers on the object)\r\n    if ( FAILED(hrRet) )\r\n    {\r\n        delete m_pMathServ;\r\n    }\r\n\r\n    return hrRet;\r\n}\r\n\r\nvirtual HRESULT __stdcall LockServer ( BOOL fLock )\r\n{\r\n    // Increase/decrease the DLL ref count, according to the fLock param.\r\n    fLock ? g_uDllLockCount++ : g_uDllLockCount--;\r\n    return S_OK;\r\n}\r\n\r\n\r\nprotected:\r\nULONG m_uRefCount;\r\nCMathComp* m_pMathServ;\r\n};\n"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"4. Add a C++ File [Infrastructure.cpp] and add the Infrastructure methods to our comMathServLib In-Process COM Component"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:'# include "stdafx.h"\r\n# include "MathCompGuidDef.h"\r\n# include "MathCompClassFactory.cpp"\r\n\r\nHINSTANCE g_hinstThisDll = NULL; // DLL\'s module handle\r\nUINT g_uDllLockCount = 0; // # of COM objects in existence\r\n\r\n// DllMain() is our DLL\'s entry point. Windows calls this when a process or thread\r\n// loads and unloads the DLL.\r\nBOOL APIENTRY DllMain ( HINSTANCE hModule,\r\nDWORD ul_reason_for_call,\r\nLPVOID lpReserved )\r\n{\r\nswitch ( ul_reason_for_call )\r\n{\r\n    case DLL_PROCESS_ATTACH:\r\n    {\r\n      g_hinstThisDll = hModule;\r\n      // Calling DisableThreadLibraryCalls() prevents DllMain() from\r\n      // getting called for every thread that attaches/detaches from DLL\r\n      DisableThreadLibraryCalls ( hModule );\r\n    }\r\n    break;\r\n\r\n    case DLL_PROCESS_DETACH:\r\n    {\r\n    }\r\n    break;\r\n}\r\n\r\nreturn TRUE;\r\n}\r\n\r\n// DllGetClassObject() is called when COM needs to get a class factory.\r\nSTDAPI DllGetClassObject ( REFCLSID rclsid, REFIID riid, void* *ppv )\r\n{\r\nHRESULT hrRet;\r\nCMathCompClassFactory* pFactory;\r\n\r\n// Check that the client is asking for the CSimpleMsgBoxImpl factory.\r\nif ( !InlineIsEqualGUID ( rclsid, __uuidof(CMathComp) ))\r\n{\r\n    return CLASS_E_CLASSNOTAVAILABLE;\r\n}\r\n\r\n// Check that ppv really points to a void*.\r\nif ( IsBadWritePtr ( ppv, sizeof(void*) ))\r\n{\r\n    return E_POINTER;\r\n}\r\n\r\n*ppv = NULL;\r\n\r\n// Construct a new class factory object.\r\npFactory = new CMathCompClassFactory;\r\n\r\nif ( NULL == pFactory )\r\n{\r\n    return E_OUTOFMEMORY;\r\n}\r\n\r\n// AddRef() the factory since we\'re using it.\r\npFactory->AddRef();\r\n\r\n// QueryInterface() the factory for the interface the client wants.\r\nhrRet = pFactory->QueryInterface ( riid, ppv );\r\n\r\n// We\'re done with the factory, so Release() it.\r\npFactory->Release();\r\n\r\nreturn hrRet;\r\n\r\n}\r\n\r\n// DllCanUnloadNow() is called when COM wants to unload our DLL from memory.\r\n// We check our lock count, which will be nonzero if there are any COM\r\n// objects still in memory.\r\n// Return S_FALSE to prevent the DLL from being unloaded, or S_OK to let it\r\n// be unloaded.\r\nSTDAPI DllCanUnloadNow()\r\n{\r\nreturn g_uDllLockCount > 0 ? S_FALSE : S_OK;\r\n}\r\n\r\n// DllRegisterServer() creates the registy entries that tells COM where our\r\n// server is located and its threading model.\r\nSTDAPI DllRegisterServer()\r\n{\r\nHKEY hCLSIDKey = NULL, hInProcSvrKey = NULL;\r\nLONG lRet;\r\nTCHAR szModulePath [MAX_PATH];\r\nTCHAR szClassDescription[] = _T("MathServ class");\r\nTCHAR szThreadingModel[] = _T("Apartment");\r\n\r\n__try\r\n{\r\n    // Create a key under CLSID for our COM server.\r\n    lRet = RegCreateKeyEx ( HKEY_CLASSES_ROOT,\r\n            _T("CLSID{3429CFBA-BCEA-4b1d-9441-E1E3C26BD8E9}"), 0, NULL,\r\n            REG_OPTION_NON_VOLATILE, KEY_SET_VALUE | KEY_CREATE_SUB_KEY,\r\n            NULL, &hCLSIDKey, NULL );\r\n\r\n    if ( ERROR_SUCCESS != lRet )\r\n    {\r\n        return HRESULT_FROM_WIN32(lRet);\r\n    }\r\n\r\n    // The default value of the key is a human-readable\r\n    // description of the coclass.\r\n    lRet = RegSetValueEx ( hCLSIDKey, NULL, 0, REG_SZ,\r\n            (const BYTE*)szClassDescription, sizeof(szClassDescription));\r\n\r\n    if ( ERROR_SUCCESS != lRet )\r\n    {\r\n        return HRESULT_FROM_WIN32(lRet);\r\n    }\r\n\r\n    // Create the InProcServer32 key, which holds info about our coclass.\r\n    lRet = RegCreateKeyEx ( hCLSIDKey, _T("InProcServer32"), 0, NULL,\r\n            REG_OPTION_NON_VOLATILE, KEY_SET_VALUE,\r\n            NULL, &hInProcSvrKey, NULL );\r\n\r\n    if ( ERROR_SUCCESS != lRet )\r\n    {\r\n        return HRESULT_FROM_WIN32(lRet);\r\n    }\r\n\r\n    // The default value of the InProcServer32 key holds the\r\n    // full path to our DLL.\r\n    GetModuleFileName ( g_hinstThisDll, szModulePath, MAX_PATH );\r\n\r\n    lRet = RegSetValueEx(hInProcSvrKey, NULL, 0, REG_SZ, (const BYTE*)szModulePath,\r\n            sizeof(TCHAR) *(lstrlen(szModulePath)+1) );\r\n\r\n    if ( ERROR_SUCCESS != lRet )\r\n    {\r\n        return HRESULT_FROM_WIN32(lRet);\r\n    }\r\n\r\n    // The ThreadingModel value tells COM how it should handle threads\r\n    // in our DLL. The concept of apartments is beyond the scope of this\r\n    // article, but for simple, single-threaded DLLs, use Apartment.\r\n    lRet = RegSetValueEx ( hInProcSvrKey, _T("ThreadingModel"), 0, REG_SZ,\r\n        (const BYTE*) szThreadingModel,\r\n        sizeof(szThreadingModel) );\r\n\r\n    if ( ERROR_SUCCESS != lRet )\r\n    {\r\n        return HRESULT_FROM_WIN32(lRet);\r\n    }\r\n}\r\n\r\n__finally\r\n{\r\n    if ( NULL != hCLSIDKey )\r\n    {\r\n        RegCloseKey ( hCLSIDKey );\r\n    }\r\n\r\n    if ( NULL != hInProcSvrKey )\r\n    {\r\n        RegCloseKey ( hInProcSvrKey );\r\n    }\r\n}\r\n\r\nreturn S_OK;\r\n\r\n}\r\n\r\n// DllUnregisterServer() deleted the registy entries that DllRegisterServer() created.\r\nSTDAPI DllUnregisterServer()\r\n{\r\n// Delete our registry entries.\r\nRegDeleteKey ( HKEY_CLASSES_ROOT,\r\n_T("CLSID{3429CFBA-BCEA-4b1d-9441-E1E3C26BD8E9}InProcServer32"));\r\n\r\nRegDeleteKey ( HKEY_CLASSES_ROOT,\r\n _T("CLSID{3429CFBA-BCEA-4b1d-9441-E1E3C26BD8E9}") );\r\n\r\nreturn S_OK;\r\n\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"5. Add a .def [MathServ.def] to export functions"}),(0,i.jsx)(r.br,{}),"\n",(0,i.jsx)(r.strong,{children:"MathServ.def"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"EXPORTS\r\nDllRegisterServer PRIVATE\r\nDllUnregisterServer PRIVATE\r\nDllGetClassObject PRIVATE\r\nDllCanUnloadNow PRIVATE\n"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"6. In stdafx.h add module lock count and instance for DLL"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"\r\n# pragma once\r\n# define WIN32_LEAN_AND_MEAN // Exclude rarely-used stuff from Windows headers\r\n# include <windows.h>\r\n# include <tchar.h>\r\n# include <comdef.h>\r\n\r\nextern HINSTANCE g_hinstThisDll; // Our DLL's HINSTANCE\r\nextern UINT g_uDllLockCount; // The module lock count\n"})}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Develop a Console Client"})," ",(0,i.jsx)(r.strong,{children:"named 'comClient'"})," ",(0,i.jsx)(r.strong,{children:"for consuming the 'comMathServLib'"})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"comClient.cpp"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:'// comClient.cpp : Defines the entry point for the console application.\r\n# include <comdef.h>\r\n# include "../comMathServLib/MathCompGuidDef.h"\r\n# include "../comMathServLib/IMath.h"\r\nint main()\r\n{\r\nIMath* pIMath;\r\nHRESULT hr;\r\n\r\n// 1. Initialize COM Library\r\nCoInitialize(NULL);\r\n\r\n// 2. Call CoCreateInstance to get the IMath interface pointer\r\nhr = CoCreateInstance ( __uuidof(CMathComp), NULL, CLSCTX_INPROC_SERVER,\r\n                        __uuidof(IMath), (void**) &pIMath );\r\n\r\nif ( FAILED(hr) )\r\n{\r\n    return 0;\r\n}\r\n\r\n// 3. Call the interface functions\r\nint sum = pIMath->Add(1, 3);\r\nprintf("Sum = %d n", sum);\r\n\r\nint sub = pIMath->Sub(4, 3);\r\nprintf("Sub = %d n", sub);\r\n\r\n// 4. Release the interface pointer if you are done\r\npIMath->Release();\r\n\r\n// 5. Un-Initialize COM Library\r\nCoUninitialize();\r\nreturn 0;\r\n\r\n}\n'})})]})}function h(n={}){let{wrapper:r}={...(0,a.a)(),...n.components};return r?(0,i.jsx)(r,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},50065:function(n,r,e){e.d(r,{Z:()=>l,a:()=>o});var t=e(67294);let i={},a=t.createContext(i);function o(n){let r=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function l(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:o(n.components),t.createElement(a.Provider,{value:r},n.children)}}}]);