"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[65302],{68615:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var r=t(85893),o=t(11151);const s={tags:["MFC"]},a="Console Application Event Handling",l={permalink:"/blog/2011/09/03/console-application-event-handling",source:"@site/blog/2011-09-03-console-application-event-handling.md",title:"Console Application Event Handling",description:"Using SetConsoleCtrlHandler we can Add an application-defined HandlerRoutine function say myConsoleHandler.",date:"2011-09-03T00:00:00.000Z",formattedDate:"September 3, 2011",tags:[{label:"MFC",permalink:"/blog/tags/mfc"}],readingTime:.64,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["MFC"]},unlisted:!1,prevItem:{title:"Why size of an empty C++ class not zero?",permalink:"/blog/2011/09/18/why-size-of-an-empty-c-class-not-zero"},nextItem:{title:"Obtain a pointer to various objects in MFC",permalink:"/blog/2011/09/03/MFC-pointer"}},i={authorsImageUrls:[]},c=[];function d(n){const e={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(e.p,{children:["Using ",(0,r.jsx)(e.strong,{children:"SetConsoleCtrlHandler"})," we can Add an application-defined HandlerRoutine function say myConsoleHandler."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Note:"})," If the second parameter is TRUE, the handler is added; if it is FALSE, the handler is removed by SetConsoleCtrlHandler function."]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Sample code is Shown Below"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include "stdafx.h"\r\n#include "windows.h"\r\n\r\nvoid myConsoleHandler(DWORD ctrlEvent)\r\n{\r\n   switch(ctrlEvent)\r\n   {\r\n        case CTRL_CLOSE_EVENT:\r\n            MessageBox(NULL,"Program being closed!","CTRL_CLOSE_EVENT",MB_OK);\r\n        break;\r\n\r\n        case CTRL_C_EVENT:\r\n            MessageBox(NULL,"Copy Event!","CTRL_C_EVENT",MB_OK);\r\n        break;\r\n   }\r\n\r\n}\r\n\r\nint main(int argc, _TCHAR* argv[])\r\n{\r\n    SetConsoleTitle("Console Event Handler Demo");\r\n\r\n    if(SetConsoleCtrlHandler((PHANDLER_ROUTINE)myConsoleHandler, TRUE))\r\n    {\r\n         printf( "nThe Control Handler is installed.n" );\r\n         printf( "n -- Now try pressing Ctrl+C or closing the console..." );\r\n         while(1)\r\n         {\r\n           //Do Nothing\r\n         }\r\n    }\r\n    else\r\n    {\r\n        printf( "nERROR: Could not set control handler");\r\n        return 1;\r\n    }\r\n    return 0;\r\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>l,a:()=>a});var r=t(67294);const o={},s=r.createContext(o);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);