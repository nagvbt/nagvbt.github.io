"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["93810"],{26744:function(n,e,s){s.r(e),s.d(e,{frontMatter:()=>i,default:()=>h,toc:()=>d,metadata:()=>r,assets:()=>c,contentTitle:()=>t});var r=JSON.parse('{"id":"Languages/Inheritance","title":"Inheritance","description":"Definition :","source":"@site/docs/Languages/Inheritance.md","sourceDirName":"Languages","slug":"/Languages/Inheritance","permalink":"/docs/Languages/Inheritance","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"Abstraction","permalink":"/docs/Languages/Abstraction"},"next":{"title":"Polymorphism","permalink":"/docs/Languages/Polymorphism"}}'),a=s(85893),l=s(50065);let i={sidebar_position:15},t="Inheritance",c={},d=[{value:"Definition :",id:"definition-",level:3},{value:"<strong>C++</strong>",id:"c",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"<strong>C#</strong>",id:"c-1",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"<strong>Java</strong>",id:"java",level:2},{value:"Syntax",id:"syntax-2",level:3},{value:"Example",id:"example-2",level:3},{value:"<strong>Python</strong>",id:"python",level:2},{value:"Syntax",id:"syntax-3",level:3},{value:"Example",id:"example-3",level:3},{value:"<strong>JavaScript</strong>",id:"javascript",level:2},{value:"Syntax",id:"syntax-4",level:3},{value:"Example",id:"example-4",level:3},{value:"<strong>TypeScript</strong>",id:"typescript",level:2},{value:"Syntax",id:"syntax-5",level:3},{value:"Example",id:"example-5",level:3}];function o(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,l.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"inheritance",children:"Inheritance"})}),"\n",(0,a.jsx)(e.h3,{id:"definition-",children:"Definition :"}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Inheritance"})," is an object-oriented programming concept where a ",(0,a.jsx)(e.strong,{children:"child class (subclass)"})," acquires the properties and behaviors (fields and methods) of a ",(0,a.jsx)(e.strong,{children:"parent class (superclass)"}),".\r\nIt promotes ",(0,a.jsx)(e.strong,{children:"code reusability"}),", ",(0,a.jsx)(e.strong,{children:"hierarchical classification"}),", and enables ",(0,a.jsx)(e.strong,{children:"polymorphism"}),"."]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"c",children:(0,a.jsx)(e.strong,{children:"C++"})}),"\n",(0,a.jsx)(e.h3,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"class BaseClass {\r\npublic:\r\n    void baseFunction() {\r\n        // code\r\n    }\r\n};\r\n\r\nclass DerivedClass : access_specifier BaseClass {\r\n    // access_specifier can be public, protected, or private\r\n};\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\r\nusing namespace std;\r\n\r\nclass Animal {\r\npublic:\r\n    void sound() {\r\n        cout << "Animal makes a sound" << endl;\r\n    }\r\n};\r\n\r\nclass Dog : public Animal {\r\npublic:\r\n    void bark() {\r\n        cout << "Dog barks" << endl;\r\n    }\r\n};\r\n\r\nint main() {\r\n    Dog myDog;\r\n\r\n    myDog.sound();  // Inherited from Animal\r\n    myDog.bark();   // Own method\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,a.jsx)(e.h2,{id:"c-1",children:(0,a.jsx)(e.strong,{children:"C#"})}),"\n",(0,a.jsx)(e.h3,{id:"syntax-1",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"class className {\r\n    public void methodName() {\r\n        // base class method\r\n    }\r\n}\r\n\r\nclass DerivedClass : className {\r\n    // inherits methodName from className\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using System;\r\n\r\nclass Person {\r\n    public string Name = "Alice";\r\n\r\n    public void displayName() {\r\n        Console.WriteLine("Name: " + Name);\r\n    }\r\n}\r\n\r\nclass Student : Person {\r\n    public void showStudent() {\r\n        displayName();  // inherited method\r\n    }\r\n}\r\n\r\nclass Program {\r\n    static void Main() {\r\n        Student s = new Student();\r\n        s.showStudent();\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"java",children:(0,a.jsx)(e.strong,{children:"Java"})}),"\n",(0,a.jsx)(e.h3,{id:"syntax-2",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"class className {\r\n    public void methodName() {\r\n        // base class method\r\n    }\r\n}\r\n\r\nclass DerivedClass extends className {\r\n    // inherits methodName from className\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Person {\r\n    public String name = "Alice";\r\n\r\n    public void displayName() {\r\n        System.out.println("Name: " + name);\r\n    }\r\n}\r\n\r\nclass Student extends Person {\r\n    public void showStudent() {\r\n        displayName();  // inherited method\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Student s = new Student();\r\n        s.showStudent();\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"python",children:(0,a.jsx)(e.strong,{children:"Python"})}),"\n",(0,a.jsx)(e.h3,{id:"syntax-3",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"class className:\r\n    def methodName(self):\r\n        # base class method\r\n        pass\r\n\r\nclass DerivedClass(className):\r\n    # inherits methodName from className\r\n    pass\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class Person:\r\n    def __init__(self):\r\n        self.name = "Alice"\r\n\r\n    def display_name(self):\r\n        print("Name:", self.name)\r\n\r\nclass Student(Person):\r\n    def show_student(self):\r\n        self.display_name()  # inherited method\r\n\r\ns = Student()\r\ns.show_student()\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"javascript",children:(0,a.jsx)(e.strong,{children:"JavaScript"})}),"\n",(0,a.jsx)(e.h3,{id:"syntax-4",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"class className {\r\n    methodName() {\r\n        // base class method\r\n    }\r\n}\r\n\r\nclass DerivedClass extends className {\r\n    // inherits methodName from className\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-4",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'class Person {\r\n    constructor() {\r\n        this.name = "Alice";\r\n    }\r\n\r\n    displayName() {\r\n        console.log("Name:", this.name);\r\n    }\r\n}\r\n\r\nclass Student extends Person {\r\n    showStudent() {\r\n        this.displayName();  // inherited method\r\n    }\r\n}\r\n\r\nconst s = new Student();\r\ns.showStudent();\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"typescript",children:(0,a.jsx)(e.strong,{children:"TypeScript"})}),"\n",(0,a.jsx)(e.h3,{id:"syntax-5",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"class BaseClass {\r\n    baseFunction(): void {\r\n        // code\r\n    }\r\n}\r\n\r\nclass DerivedClass extends BaseClass {\r\n    // Derived class can access baseFunction based on its visibility\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-5",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'class Animal {\r\n    sound(): void {\r\n        console.log("Animal makes a sound");\r\n    }\r\n}\r\n\r\nclass Dog extends Animal {\r\n    bark(): void {\r\n        console.log("Dog barks");\r\n    }\r\n}\r\n\r\nconst myDog = new Dog();\r\n\r\nmyDog.sound();  // Inherited from Animal\r\nmyDog.bark();   // Own method\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"#inheritance",children:"Back to top"})})]})}function h(n={}){let{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(o,{...n})}):o(n)}},50065:function(n,e,s){s.d(e,{Z:()=>t,a:()=>i});var r=s(67294);let a={},l=r.createContext(a);function i(n){let e=r.useContext(l);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(l.Provider,{value:e},n.children)}}}]);