"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["6946"],{58161:function(e,n,s){s.r(n),s.d(n,{frontMatter:()=>a,default:()=>h,toc:()=>o,metadata:()=>r,assets:()=>d,contentTitle:()=>l});var r=JSON.parse('{"id":"articles/Languages/Methods","title":"Methods and Overloading","description":"Table of Contents","source":"@site/docs/articles/Languages/Methods.md","sourceDirName":"articles/Languages","slug":"/articles/Languages/Methods","permalink":"/docs/articles/Languages/Methods","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"Articles","previous":{"title":"Arrays","permalink":"/docs/articles/Languages/Arrays"},"next":{"title":"Functions","permalink":"/docs/articles/Languages/Functions"}}'),t=s(85893),i=s(50065);let a={sidebar_position:8},l="Methods and Overloading",d={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"<strong>Methods</strong>",id:"methods",level:2},{value:"<strong>Definition (in simple words):</strong>",id:"definition-in-simple-words",level:3},{value:"<strong>C#</strong>",id:"c",level:2},{value:"<strong>Syntax:</strong>",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"<strong>Java</strong>",id:"java",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"<strong>Python</strong>",id:"python",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-2",level:3},{value:"Example",id:"example-2",level:3},{value:"<strong>JavaScript</strong>",id:"javascript",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-3",level:3},{value:"Example",id:"example-3",level:3},{value:"<strong>C++</strong>",id:"c-1",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-4",level:3},{value:"Example",id:"example-4",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Summary Table",id:"summary-table",level:3},{value:"<strong>Definition (in simple words):</strong>",id:"definition-in-simple-words-1",level:3},{value:"<strong>C#</strong>",id:"c-2",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-5",level:3},{value:"Example",id:"example-5",level:3},{value:"<strong>Java</strong>",id:"java-1",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-6",level:3},{value:"Example",id:"example-6",level:3},{value:"<strong>Python</strong>",id:"python-1",level:2},{value:"<strong>Example using default and variable arguments:</strong>",id:"example-using-default-and-variable-arguments",level:3},{value:"<strong>JavaScript</strong>",id:"javascript-1",level:2},{value:"Example",id:"example-7",level:3},{value:"<strong>C++</strong>",id:"c-3",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-7",level:3},{value:"Example",id:"example-8",level:3},{value:"TypeScript",id:"typescript-1",level:2},{value:"Summary Table",id:"summary-table-1",level:3}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"methods-and-overloading",children:"Methods and Overloading"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"No."}),(0,t.jsx)(n.th,{children:"Topic"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"12"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#methods",children:"Methods"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"13"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#method-overloading",children:"Method Overloading"})})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:(0,t.jsx)(n.strong,{children:"Methods"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"definition-in-simple-words",children:(0,t.jsx)(n.strong,{children:"Definition (in simple words):"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"method"}),' (or function) is a block of code that performs a specific task. Instead of writing the\nsame code again and again, you write it once as a method and "call" it when needed.']}),"\n",(0,t.jsx)(n.p,{children:"Methods can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Take ",(0,t.jsx)(n.strong,{children:"inputs (parameters)"})]}),"\n",(0,t.jsxs)(n.li,{children:["Return ",(0,t.jsx)(n.strong,{children:"outputs (values)"})]}),"\n",(0,t.jsx)(n.li,{children:"Or simply perform an action"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c",children:(0,t.jsx)(n.strong,{children:"C#"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"returnType MethodName(parameterType parameterName)\n{\n    // code\n    return value; // if not void\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\n\nclass Program\n{\n    // Method that adds two numbers and returns result\n    static int Add(int a, int b)\n    {\n        return a + b;\n    }\n\n    static void Main()\n    {\n        int result = Add(5, 3);\n        Console.WriteLine("Sum: " + result);  // Output: Sum: 8\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"java",children:(0,t.jsx)(n.strong,{children:"Java"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-1",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"returnType methodName(parameterType parameterName) {\n    // code\n    return value;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Main {\n    // Method to multiply two numbers\n    static int multiply(int x, int y) {\n        return x * y;\n    }\n\n    public static void main(String[] args) {\n        int result = multiply(4, 5);\n        System.out.println("Product: " + result);  // Output: Product: 20\n    }\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"python",children:(0,t.jsx)(n.strong,{children:"Python"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-2",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def function_name(parameter1, parameter2):\n    # code\n    return value\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Function to divide two numbers\ndef divide(a, b):\n    return a / b\n\nresult = divide(10, 2)\nprint("Result:", result)  # Output: Result: 5.0\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"javascript",children:(0,t.jsx)(n.strong,{children:"JavaScript"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-3",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function functionName(parameter1, parameter2) {\n    // code\n    return value;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Function to subtract two numbers\nfunction subtract(x, y) {\n    return x - y;\n}\n\nlet result = subtract(10, 4);\nconsole.log("Difference:", result);  // Output: Difference: 6\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c-1",children:(0,t.jsx)(n.strong,{children:"C++"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-4",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"returnType MethodName(parameterType parameterName) {\n    // code\n    return value; // if not void\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\nusing namespace std;\n\n// Function that adds two numbers and returns the result\nint Add(int a, int b) {\n    return a + b;\n}\n\nint main() {\n    int result = Add(5, 3);\n    cout << "Sum: " << result << endl;  // Output: Sum: 8\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Definition:"})," Functions defined inside a class."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'class Car {\n  startEngine(): void {\n    console.log("Engine started");\n  }\n}\n\nconst myCar = new Car();\nmyCar.startEngine();\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"summary-table",children:"Summary Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Language"}),(0,t.jsx)(n.th,{children:"Define Method"}),(0,t.jsx)(n.th,{children:"Call Method"}),(0,t.jsx)(n.th,{children:"Return Value"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"C#"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"int Add(int a, int b)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Add(5, 3)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"return a + b;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Java"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"int multiply(int x, int y)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"multiply(4, 5)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"return x * y;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Python"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"def divide(a, b)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"divide(10, 2)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"return a / b"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"JavaScript"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"function subtract(x, y)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"subtract(10, 4)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"return x - y;"})})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"#table-of-contents",children:"Back to Top"})}),"\n",(0,t.jsx)(n.h1,{id:"method-overloading",children:(0,t.jsx)(n.strong,{children:"Method Overloading"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"definition-in-simple-words-1",children:(0,t.jsx)(n.strong,{children:"Definition (in simple words):"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Method Overloading"})," means having ",(0,t.jsx)(n.strong,{children:"multiple methods with the same name"})," but ",(0,t.jsx)(n.strong,{children:"different parameters"}),"\n(number or type) in the ",(0,t.jsx)(n.strong,{children:"same class"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"It allows methods to perform similar tasks in different ways depending on the arguments passed."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note: Not all languages support method overloading natively (e.g., Python and JavaScript simulate\nit differently)."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c-2",children:(0,t.jsx)(n.strong,{children:"C#"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-5",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"class Example {\n    void Show() { ... }\n    void Show(string name) { ... }\n    void Show(int number, string name) { ... }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-5",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'class Program {\n    static void Show() {\n        Console.WriteLine("No parameters");\n    }\n\n    static void Show(string name) {\n        Console.WriteLine("Name: " + name);\n    }\n\n    static void Show(int age, string name) {\n        Console.WriteLine("Name: " + name + ", Age: " + age);\n    }\n\n    static void Main() {\n        Show();                      // Output: No parameters\n        Show("Alice");               // Output: Name: Alice\n        Show(25, "Bob");             // Output: Name: Bob, Age: 25\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Supported?"})," Yes"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"java-1",children:(0,t.jsx)(n.strong,{children:"Java"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-6",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Example {\n    void display() { ... }\n    void display(String name) { ... }\n    void display(int age, String name) { ... }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-6",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Main {\n    static void display() {\n        System.out.println("No parameters");\n    }\n\n    static void display(String name) {\n        System.out.println("Name: " + name);\n    }\n\n    static void display(int age, String name) {\n        System.out.println("Name: " + name + ", Age: " + age);\n    }\n\n    public static void main(String[] args) {\n        display();                         // Output: No parameters\n        display("Alice");                  // Output: Name: Alice\n        display(30, "Bob");                // Output: Name: Bob, Age: 30\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Supported?"})," Yes"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"python-1",children:(0,t.jsx)(n.strong,{children:"Python"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"No native method overloading"}),", but it can be ",(0,t.jsx)(n.strong,{children:"simulated"})," using default arguments or variable\narguments (",(0,t.jsx)(n.code,{children:"*args"}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"example-using-default-and-variable-arguments",children:(0,t.jsx)(n.strong,{children:"Example using default and variable arguments:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def greet(name=None, age=None):\n    if name and age:\n        print(f"Name: {name}, Age: {age}")\n    elif name:\n        print(f"Name: {name}")\n    else:\n        print("Hello!")\n\ngreet()                     # Output: Hello!\ngreet("Alice")              # Output: Name: Alice\ngreet("Bob", 25)            # Output: Name: Bob, Age: 25\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Supported?"}),"  Not directly,  Yes via ",(0,t.jsx)(n.strong,{children:"workarounds"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"javascript-1",children:(0,t.jsx)(n.strong,{children:"JavaScript"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"No method overloading"})," like in C#/Java. You simulate it using ",(0,t.jsx)(n.strong,{children:"default parameters"})," or\n",(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"arguments"})," object"]}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"example-7",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'function show(name, age) {\n    if (name && age) {\n        console.log(`Name: ${name}, Age: ${age}`);\n    } else if (name) {\n        console.log(`Name: ${name}`);\n    } else {\n        console.log("No parameters");\n    }\n}\n\nshow();                     // Output: No parameters\nshow("Alice");              // Output: Name: Alice\nshow("Bob", 22);            // Output: Name: Bob, Age: 22\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Supported?"}),"  Not directly,  Yes via ",(0,t.jsx)(n.strong,{children:"flexible parameters"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c-3",children:(0,t.jsx)(n.strong,{children:"C++"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-7",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Example {\npublic:\n    void Show();\n    void Show(string name);\n    void Show(int number, string name);\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-8",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\n#include <string>\nusing namespace std;\n\nclass Program {\npublic:\n    static void Show() {\n        cout << "No parameters" << endl;\n    }\n\n    static void Show(string name) {\n        cout << "Name: " << name << endl;\n    }\n\n    static void Show(int age, string name) {\n        cout << "Name: " << name << ", Age: " << age << endl;\n    }\n};\n\nint main() {\n    Program::Show();                  // Output: No parameters\n    Program::Show("Alice");           // Output: Name: Alice\n    Program::Show(25, "Bob");         // Output: Name: Bob, Age: 25\n    return 0;\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"typescript-1",children:"TypeScript"}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript ",(0,t.jsx)(n.strong,{children:"does not support true method overloading"})," like Java or C++."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Alternative (Function Overloads using signatures):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'function greet(person: string): string;\nfunction greet(persons: string[]): string;\n\nfunction greet(person: any): string {\n  if (typeof person === "string") {\n    return `Hello, ${person}`;\n  } else {\n    return `Hello, ${person.join(" and ")}`;\n  }\n}\n\nconsole.log(greet("Alice"));\nconsole.log(greet(["Alice", "Bob"]));\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"summary-table-1",children:"Summary Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"C#"}),(0,t.jsx)(n.th,{children:"Java"}),(0,t.jsx)(n.th,{children:"Python"}),(0,t.jsx)(n.th,{children:"JavaScript"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Native Overloading"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"No (simulate)"}),(0,t.jsx)(n.td,{children:"No (simulate)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Method Name Reuse"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Workarounds"}),(0,t.jsx)(n.td,{children:"Workarounds"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Technique (if no native)"}),(0,t.jsx)(n.td,{children:"\u2014"}),(0,t.jsx)(n.td,{children:"\u2014"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"*args"}),", ",(0,t.jsx)(n.code,{children:"if"})]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"arguments"}),", ",(0,t.jsx)(n.code,{children:"if"})]})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"#table-of-contents",children:"Back to Top"})})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,n,s){s.d(n,{Z:()=>l,a:()=>a});var r=s(67294);let t={},i=r.createContext(t);function a(e){let n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);