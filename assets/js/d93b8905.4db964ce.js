"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["13089"],{16095:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>a,default:()=>h,toc:()=>d,metadata:()=>s,assets:()=>o,contentTitle:()=>l});var s=JSON.parse('{"id":"UIFrameworks/ArrayMethods","title":"Array Methods","description":"React","source":"@site/docs/UIFrameworks/ArrayMethods.md","sourceDirName":"UIFrameworks","slug":"/UIFrameworks/ArrayMethods","permalink":"/docs/UIFrameworks/ArrayMethods","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"ES6 Variables","permalink":"/docs/UIFrameworks/Variables"},"next":{"title":"Destructuring","permalink":"/docs/UIFrameworks/Destructuring"}}'),t=n(85893),i=n(50065);let a={sidebar_position:5},l="Array Methods",o={},d=[{value:"<strong>React</strong>",id:"react",level:2},{value:"Definition of React Array Methods",id:"definition-of-react-array-methods",level:3},{value:"Syntax of Array Methods in React",id:"syntax-of-array-methods-in-react",level:3},{value:"Example of Array Methods in React",id:"example-of-array-methods-in-react",level:3},{value:"Example Explanation",id:"example-explanation",level:3},{value:"<strong>Svelte</strong>",id:"svelte",level:2},{value:"Definition of Svelte Array Methods",id:"definition-of-svelte-array-methods",level:3},{value:"Syntax of Array Methods in Svelte",id:"syntax-of-array-methods-in-svelte",level:3},{value:"Example of Array Methods in Svelte",id:"example-of-array-methods-in-svelte",level:3},{value:"Explanation",id:"explanation",level:3}];function c(e){let r={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"array-methods",children:"Array Methods"})}),"\n",(0,t.jsx)(r.h2,{id:"react",children:(0,t.jsx)(r.strong,{children:"React"})}),"\n",(0,t.jsx)(r.h3,{id:"definition-of-react-array-methods",children:"Definition of React Array Methods"}),"\n",(0,t.jsxs)(r.p,{children:["ES6 introduced powerful and clean ",(0,t.jsx)(r.strong,{children:"array methods"})," like:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"map()"})," \u2013 Transform each item in an array"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"filter()"})," \u2013 Keep items that match a condition"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"find()"})," \u2013 Get the first item that matches"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"forEach()"})," \u2013 Loop through items (no return)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"reduce()"})," \u2013 Combine all values into one"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"These are commonly used in React for rendering lists, filtering data, etc."}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"syntax-of-array-methods-in-react",children:"Syntax of Array Methods in React"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const numbers: number[] = [1, 2, 3, 4, 5];\r\n\r\n// map: double each number\r\nconst doubled = numbers.map((num) => num * 2); // [2, 4, 6, 8, 10]\r\n\r\n// filter: keep even numbers\r\nconst evens = numbers.filter((num) => num % 2 === 0); // [2, 4]\r\n\r\n// find: find first number greater than 3\r\nconst greaterThanThree = numbers.find((num) => num > 3); // 4\r\n\r\n// forEach: log each number\r\nnumbers.forEach((num) => console.log(num)); // Logs 1 to 5\r\n\r\n// reduce: sum of all numbers\r\nconst total = numbers.reduce((sum, num) => sum + num, 0); // 15\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"example-of-array-methods-in-react",children:"Example of Array Methods in React"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-tsx",children:"// File: UserList.tsx\r\nimport React from 'react';\r\n\r\n// Define the user type\r\ntype User = {\r\n  id: number;\r\n  name: string;\r\n  active: boolean;\r\n};\r\n\r\n// Sample user data\r\nconst users: User[] = [\r\n  { id: 1, name: 'Alice', active: true },\r\n  { id: 2, name: 'Bob', active: false },\r\n  { id: 3, name: 'Charlie', active: true },\r\n];\r\n\r\nconst UserList = () => {\r\n  // Use filter to get only active users\r\n  const activeUsers = users.filter((user) => user.active);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Active Users</h2>\r\n\r\n      {/* map to render each user */}\r\n      <ul>\r\n        {activeUsers.map((user) => (\r\n          <li key={user.id}>{user.name}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"example-explanation",children:"Example Explanation"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"users"})," is an array of user objects."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"filter()"})," creates a new array with only ",(0,t.jsx)(r.code,{children:"active: true"})," users."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"map()"})," is used to render the filtered users in a list."]}),"\n",(0,t.jsxs)(r.li,{children:["TypeScript ensures each user has ",(0,t.jsx)(r.code,{children:"id"}),", ",(0,t.jsx)(r.code,{children:"name"}),", and ",(0,t.jsx)(r.code,{children:"active"}),"."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h2,{id:"svelte",children:(0,t.jsx)(r.strong,{children:"Svelte"})}),"\n",(0,t.jsx)(r.h3,{id:"definition-of-svelte-array-methods",children:"Definition of Svelte Array Methods"}),"\n",(0,t.jsxs)(r.p,{children:["Modern JavaScript array methods like ",(0,t.jsx)(r.code,{children:"map()"}),", ",(0,t.jsx)(r.code,{children:"filter()"}),", ",(0,t.jsx)(r.code,{children:"find()"}),", etc. work ",(0,t.jsx)(r.strong,{children:"natively in Svelte"}),"."]}),"\n",(0,t.jsxs)(r.blockquote,{children:["\n",(0,t.jsxs)(r.p,{children:["You can directly use them inside the ",(0,t.jsx)(r.code,{children:"<script>"})," tag and render results in markup."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"syntax-of-array-methods-in-svelte",children:"Syntax of Array Methods in Svelte"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:"const numbers: number[] = [1, 2, 3, 4, 5];\r\n\r\nconst doubled = numbers.map((n) => n * 2);       // [2, 4, 6, 8, 10]\r\nconst evens = numbers.filter((n) => n % 2 === 0); // [2, 4]\r\nconst firstBig = numbers.find((n) => n > 3);       // 4\r\nnumbers.forEach((n) => console.log(n));           // logs 1 to 5\r\nconst total = numbers.reduce((sum, n) => sum + n, 0); // 15\n"})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"example-of-array-methods-in-svelte",children:"Example of Array Methods in Svelte"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-svelte",children:'\x3c!-- File: UserList.svelte --\x3e\r\n<script lang="ts">\r\n  // Define user type\r\n  type User = {\r\n    id: number;\r\n    name: string;\r\n    active: boolean;\r\n  };\r\n\r\n  // Sample data\r\n  const users: User[] = [\r\n    { id: 1, name: "Alice", active: true },\r\n    { id: 2, name: "Bob", active: false },\r\n    { id: 3, name: "Charlie", active: true }\r\n  ];\r\n\r\n  // Use filter + map\r\n  const activeUsers = users.filter(user => user.active);\r\n<\/script>\r\n\r\n\x3c!-- UI --\x3e\r\n<h2>Active Users</h2>\r\n<ul>\r\n  {#each activeUsers as user (user.id)}\r\n    <li>{user.name}</li>\r\n  {/each}\r\n</ul>\n'})}),"\n",(0,t.jsx)(r.hr,{}),"\n",(0,t.jsx)(r.h3,{id:"explanation",children:"Explanation"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"users"})," is an array of user objects."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"filter()"})," creates a new array of active users."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"#each"})," is Svelte\u2019s version of ",(0,t.jsx)(r.code,{children:"map()"})," for rendering lists."]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"(user.id)"})," adds a unique key to optimize rendering."]}),"\n"]}),"\n",(0,t.jsx)(r.hr,{})]})}function h(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,r,n){n.d(r,{Z:()=>l,a:()=>a});var s=n(67294);let t={},i=s.createContext(t);function a(e){let r=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);