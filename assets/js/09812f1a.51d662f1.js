"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[9197],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,h=c["".concat(l,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},52368:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const i={sidebar_position:1},o="STRINGS",s={unversionedId:"articles/Python/Basics",id:"articles/Python/Basics",title:"STRINGS",description:"Title",source:"@site/docs/articles/Python/Basics.md",sourceDirName:"articles/Python",slug:"/articles/Python/Basics",permalink:"/docs/articles/Python/Basics",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Python",permalink:"/docs/category/python"},next:{title:"Lists",permalink:"/docs/articles/Python/Lists"}},l={},p=[{value:"Title",id:"title",level:2},{value:"Upper &amp; Lower",id:"upper--lower",level:2},{value:"Concatenating Strings",id:"concatenating-strings",level:2},{value:"Tabs or Newlines",id:"tabs-or-newlines",level:2},{value:"Stripping Whitespace",id:"stripping-whitespace",level:2},{value:"str conversion",id:"str-conversion",level:2},{value:"Integers",id:"integers",level:2},{value:"Float",id:"float",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"strings"},"STRINGS"),(0,a.kt)("h2",{id:"title"},"Title"),(0,a.kt)("p",null,"title() displays each word in titlecase, where each word begins with a\ncapital letter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'name = "ram mohan"\nprint(name.title()); #output >>> Ram Mohan\n\n')),(0,a.kt)("h2",{id:"upper--lower"},"Upper & Lower"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'name2 = "Sam Prabu"\nprint(name2.upper()) #output >>> SAM PRABU\nprint(name2.lower()) #output >>> sam prabu\n')),(0,a.kt)("h2",{id:"concatenating-strings"},"Concatenating Strings"),(0,a.kt)("p",null,"Concatenating strings means combining strings. "),(0,a.kt)("p",null,"Example: To store a surname name and a name in separate variables, and then to combine them."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"surname = 'Thota'\nname = 'Ramudu'\n\nfull_name = surname + ' ' + name\nprint(full_name) #output >>> Thota Ramudu\n")),(0,a.kt)("h2",{id:"tabs-or-newlines"},"Tabs or Newlines"),(0,a.kt)("p",null,"For easy reading of the output we can use Tabs(\\t) or newlines (\\n)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"surname = 'Thota'\nname = 'Ramudu'\n\nfull_name = surname + ' ' + name\nprint(surname+'\\n'+name + '\\n\\t' + full_name)\n\n#output\nThota\nRamudu\n    Thota Ramudu\n")),(0,a.kt)("h2",{id:"stripping-whitespace"},"Stripping Whitespace"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"rstrip(): strip whitespace from the right side"),(0,a.kt)("li",{parentName:"ol"},"lstrip(): strip whitespace from the left side"),(0,a.kt)("li",{parentName:"ol"},"strip(): strip whitespace from both sides")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"country = ' India '\n# strip whitespace from the right side\nprint(country.rstrip())  \n# strip whitespace from the left side\nprint(country.lstrip())\n# strip whitespace from both sides\nprint(country.strip())\n\n#Output\n India\nIndia \nIndia\n")),(0,a.kt)("h2",{id:"str-conversion"},"str conversion"),(0,a.kt)("p",null,"str(): str() function tells Python to represent non-string values as strings."),(0,a.kt)("p",null,"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'age = 43\nmessage = "Happy " + str(age) + "rd Birthday!"\nprint(message)\n\n#output\nHappy 43rd Birthday!\n')),(0,a.kt)("h1",{id:"numbers"},"Numbers"),(0,a.kt)("h2",{id:"integers"},"Integers"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},">>> 2 + 3\n5\n>>> 3 - 2\n1\n>>> 2 * 3\n6\n")),(0,a.kt)("h2",{id:"float"},"Float"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},">>> 0.1 + 0.1\n0.2\n>>> 0.2 + 0.2\n0.4\n>>> 2 * 0.1\n0.2\n")))}m.isMDXComponent=!0}}]);