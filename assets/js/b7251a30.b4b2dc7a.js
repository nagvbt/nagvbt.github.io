"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["19306"],{34064:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>l,default:()=>c,contentTitle:()=>i,assets:()=>g,toc:()=>s,metadata:()=>t});var t=JSON.parse('{"id":"articles/CSharp/Log4netIntegration","title":"Log4net Integration","description":"Logging Using Log4net in ASP.Net","source":"@site/docs/articles/CSharp/Log4netIntegration.md","sourceDirName":"articles/CSharp","slug":"/articles/CSharp/Log4netIntegration","permalink":"/docs/articles/CSharp/Log4netIntegration","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"Articles","previous":{"title":"LINQ","permalink":"/docs/articles/CSharp/Linq"},"next":{"title":"Parameters to Base constructors","permalink":"/docs/articles/CSharp/PassingParameters"}}'),a=r(85893),o=r(50065);let l={},i="Log4net Integration",g={},s=[{value:"Code Files",id:"code-files",level:2},{value:"Web.config",id:"webconfig",level:3},{value:"Class",id:"class",level:2},{value:"DB script",id:"db-script",level:3},{value:"MultiLogger",id:"multilogger",level:2},{value:"References",id:"references",level:3}];function p(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"log4net-integration",children:"Log4net Integration"})}),"\n",(0,a.jsxs)(n.p,{children:["Logging Using Log4net in ASP.Net\r\n",(0,a.jsx)(n.code,{children:"http://logging.apache.org/log4net/download.html"})]}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"Steps"})}),"\n",(0,a.jsxs)(n.p,{children:["Log4net is an Open Source utility used for log/report statements to various kinds of output targets (text file, email, database, event viewer etc.): ",(0,a.jsx)(n.code,{children:"http://logging.apache.org/"}),". It can be a very handy utility for application instrumentation purposes.\r\nConfiguring Log4net"]}),"\n",(0,a.jsx)(n.p,{children:"Step 1: Add a reference of Log4net.dll to the project."}),"\n",(0,a.jsx)(n.p,{children:'Step 2: Add Global.asax to the project, if not already added. In the "Application_Start" event of global.asax, add the following code:\r\nlog4net.Config.XmlConfigurator.Configure();'}),"\n",(0,a.jsx)(n.p,{children:"Step 3: In the web.config file, under Configuration->Configsections, add the following section:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<section name="log4net" type="log4net.Config. Log4NetConfigurationSectionHandler, log4net"/>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Step 4: In web.config, add a new section ",(0,a.jsx)(n.code,{children:"<log4net>"}),". This section will contain all the settings related to the Log4net configuration."]}),"\n",(0,a.jsx)(n.p,{children:'Step 5: In web.config, under "log4net" section, add the required appenders (output target) configuration sections in the following way:'}),"\n",(0,a.jsx)(n.p,{children:"File appender configuration, used for log statements in a text file"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<appender name="LogFileAppender" type="log4net.Appender.FileAppender">\r\n<param name="File" value="Logs\\\\Log4Net.log"/>\r\n<layout type="log4net.Layout.PatternLayout">\r\n<param name="ConversionPattern" value="%d [%t] %-5p %c %m%n"/>\r\n</layout></appender>\n'})}),"\n",(0,a.jsx)(n.p,{children:"SMTP appender configuration, used for log statements by sending email"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<appender name="SmtpAppender" type="log4net.Appender.SmtpAppender">\r\n<to value="" /><from value="" />\r\n<subject value="" /><smtpHost value="" />\r\n<bufferSize value="512" /><lossy value="true" />\r\n<evaluator type="log4net.Core.LevelEvaluator">\r\n<threshold value="WARN"/></evaluator>\r\n<layout type="log4net.Layout.PatternLayout">\r\n<conversionPattern value="%newline%date [%thread] %-5level\r\n%logger [%property] - %message%newline%newline%newline" />\r\n</layout>\r\n</appender>\n'})}),"\n",(0,a.jsx)(n.p,{children:'Step 6: In the web.config file, under "log4net" section, for each appender, add loggers in the following way:'}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'<logger name="File"><level value="All" />\r\n<appender-ref ref="LogFileAppender" />\r\n</logger>\r\n<logger name="EmailLog">\r\n<level value="All" />\r\n<appender-ref ref="SmtpAppender" />\r\n</logger>\n'})}),"\n",(0,a.jsx)(n.p,{children:"Step 7: Now, whenever we want to log any information/error/warning, call the appropriate method in the following manner:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'//for logging to file\r\nlog4net.ILog logger = log4net.LogManager.GetLogger("File");\r\n//for emailing\r\nlog4net.ILog logger = log4net.LogManager.GetLogger("EmailLog");\r\nlogger.Info("Starting page load");\n'})}),"\n",(0,a.jsx)(n.h2,{id:"code-files",children:"Code Files"}),"\n",(0,a.jsx)(n.h3,{id:"webconfig",children:"Web.config"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0"?>\r\n<configuration>\r\n      < configSections>\r\n         < section name ="roleService " type=" System.Web.Configuration.ScriptingRoleServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission= "false" allowDefinition=" MachineToApplication"/>\r\n         </ sectionGroup>\r\n                  </ sectionGroup>\r\n            </ sectionGroup>\r\n    \x3c!-- Author: log--\x3e\r\n    < section name ="log4net " type=" log4net.Config.Log4NetConfigurationSectionHandler, log4net "/>\r\n  </configSections>\r\n  \x3c!--Author: File--\x3e\r\n  <log4net debug=" true">\r\n    < appender name ="LogFileAppender " type=" log4net.Appender.FileAppender">\r\n      \x3c!-- <param name="File" value="Logs\\\\Log4Net.log"/> --\x3e\r\n      < param name ="File " value ="C:\\\\Logs\\\\TestLog.log "/>\r\n      < layout type ="log4net.Layout.PatternLayout ">\r\n        < param name ="ConversionPattern " value ="%d [%t] %-5p %c %m%n "/>\r\n      </ layout>\r\n    </ appender>\r\n    \x3c!-- email--\x3e\r\n    < appender name ="SmtpAppender " type ="log4net.Appender.SmtpAppender ">\r\n      < to value ="" />\r\n      < from value ="" />\r\n      < subject value ="" />\r\n      < smtpHost value ="" />\r\n      < bufferSize value ="512 " />\r\n      < lossy value ="true " />\r\n      < evaluator type ="log4net.Core.LevelEvaluator ">\r\n        < threshold value ="WARN "/>\r\n      </ evaluator>\r\n      < layout type ="log4net.Layout.PatternLayout ">\r\n        < conversionPattern value ="%newline%date [%thread] %-5level\r\n          %logger [%property] - %message%newline%newline%newline " />\r\n      </ layout>\r\n    </ appender>\r\n\r\n    \x3c!-- Event Viewer--\x3e\r\n    < appender name ="EventLogAppender " type=" log4net.Appender.EventLogAppender">\r\n      < param name ="LogName " value ="MyLog " />\r\n      < param name ="ApplicationName " value ="MyApp " />\r\n      < layout type ="log4net.Layout.PatternLayout ">\r\n        < conversionPattern value ="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline" />\r\n      </ layout>\r\n    </ appender>\r\n    \x3c!-- SQL Server--\x3e\r\n    < appender name ="AdoNetAppender " type=" log4net.Appender.AdoNetAppender">\r\n      < bufferSize value ="100 " />\r\n      < connectionType value ="System.Data.SqlClient.SqlConnection, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />\r\n      < connectionString value ="Data Source=.;Initial Catalog=Northwind;User Id=sa;Password=123;" />\r\n      < commandText value ="INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />\r\n      < parameter>\r\n        < parameterName value ="@log_date " />\r\n        < dbType value ="DateTime " />\r\n        < layout type ="log4net.Layout.RawTimeStampLayout " />\r\n      </ parameter>\r\n      < parameter>\r\n        < parameterName value ="@thread " />\r\n        < dbType value ="String " />\r\n        < size value ="255 " />\r\n        < layout type ="log4net.Layout.PatternLayout ">\r\n          < conversionPattern value ="%thread " />\r\n        </ layout>\r\n      </ parameter>\r\n      < parameter>\r\n        < parameterName value ="@log_level " />\r\n        < dbType value ="String " />\r\n        < size value ="50 " />\r\n        < layout type ="log4net.Layout.PatternLayout ">\r\n          < conversionPattern value ="%level " />\r\n        </ layout>\r\n      </ parameter>\r\n      < parameter>\r\n        < parameterName value ="@logger " />\r\n        < dbType value ="String " />\r\n        < size value ="255 " />\r\n        < layout type ="log4net.Layout.PatternLayout ">\r\n          < conversionPattern value ="%logger " />\r\n        </ layout>\r\n      </ parameter>\r\n      < parameter>\r\n        < parameterName value ="@message " />\r\n        < dbType value ="String " />\r\n        < size value ="4000 " />\r\n        < layout type ="log4net.Layout.PatternLayout ">\r\n          < conversionPattern value ="%message " />\r\n        </ layout>\r\n      </ parameter>\r\n      < parameter>\r\n        < parameterName value ="@exception " />\r\n        < dbType value ="String " />\r\n        < size value ="2000 " />\r\n        < layout type ="log4net.Layout.ExceptionLayout " />\r\n      </ parameter>\r\n    </ appender>\r\n\r\n\x3c!-- Logger--\x3e\r\n    < logger name ="EmailLog ">\r\n      < level value ="All " />\r\n      < appender-ref ref ="SmtpAppender " />\r\n    </ logger>\r\n    < logger name ="File ">\r\n      < level value ="All " />\r\n      < appender-ref ref ="LogFileAppender " />\r\n    </ logger>\r\n    < logger name ="EventViewer ">\r\n      < level value ="All " />\r\n      < appender-ref ref ="EventLogAppender " />\r\n    </ logger>\r\n    < logger name ="SQLServer ">\r\n      < level value ="All " />\r\n      < appender-ref ref ="AdoNetAppender " />\r\n    </ logger>\r\n  </log4net>\r\n\r\n  <appSettings></appSettings>\r\n\r\n ..........\r\n...............\r\n</configuration>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"class",children:"Class"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'public partial class HierarchicalMenuDemo : System.Web.UI.Page\r\n{\r\n    //for logging to file\r\n    private static readonly ILog log = log4net.LogManager.GetLogger("File" );\r\n    private static readonly ILog evlog = log4net.LogManager.GetLogger("EventViewer" );\r\n    private static readonly ILog sqllog = log4net.LogManager.GetLogger("SQLServer" );\r\n\r\n    protected void Page_Load(object sender, EventArgs e)\r\n    {\r\n         if (!IsPostBack)\r\n            XmlDataSource1.Data = GetMenuData();\r\n         log.Info( "Starting page load");\r\n         log.Debug( "This a test debug message" );\r\n         log.Error( "Page Load failed : ");\r\n         evlog.Info( "Starting page load");\r\n         evlog.Debug( "This a test debug message" );\r\n         evlog.Error( "Page Load failed : ");\r\n         sqllog.Info( "Starting page load");\r\n         sqllog.Debug( "This a test debug message" );\r\n         sqllog.Error( "Page Load failed : ");\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"db-script",children:"DB script"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE [dbo].[Log] (\r\n[Id] [int] IDENTITY (1, 1) NOT NULL,\r\n[Date] [datetime] NOT NULL,\r\n[Thread] [varchar] (255) NOT NULL,\r\n[Level] [varchar] (50) NOT NULL,\r\n[Logger] [varchar] (255) NOT NULL,\r\n[Message] [varchar] (4000) NOT NULL,\r\n[Exception] [varchar] (2000) NULL\r\n)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"multilogger",children:"MultiLogger"}),"\n",(0,a.jsx)(n.p,{children:"How to use log4net - MultiLogger"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:'using System.Configuration;\r\nusing log4net;\r\n/// <summary>\r\n/// Summary description for MultiLogger\r\n/// </summary>\r\npublic class MultiLogger\r\n{\r\n   private enum LOGTYPE\r\n   {\r\n       FILE,\r\n       EVENTVIEWER,\r\n       SQLSERVER,\r\n       ALL\r\n   }\r\n   private enum MSGTYPE\r\n   {\r\n       INFO,\r\n       DEBUG,\r\n       ERROR\r\n   }\r\n   //for logging to file\r\n   private static readonly ILog log = log4net.LogManager.GetLogger("File");\r\n   private static readonly ILog evlog = log4net.LogManager.GetLogger("EventViewer");\r\n   private static readonly ILog sqllog = log4net.LogManager.GetLogger("SQLServer");\r\n   private static bool all = bool.Parse((string)ConfigurationManager.AppSettings["LOGTYPE.ALL"]);\r\n   private static bool file = bool.Parse((string)ConfigurationManager.AppSettings["LOGTYPE.FILE"]);\r\n   private static bool ev = bool.Parse((string)ConfigurationManager.AppSettings["LOGTYPE.EVENTVIEWER"]);\r\n   private static bool sql = bool.Parse((string)ConfigurationManager.AppSettings["LOGTYPE.SQLSERVER"]);\r\n   public static void Info(string msg)\r\n   {\r\n\r\n       if (all)\r\n       {\r\n           Writer(msg, LOGTYPE.ALL, MSGTYPE.INFO);\r\n       }\r\n       else\r\n       {\r\n           if (sql)\r\n           {\r\n               Writer(msg, LOGTYPE.SQLSERVER, MSGTYPE.INFO);\r\n           }\r\n           if (file)\r\n           {\r\n               Writer(msg, LOGTYPE.FILE, MSGTYPE.INFO);\r\n           }\r\n           if (ev)\r\n           {\r\n               Writer(msg, LOGTYPE.EVENTVIEWER, MSGTYPE.INFO);\r\n           }\r\n       }\r\n   }\r\n   public static void Debug(string msg)\r\n   {\r\n       if (all)\r\n       {\r\n           Writer(msg, LOGTYPE.ALL, MSGTYPE.DEBUG);\r\n       }\r\n       else\r\n       {\r\n           if (sql)\r\n           {\r\n               Writer(msg, LOGTYPE.SQLSERVER, MSGTYPE.DEBUG);\r\n           }\r\n           if (file)\r\n           {\r\n               Writer(msg, LOGTYPE.FILE, MSGTYPE.DEBUG);\r\n           }\r\n           if (ev)\r\n           {\r\n               Writer(msg, LOGTYPE.EVENTVIEWER, MSGTYPE.DEBUG);\r\n           }\r\n       }\r\n   }\r\n   public static void Error(string msg)\r\n   {\r\n       if (all)\r\n       {\r\n           Writer(msg, LOGTYPE.ALL, MSGTYPE.ERROR);\r\n       }\r\n       else\r\n       {\r\n           if (sql)\r\n           {\r\n               Writer(msg, LOGTYPE.SQLSERVER, MSGTYPE.ERROR);\r\n           }\r\n           if (file)\r\n           {\r\n               Writer(msg, LOGTYPE.FILE, MSGTYPE.ERROR);\r\n           }\r\n           if (ev)\r\n           {\r\n               Writer(msg, LOGTYPE.EVENTVIEWER, MSGTYPE.ERROR);\r\n           }\r\n       }\r\n   }\r\n   private static void Writer(string msg, LOGTYPE logtype, MSGTYPE msgtype )\r\n   {\r\n       switch (logtype)\r\n       {\r\n           case LOGTYPE.FILE:\r\n                LogInFile(msg, msgtype);\r\n               break;\r\n           case LOGTYPE.EVENTVIEWER:\r\n                LogInEvw(msg, msgtype);\r\n               break;\r\n           case LOGTYPE.SQLSERVER:\r\n                LogInSql(msg, msgtype);\r\n               break;\r\n           case LOGTYPE.ALL:\r\n               {\r\n                   LogInFile(msg, msgtype);\r\n                   LogInEvw(msg, msgtype);\r\n                   LogInSql(msg, msgtype);\r\n               }\r\n               break;\r\n           default:\r\n               break;\r\n       }\r\n   }\r\n   private static void LogInFile(string msg, MSGTYPE msgtype)\r\n   {\r\n       switch (msgtype)\r\n       {\r\n           case MSGTYPE.INFO:\r\n               log.Info(msg);\r\n               break;\r\n           case MSGTYPE.DEBUG:\r\n               log.Debug(msg);\r\n               break;\r\n           case MSGTYPE.ERROR:\r\n               log.Error(msg);\r\n               break;\r\n       }\r\n   }\r\n   private static void LogInSql(string msg, MSGTYPE msgtype)\r\n   {\r\n       switch (msgtype)\r\n       {\r\n           case MSGTYPE.INFO:\r\n               sqllog.Info(msg);\r\n               break;\r\n           case MSGTYPE.DEBUG:\r\n               sqllog.Debug(msg);\r\n               break;\r\n           case MSGTYPE.ERROR:\r\n               sqllog.Error(msg);\r\n               break;\r\n       }\r\n   }\r\n   private static void LogInEvw(string msg, MSGTYPE msgtype)\r\n   {\r\n       switch (msgtype)\r\n       {\r\n           case MSGTYPE.INFO:\r\n               evlog.Info(msg);\r\n               break;\r\n           case MSGTYPE.DEBUG:\r\n               evlog.Debug(msg);\r\n               break;\r\n           case MSGTYPE.ERROR:\r\n               evlog.Error(msg);\r\n               break;\r\n       }\r\n   }\r\n}\r\n/*\r\n//HOW TO USE\r\nMultiLogger.Info("info msg");\r\nMultiLogger.Debug("Debug msg");\r\nMultiLogger.Error("Error m");sg\r\n*/\n'})}),"\n",(0,a.jsx)(n.h3,{id:"references",children:"References"}),"\n",(0,a.jsx)(n.p,{children:"How to use log4net for ASP"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"http://www.codeproject.com/KB/aspnet/log4net.aspx"})}),"\n",(0,a.jsx)(n.p,{children:"Configure Log4Net in ASP.NET 2.0"}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"http://www.codeproject.com/KB/aspnet/Log4Net_Configuration.aspx"})}),"\n",(0,a.jsx)(n.p,{children:(0,a.jsx)(n.code,{children:"http://log4net.sourceforge.net/release/1.2.0.30316/doc/manual/faq.html"})}),"\n",(0,a.jsxs)(n.p,{children:["Eventviewer\r\n",(0,a.jsx)(n.code,{children:"http://geekswithblogs.net/TimH/archive/2006/04/13/75063.aspx"})]})]})}function c(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}},50065:function(e,n,r){r.d(n,{Z:()=>i,a:()=>l});var t=r(67294);let a={},o=t.createContext(a);function l(e){let n=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);