"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["51675"],{80169:function(e,r,n){n.r(r),n.d(r,{frontMatter:()=>a,default:()=>u,toc:()=>o,metadata:()=>t,assets:()=>l,contentTitle:()=>c});var t=JSON.parse('{"id":"UIFrameworks/Destructuring","title":"Destructuring","description":"REACT","source":"@site/docs/UIFrameworks/Destructuring.md","sourceDirName":"UIFrameworks","slug":"/UIFrameworks/Destructuring","permalink":"/docs/UIFrameworks/Destructuring","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Array Methods","permalink":"/docs/UIFrameworks/ArrayMethods"},"next":{"title":"Spread Operator","permalink":"/docs/UIFrameworks/SpreadOperator"}}'),s=n(85893),i=n(50065);let a={sidebar_position:6},c="Destructuring",l={},o=[{value:"<strong>REACT</strong>",id:"react",level:2},{value:"Definition",id:"definition",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Object Destructuring",id:"object-destructuring",level:3},{value:"Array Destructuring",id:"array-destructuring",level:3},{value:"Example(Functional Component)",id:"examplefunctional-component",level:3},{value:"Example (Destructuring in Parameters)",id:"example-destructuring-in-parameters",level:3},{value:"Example Explanation",id:"example-explanation",level:3},{value:"<strong>SVELTE</strong>",id:"svelte",level:2},{value:"Definition of Destructing in Svelte",id:"definition-of-destructing-in-svelte",level:3},{value:"Syntax: Object &amp; Array Destructuring (Same as JS)",id:"syntax-object--array-destructuring-same-as-js",level:3},{value:"Object Destructuring in Svelte",id:"object-destructuring-in-svelte",level:3},{value:"Array Destructuring in Svelte",id:"array-destructuring-in-svelte",level:3},{value:"Svelte Example: Destructuring Props &amp; State",id:"svelte-example-destructuring-props--state",level:3},{value:"Key Differences from React",id:"key-differences-from-react",level:2},{value:"Summary",id:"summary",level:3}];function d(e){let r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"destructuring",children:"Destructuring"})}),"\n",(0,s.jsx)(r.h2,{id:"react",children:(0,s.jsx)(r.strong,{children:"REACT"})}),"\n",(0,s.jsx)(r.h3,{id:"definition",children:"Definition"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Destructuring"})," is a convenient ES6 feature that lets you extract values from ",(0,s.jsx)(r.strong,{children:"objects"})," or\r\n",(0,s.jsx)(r.strong,{children:"arrays"})," and assign them to variables in a cleaner way."]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(r.h3,{id:"object-destructuring",children:"Object Destructuring"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const user = { name: "Alice", age: 25 };\r\n\r\n// Traditional way\r\nconst name1 = user.name;\r\nconst age1 = user.age;\r\n\r\n// Using destructuring\r\nconst { name, age } = user;\n'})}),"\n",(0,s.jsx)(r.h3,{id:"array-destructuring",children:"Array Destructuring"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"const nums: number[] = [10, 20, 30];\r\n\r\n// Traditional way\r\nconst first = nums[0];\r\nconst second = nums[1];\r\n\r\n// Using destructuring\r\nconst [a, b] = nums;\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"examplefunctional-component",children:"Example(Functional Component)"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"// File: Profile.tsx\r\nimport React from 'react';\r\n\r\n// Props type definition\r\ntype ProfileProps = {\r\n  name: string;\r\n  age: number;\r\n  location: string;\r\n};\r\n\r\nconst Profile = (props).ProfileProps => {\r\n  // Destructuring props inside the component\r\n  const { name, age, location } = props;\r\n\r\n  return (\r\n    <div>\r\n      <h2>User Profile</h2>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n      <p>Location: {location}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"example-destructuring-in-parameters",children:"Example (Destructuring in Parameters)"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-tsx",children:"// Cleaner: destructure directly in function parameters\r\nconst Profile = ({ name, age, location }).ProfileProps => {\r\n  return (\r\n    <div>\r\n      <h2>User Profile</h2>\r\n      <p>Name: {name}</p>\r\n      <p>Age: {age}</p>\r\n      <p>Location: {location}</p>\r\n    </div>\r\n  );\r\n};\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"example-explanation",children:"Example Explanation"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"type ProfileProps"})," defines the props expected by the component."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"{ name, age, location } = props"})," extracts values from ",(0,s.jsx)(r.code,{children:"props"})," directly."]}),"\n",(0,s.jsx)(r.li,{children:"This makes code cleaner, especially when you use many props or array values."}),"\n"]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"svelte",children:(0,s.jsx)(r.strong,{children:"SVELTE"})}),"\n",(0,s.jsx)(r.h3,{id:"definition-of-destructing-in-svelte",children:"Definition of Destructing in Svelte"}),"\n",(0,s.jsxs)(r.p,{children:["Destructuring in Svelte works the ",(0,s.jsx)(r.strong,{children:"same way as in JavaScript/TypeScript"}),", since Svelte compiles to\r\nplain JS.\r\nHowever, ",(0,s.jsx)(r.strong,{children:"props are not passed as a single object"}),", so we don\u2019t destructure ",(0,s.jsx)(r.code,{children:"props"})," like in React."]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"syntax-object--array-destructuring-same-as-js",children:"Syntax: Object & Array Destructuring (Same as JS)"}),"\n",(0,s.jsx)(r.h3,{id:"object-destructuring-in-svelte",children:"Object Destructuring in Svelte"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const user = { name: "Alice", age: 25 };\r\n\r\n// Traditional\r\nconst name1 = user.name;\r\nconst age1 = user.age;\r\n\r\n// Destructured\r\nconst { name, age } = user;\n'})}),"\n",(0,s.jsx)(r.h3,{id:"array-destructuring-in-svelte",children:"Array Destructuring in Svelte"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"const nums = [100, 200, 300];\r\n\r\n// Traditional\r\nconst first = nums[0];\r\nconst second = nums[1];\r\n\r\n// Destructured\r\nconst [x, y] = nums;\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"svelte-example-destructuring-props--state",children:"Svelte Example: Destructuring Props & State"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-svelte",children:'\x3c!-- File: Profile.svelte --\x3e\r\n<script lang="ts">\r\n  // Receiving props individually\r\n  export let name: string;\r\n  export let age: number;\r\n  export let location: string;\r\n\r\n  // You can still use destructuring on custom objects/arrays\r\n  const user = { name, age, location };\r\n  const { name: n, age: a, location: l } = user;\r\n\r\n  const numbers = [10, 20, 30];\r\n  const [first, second] = numbers;\r\n<\/script>\r\n\r\n\x3c!-- Display original props --\x3e\r\n<h2>User Profile</h2>\r\n<p>Name: {name}</p>\r\n<p>Age: {age}</p>\r\n<p>Location: {location}</p>\r\n\r\n\x3c!-- Display destructured variables --\x3e\r\n<h3>Destructured Output</h3>\r\n<p>{n} - {a} - {l}</p>\r\n<p>Numbers: {first}, {second}</p>\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"key-differences-from-react",children:"Key Differences from React"}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Feature"}),(0,s.jsx)(r.th,{children:"React"}),(0,s.jsx)(r.th,{children:"Svelte"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Props Access"}),(0,s.jsxs)(r.td,{children:["Via ",(0,s.jsx)(r.code,{children:"props"})," or ",(0,s.jsx)(r.code,{children:"{...props}"})]}),(0,s.jsxs)(r.td,{children:["Each prop is ",(0,s.jsx)(r.code,{children:"export let"})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Destructuring Props"}),(0,s.jsxs)(r.td,{children:["Destructure ",(0,s.jsx)(r.code,{children:"props"})," object"]}),(0,s.jsxs)(r.td,{children:["Not needed \u2014 use each ",(0,s.jsx)(r.code,{children:"export let"})]})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:"Local Object Destructuring"}),(0,s.jsx)(r.td,{children:"Same in both"}),(0,s.jsx)(r.td,{children:"Same in both"})]})]})]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"summary",children:"Summary"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["Use ",(0,s.jsx)(r.code,{children:"export let"})," in Svelte for props \u2014 no need to destructure ",(0,s.jsx)(r.code,{children:"props"})," like in React."]}),"\n",(0,s.jsxs)(r.li,{children:["Use normal JS destructuring for arrays/objects inside ",(0,s.jsx)(r.code,{children:"<script>"}),"."]}),"\n",(0,s.jsxs)(r.li,{children:["Destructuring makes your Svelte code ",(0,s.jsx)(r.strong,{children:"cleaner and easier to read"})," just like in React."]}),"\n"]})]})}function u(e={}){let{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},50065:function(e,r,n){n.d(r,{Z:()=>c,a:()=>a});var t=n(67294);let s={},i=t.createContext(s);function a(e){let r=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);