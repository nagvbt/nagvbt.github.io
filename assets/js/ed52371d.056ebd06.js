"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[73658],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function g(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=g(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,d=u["".concat(i,".").concat(m)]||u[m]||c[m]||o;return t?a.createElement(d,l(l({ref:n},s),{},{components:t})):a.createElement(d,l({ref:n},s))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var g={};for(var i in n)hasOwnProperty.call(n,i)&&(g[i]=n[i]);g.originalType=e,g[u]="string"==typeof e?e:r,l[1]=g;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},93305:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>g,toc:()=>p});var a=t(87462),r=(t(67294),t(3905));const o={},l="Log4net Integration",g={unversionedId:"articles/Csharp/Log4netIntegration",id:"articles/Csharp/Log4netIntegration",title:"Log4net Integration",description:"Logging Using Log4net in ASP.Net",source:"@site/docs/articles/Csharp/Log4netIntegration.md",sourceDirName:"articles/Csharp",slug:"/articles/Csharp/Log4netIntegration",permalink:"/docs/articles/Csharp/Log4netIntegration",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LINQ",permalink:"/docs/articles/Csharp/Linq"},next:{title:"Parameters to Base constructors",permalink:"/docs/articles/Csharp/PassingParameters"}},i={},p=[{value:"Code Files",id:"code-files",level:2},{value:"Web.config",id:"webconfig",level:3},{value:"Class",id:"class",level:2},{value:"DB script",id:"db-script",level:3},{value:"MultiLogger",id:"multilogger",level:2},{value:"References",id:"references",level:3}],s={toc:p},u="wrapper";function c(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"log4net-integration"},"Log4net Integration"),(0,r.kt)("p",null,"Logging Using Log4net in ASP.Net\n",(0,r.kt)("a",{parentName:"p",href:"http://logging.apache.org/log4net/download.html"},"http://logging.apache.org/log4net/download.html")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Steps")),(0,r.kt)("p",null,"Log4net is an Open Source utility used for log/report statements to various kinds of output targets (text file, email, database, event viewer etc.): ",(0,r.kt)("a",{parentName:"p",href:"http://logging.apache.org/"},"http://logging.apache.org/"),". It can be a very handy utility for application instrumentation purposes.\nConfiguring Log4net"),(0,r.kt)("p",null,"Step 1: Add a reference of Log4net.dll to the project."),(0,r.kt)("p",null,'Step 2: Add Global.asax to the project, if not already added. In the "Application_Start" event of global.asax, add the following code:\nlog4net.Config.XmlConfigurator.Configure();'),(0,r.kt)("p",null,"Step 3: In the web.config file, under Configuration->Configsections, add the following section:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<section name="log4net" type="log4net.Config. Log4NetConfigurationSectionHandler, log4net"/>\n')),(0,r.kt)("p",null,"Step 4: In web.config, add a new section ",(0,r.kt)("inlineCode",{parentName:"p"},"<log4net>"),". This section will contain all the settings related to the Log4net configuration."),(0,r.kt)("p",null,'Step 5: In web.config, under "log4net" section, add the required appenders (output target) configuration sections in the following way:'),(0,r.kt)("p",null,"File appender configuration, used for log statements in a text file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<appender name="LogFileAppender" type="log4net.Appender.FileAppender">\n<param name="File" value="Logs\\\\Log4Net.log"/>\n<layout type="log4net.Layout.PatternLayout">\n<param name="ConversionPattern" value="%d [%t] %-5p %c %m%n"/>\n</layout></appender>\n')),(0,r.kt)("p",null,"SMTP appender configuration, used for log statements by sending email"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<appender name="SmtpAppender" type="log4net.Appender.SmtpAppender">\n<to value="" /><from value="" />\n<subject value="" /><smtpHost value="" />\n<bufferSize value="512" /><lossy value="true" />\n<evaluator type="log4net.Core.LevelEvaluator">\n<threshold value="WARN"/></evaluator>\n<layout type="log4net.Layout.PatternLayout">\n<conversionPattern value="%newline%date [%thread] %-5level\n%logger [%property] - %message%newline%newline%newline" />\n</layout>\n</appender>\n')),(0,r.kt)("p",null,'Step 6: In the web.config file, under "log4net" section, for each appender, add loggers in the following way:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<logger name="File"><level value="All" />\n<appender-ref ref="LogFileAppender" />\n</logger>\n<logger name="EmailLog">\n<level value="All" />\n<appender-ref ref="SmtpAppender" />\n</logger>\n')),(0,r.kt)("p",null,"Step 7: Now, whenever we want to log any information/error/warning, call the appropriate method in the following manner:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'//for logging to file\nlog4net.ILog logger = log4net.LogManager.GetLogger("File");\n//for emailing\nlog4net.ILog logger = log4net.LogManager.GetLogger("EmailLog");\nlogger.Info("Starting page load");\n')),(0,r.kt)("h2",{id:"code-files"},"Code Files"),(0,r.kt)("h3",{id:"webconfig"},"Web.config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0"?>\n<configuration>\n      < configSections>\n         < section name ="roleService " type=" System.Web.Configuration.ScriptingRoleServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission= "false" allowDefinition=" MachineToApplication"/>\n         </ sectionGroup>\n                  </ sectionGroup>\n            </ sectionGroup>\n    \x3c!-- Author: log--\x3e\n    < section name ="log4net " type=" log4net.Config.Log4NetConfigurationSectionHandler, log4net "/>\n  </configSections>\n  \x3c!--Author: File--\x3e\n  <log4net debug=" true">\n    < appender name ="LogFileAppender " type=" log4net.Appender.FileAppender">\n      \x3c!-- <param name="File" value="Logs\\\\Log4Net.log"/> --\x3e\n      < param name ="File " value ="C:\\\\Logs\\\\TestLog.log "/>\n      < layout type ="log4net.Layout.PatternLayout ">\n        < param name ="ConversionPattern " value ="%d [%t] %-5p %c %m%n "/>\n      </ layout>\n    </ appender>\n    \x3c!-- email--\x3e\n    < appender name ="SmtpAppender " type ="log4net.Appender.SmtpAppender ">\n      < to value ="" />\n      < from value ="" />\n      < subject value ="" />\n      < smtpHost value ="" />\n      < bufferSize value ="512 " />\n      < lossy value ="true " />\n      < evaluator type ="log4net.Core.LevelEvaluator ">\n        < threshold value ="WARN "/>\n      </ evaluator>\n      < layout type ="log4net.Layout.PatternLayout ">\n        < conversionPattern value ="%newline%date [%thread] %-5level\n          %logger [%property] - %message%newline%newline%newline " />\n      </ layout>\n    </ appender>\n\n    \x3c!-- Event Viewer--\x3e\n    < appender name ="EventLogAppender " type=" log4net.Appender.EventLogAppender">\n      < param name ="LogName " value ="MyLog " />\n      < param name ="ApplicationName " value ="MyApp " />\n      < layout type ="log4net.Layout.PatternLayout ">\n        < conversionPattern value ="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline" />\n      </ layout>\n    </ appender>\n    \x3c!-- SQL Server--\x3e\n    < appender name ="AdoNetAppender " type=" log4net.Appender.AdoNetAppender">\n      < bufferSize value ="100 " />\n      < connectionType value ="System.Data.SqlClient.SqlConnection, System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />\n      < connectionString value ="Data Source=.;Initial Catalog=Northwind;User Id=sa;Password=123;" />\n      < commandText value ="INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />\n      < parameter>\n        < parameterName value ="@log_date " />\n        < dbType value ="DateTime " />\n        < layout type ="log4net.Layout.RawTimeStampLayout " />\n      </ parameter>\n      < parameter>\n        < parameterName value ="@thread " />\n        < dbType value ="String " />\n        < size value ="255 " />\n        < layout type ="log4net.Layout.PatternLayout ">\n          < conversionPattern value ="%thread " />\n        </ layout>\n      </ parameter>\n      < parameter>\n        < parameterName value ="@log_level " />\n        < dbType value ="String " />\n        < size value ="50 " />\n        < layout type ="log4net.Layout.PatternLayout ">\n          < conversionPattern value ="%level " />\n        </ layout>\n      </ parameter>\n      < parameter>\n        < parameterName value ="@logger " />\n        < dbType value ="String " />\n        < size value ="255 " />\n        < layout type ="log4net.Layout.PatternLayout ">\n          < conversionPattern value ="%logger " />\n        </ layout>\n      </ parameter>\n      < parameter>\n        < parameterName value ="@message " />\n        < dbType value ="String " />\n        < size value ="4000 " />\n        < layout type ="log4net.Layout.PatternLayout ">\n          < conversionPattern value ="%message " />\n        </ layout>\n      </ parameter>\n      < parameter>\n        < parameterName value ="@exception " />\n        < dbType value ="String " />\n        < size value ="2000 " />\n        < layout type ="log4net.Layout.ExceptionLayout " />\n      </ parameter>\n    </ appender>\n\n\x3c!-- Logger--\x3e\n    < logger name ="EmailLog ">\n      < level value ="All " />\n      < appender-ref ref ="SmtpAppender " />\n    </ logger>\n    < logger name ="File ">\n      < level value ="All " />\n      < appender-ref ref ="LogFileAppender " />\n    </ logger>\n    < logger name ="EventViewer ">\n      < level value ="All " />\n      < appender-ref ref ="EventLogAppender " />\n    </ logger>\n    < logger name ="SQLServer ">\n      < level value ="All " />\n      < appender-ref ref ="AdoNetAppender " />\n    </ logger>\n  </log4net>\n\n  <appSettings></appSettings>\n\n ..........\n...............\n</configuration>\n')),(0,r.kt)("h2",{id:"class"},"Class"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'public partial class HierarchicalMenuDemo : System.Web.UI.Page\n{\n    //for logging to file\n    private static readonly ILog log = log4net.LogManager.GetLogger("File" );\n    private static readonly ILog evlog = log4net.LogManager.GetLogger("EventViewer" );\n    private static readonly ILog sqllog = log4net.LogManager.GetLogger("SQLServer" );\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n         if (!IsPostBack)\n            XmlDataSource1.Data = GetMenuData();\n         log.Info( "Starting page load");\n         log.Debug( "This a test debug message" );\n         log.Error( "Page Load failed : ");\n         evlog.Info( "Starting page load");\n         evlog.Debug( "This a test debug message" );\n         evlog.Error( "Page Load failed : ");\n         sqllog.Info( "Starting page load");\n         sqllog.Debug( "This a test debug message" );\n         sqllog.Error( "Page Load failed : ");\n    }\n}\n')),(0,r.kt)("h3",{id:"db-script"},"DB script"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE [dbo].[Log] (\n[Id] [int] IDENTITY (1, 1) NOT NULL,\n[Date] [datetime] NOT NULL,\n[Thread] [varchar] (255) NOT NULL,\n[Level] [varchar] (50) NOT NULL,\n[Logger] [varchar] (255) NOT NULL,\n[Message] [varchar] (4000) NOT NULL,\n[Exception] [varchar] (2000) NULL\n)\n")),(0,r.kt)("h2",{id:"multilogger"},"MultiLogger"),(0,r.kt)("p",null,"How to use log4net - MultiLogger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'using System.Configuration;\nusing log4net;\n/// <summary>\n/// Summary description for MultiLogger\n/// </summary>\npublic class MultiLogger\n{\n   private enum LOGTYPE\n   {\n       FILE,\n       EVENTVIEWER,\n       SQLSERVER,\n       ALL\n   }\n   private enum MSGTYPE\n   {\n       INFO,\n       DEBUG,\n       ERROR\n   }\n   //for logging to file\n   private static readonly ILog log = log4net.LogManager.GetLogger("File");\n   private static readonly ILog evlog = log4net.LogManager.GetLogger("EventViewer");\n   private static readonly ILog sqllog = log4net.LogManager.GetLogger("SQLServer");\n   private static bool all = bool.Parse((string)ConfigurationManager.AppSettings["LOGTYPE.ALL"]);\n   private static bool file = bool.Parse((string)ConfigurationManager.AppSettings["LOGTYPE.FILE"]);\n   private static bool ev = bool.Parse((string)ConfigurationManager.AppSettings["LOGTYPE.EVENTVIEWER"]);\n   private static bool sql = bool.Parse((string)ConfigurationManager.AppSettings["LOGTYPE.SQLSERVER"]);\n   public static void Info(string msg)\n   {\n\n       if (all)\n       {\n           Writer(msg, LOGTYPE.ALL, MSGTYPE.INFO);\n       }\n       else\n       {\n           if (sql)\n           {\n               Writer(msg, LOGTYPE.SQLSERVER, MSGTYPE.INFO);\n           }\n           if (file)\n           {\n               Writer(msg, LOGTYPE.FILE, MSGTYPE.INFO);\n           }\n           if (ev)\n           {\n               Writer(msg, LOGTYPE.EVENTVIEWER, MSGTYPE.INFO);\n           }\n       }\n   }\n   public static void Debug(string msg)\n   {\n       if (all)\n       {\n           Writer(msg, LOGTYPE.ALL, MSGTYPE.DEBUG);\n       }\n       else\n       {\n           if (sql)\n           {\n               Writer(msg, LOGTYPE.SQLSERVER, MSGTYPE.DEBUG);\n           }\n           if (file)\n           {\n               Writer(msg, LOGTYPE.FILE, MSGTYPE.DEBUG);\n           }\n           if (ev)\n           {\n               Writer(msg, LOGTYPE.EVENTVIEWER, MSGTYPE.DEBUG);\n           }\n       }\n   }\n   public static void Error(string msg)\n   {\n       if (all)\n       {\n           Writer(msg, LOGTYPE.ALL, MSGTYPE.ERROR);\n       }\n       else\n       {\n           if (sql)\n           {\n               Writer(msg, LOGTYPE.SQLSERVER, MSGTYPE.ERROR);\n           }\n           if (file)\n           {\n               Writer(msg, LOGTYPE.FILE, MSGTYPE.ERROR);\n           }\n           if (ev)\n           {\n               Writer(msg, LOGTYPE.EVENTVIEWER, MSGTYPE.ERROR);\n           }\n       }\n   }\n   private static void Writer(string msg, LOGTYPE logtype, MSGTYPE msgtype )\n   {\n       switch (logtype)\n       {\n           case LOGTYPE.FILE:\n                LogInFile(msg, msgtype);\n               break;\n           case LOGTYPE.EVENTVIEWER:\n                LogInEvw(msg, msgtype);\n               break;\n           case LOGTYPE.SQLSERVER:\n                LogInSql(msg, msgtype);\n               break;\n           case LOGTYPE.ALL:\n               {\n                   LogInFile(msg, msgtype);\n                   LogInEvw(msg, msgtype);\n                   LogInSql(msg, msgtype);\n               }\n               break;\n           default:\n               break;\n       }\n   }\n   private static void LogInFile(string msg, MSGTYPE msgtype)\n   {\n       switch (msgtype)\n       {\n           case MSGTYPE.INFO:\n               log.Info(msg);\n               break;\n           case MSGTYPE.DEBUG:\n               log.Debug(msg);\n               break;\n           case MSGTYPE.ERROR:\n               log.Error(msg);\n               break;\n       }\n   }\n   private static void LogInSql(string msg, MSGTYPE msgtype)\n   {\n       switch (msgtype)\n       {\n           case MSGTYPE.INFO:\n               sqllog.Info(msg);\n               break;\n           case MSGTYPE.DEBUG:\n               sqllog.Debug(msg);\n               break;\n           case MSGTYPE.ERROR:\n               sqllog.Error(msg);\n               break;\n       }\n   }\n   private static void LogInEvw(string msg, MSGTYPE msgtype)\n   {\n       switch (msgtype)\n       {\n           case MSGTYPE.INFO:\n               evlog.Info(msg);\n               break;\n           case MSGTYPE.DEBUG:\n               evlog.Debug(msg);\n               break;\n           case MSGTYPE.ERROR:\n               evlog.Error(msg);\n               break;\n       }\n   }\n}\n/*\n//HOW TO USE\nMultiLogger.Info("info msg");\nMultiLogger.Debug("Debug msg");\nMultiLogger.Error("Error m");sg\n*/\n')),(0,r.kt)("h3",{id:"references"},"References"),(0,r.kt)("p",null,"How to use log4net for ASP"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.codeproject.com/KB/aspnet/log4net.aspx"},"http://www.codeproject.com/KB/aspnet/log4net.aspx")),(0,r.kt)("p",null,"Configure Log4Net in ASP.NET 2.0"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.codeproject.com/KB/aspnet/Log4Net_Configuration.aspx"},"http://www.codeproject.com/KB/aspnet/Log4Net_Configuration.aspx")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://log4net.sourceforge.net/release/1.2.0.30316/doc/manual/faq.html"},"http://log4net.sourceforge.net/release/1.2.0.30316/doc/manual/faq.html")),(0,r.kt)("p",null,"Eventviewer\n",(0,r.kt)("a",{parentName:"p",href:"http://geekswithblogs.net/TimH/archive/2006/04/13/75063.aspx"},"http://geekswithblogs.net/TimH/archive/2006/04/13/75063.aspx")))}c.isMDXComponent=!0}}]);