"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["71023"],{74719:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>a,default:()=>h,toc:()=>c,metadata:()=>i,assets:()=>l,contentTitle:()=>o});var i=JSON.parse('{"id":"CSharp/WCF","title":"WCF","description":"Basics of WCF","source":"@site/docs/CSharp/WCF.md","sourceDirName":"CSharp","slug":"/CSharp/WCF","permalink":"/docs/CSharp/WCF","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"CSharp","previous":{"title":"\uD83D\uDD37 Introduction to C#","permalink":"/docs/CSharp/intro"},"next":{"title":"WPF-ViewSwitcherTutorial","permalink":"/docs/CSharp/WPF-ViewSwitcherTutorial"}}'),t=r(85893),s=r(50065);let a={sidebar_position:3},o="WCF Step by Step Tutorial",l={},c=[{value:"Basics of WCF",id:"basics-of-wcf",level:2},{value:"Definition of WCF",id:"definition-of-wcf",level:3},{value:"Features of WCF",id:"features-of-wcf",level:3},{value:"Terms of WCF",id:"terms-of-wcf",level:3},{value:"Types of Contracts",id:"types-of-contracts",level:3},{value:"<strong>WCF Step by Step Tutorial</strong>",id:"wcf-step-by-step-tutorial-1",level:2},{value:"Steps for creating ConsoleMathClient",id:"steps-for-creating-consolemathclient",level:2}];function d(e){let n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"wcf-step-by-step-tutorial",children:"WCF Step by Step Tutorial"})}),"\n",(0,t.jsx)(n.h2,{id:"basics-of-wcf",children:"Basics of WCF"}),"\n",(0,t.jsx)(n.h3,{id:"definition-of-wcf",children:"Definition of WCF"}),"\n",(0,t.jsx)(n.p,{children:"Windows Communication Foundation (WCF) is a framework for building service-oriented applications. Using WCF we can build secure, reliable, transacted solutions that integrate across platforms."}),"\n",(0,t.jsx)(n.p,{children:"WCF is a unified framework which provides :"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"NET Remoting"}),"\n",(0,t.jsx)(n.li,{children:"Distributed Transactions"}),"\n",(0,t.jsx)(n.li,{children:"Message Queues and"}),"\n",(0,t.jsx)(n.li,{children:"Web Services\xa0into a single service-oriented programming model for distributed computing."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"WCF\xa0interoperate\xa0between WCF-based applications and any other processes that communicate via SOAP (Simple Object Access Protocol) messages."}),"\n",(0,t.jsx)(n.h3,{id:"features-of-wcf",children:"Features of WCF"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Service Orientation"}),"\n",(0,t.jsx)(n.li,{children:"Interoperability"}),"\n",(0,t.jsx)(n.li,{children:"Multiple Message Patterns"}),"\n",(0,t.jsx)(n.li,{children:"Service Metadata"}),"\n",(0,t.jsx)(n.li,{children:"Data Contracts"}),"\n",(0,t.jsx)(n.li,{children:"Security"}),"\n",(0,t.jsx)(n.li,{children:"Multiple Transports and Encodings"}),"\n",(0,t.jsx)(n.li,{children:"Reliable and Queued Messages"}),"\n",(0,t.jsx)(n.li,{children:"Durable Messages"}),"\n",(0,t.jsx)(n.li,{children:"Transactions"}),"\n",(0,t.jsx)(n.li,{children:"AJAX and REST Support"}),"\n",(0,t.jsx)(n.li,{children:"Extensibility"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["To know more about features of WCF see:\xa0",(0,t.jsx)(n.a,{href:"http://msdn.microsoft.com/en-us/library/ms733103.aspx",children:"http://msdn.microsoft.com/en-us/library/ms733103.aspx"})]}),"\n",(0,t.jsx)(n.h3,{id:"terms-of-wcf",children:"Terms of WCF"}),"\n",(0,t.jsx)(n.p,{children:"A\xa0WCF service is exposed to the outside world as a collection of endpoints."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"1. Endpoint:"})," Endpoint is a construct at which messages are sent or received (or both). Endpoint\xa0comprises of\xa0",(0,t.jsx)(n.strong,{children:"ABC's"})]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"What are ABC's of WCF ?"})})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"A. Address"})}),"\xa0- Address is a location that defines where messages can be sent"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"B. Binding"})}),"\xa0- Binding is a specification of the communication mechanism (a binding) that described how messages should be sent"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"C. Contract"})}),"\xa0- Contract is a definition for a set of messages that can be sent or received (or both) at that location (a service contract) that describes what message can be sent."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"2. Service:"})," A construct that exposes one or more endpoints, with each endpoint exposing one or more service operations."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"3. Contracts:"})," A contract is a agreement between two or more parties for common understanding and it is a\xa0is a platform-neutral and standard\xa0way of describing what the service does.\xa0In WCF, all services expose contracts."]}),"\n",(0,t.jsx)(n.h3,{id:"types-of-contracts",children:"Types of Contracts"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Operation Contract: An operation contract defines the parameters and return type of an operation."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[OperationContract]\r\ndouble Add(double i, double j);\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Service Contract: Ties together multiple related operations contracts into a single functional unit."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"[ServiceContract] //System.ServiceModel\r\npublic interface IMath\r\n{\r\n[OperationContract]\r\ndouble Add(double i, double j);\r\n[OperationContract]\r\ndouble Sub(double i, double j);\r\n[OperationContract]\r\nComplex AddComplexNo(Complex i, Complex j);\r\n[OperationContract]\r\nComplex SubComplexNo(Complex i, Complex j);\r\n}\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Data Contract: The descriptions in metadata of the data types that a service uses."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cs",children:"// Use a data contract\r\n[DataContract] //using System.Runtime.Serialization\r\npublic class Complex\r\n{\r\nprivate int real;\r\nprivate int imaginary;\r\n\r\n[DataMember]\r\npublic int Real { get; set; }\r\n\r\n[DataMember]\r\npublic int Imaginary { get; set; }\r\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"wcf-step-by-step-tutorial-1",children:(0,t.jsx)(n.strong,{children:"WCF Step by Step Tutorial"})}),"\n",(0,t.jsx)(n.p,{children:"This is the Basic WCF Tutorial 'wcfMathSerLib' will be created in a step by step approach. This 'wcfMathSerLib' will be tested by 'ConsoleMathClient' and with 'WCF Test Client'"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Steps for creating wcfMathSerLib"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Open Visual Studio 2010 and File->NewProject"}),"\n",(0,t.jsx)(n.li,{children:"select WCF in 'Recent Templates'"}),"\n",(0,t.jsx)(n.li,{children:"select 'WCF Service Library'"}),"\n",(0,t.jsx)(n.li,{children:"Give Name as wcfMathServiceLibrary"}),"\n",(0,t.jsx)(n.li,{children:"Click OK"}),"\n",(0,t.jsx)(n.li,{children:"Delete IService1.cs and Service1.cs"}),"\n",(0,t.jsx)(n.li,{children:"Add IMath.cs and MathService.cs and add the code listed below"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"IMath.cs"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"using System.Runtime.Serialization;\r\nusing System.ServiceModel;\r\n\r\nnamespace WcfMathServLib\r\n{\r\n[ServiceContract] //System.ServiceModel\r\npublic interface IMath\r\n{\r\n[OperationContract]\r\ndouble Add(double i, double j);\r\n[OperationContract]\r\ndouble Sub(double i, double j);\r\n[OperationContract]\r\nComplex AddComplexNo(Complex i, Complex j);\r\n[OperationContract]\r\nComplex SubComplexNo(Complex i, Complex j);\r\n}\r\n// Use a data contract\r\n[DataContract] //using System.Runtime.Serialization\r\npublic class Complex\r\n{\r\n    private int real;\r\n    private int imaginary;\r\n\r\n    [DataMember]\r\n    public int Real { get; set; }\r\n\r\n    [DataMember]\r\n    public int Imaginary { get; set; }\r\n}&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;\r\n\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"MathService.cs"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"namespace WcfMathServLib\r\n{\r\n  public class MathService : IMath\r\n  {\r\n        public double Add(double i, double j)\r\n        {\r\n            return (i + j);\r\n        }\r\n\r\n        public double Sub(double i, double j)\r\n        {\r\n            return (i - j);\r\n        }\r\n\r\n        public Complex AddComplexNo(Complex i, Complex j)\r\n        {\r\n            Complex result = new Complex();\r\n            result.Real = i.Real + j.Real;\r\n            result.Imaginary = i.Imaginary + j.Imaginary;\r\n            return result;\r\n        }\r\n\r\n        public Complex SubComplexNo(Complex i, Complex j)\r\n        {\r\n            Complex result = new Complex();\r\n            result.Real = i.Real - j.Real;\r\n            result.Imaginary = i.Imaginary - j.Imaginary;\r\n            return result;\r\n        }\r\n  }\r\n}\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Modify the App.config file as shown"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"App.config"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<?xml version="1.0" encoding="utf-8" ?>\r\n<configuration>\r\n\r\n<system.web>\r\n<compilation debug="true" />\r\n</system.web>\r\n\r\n<system.sericeModel>\r\n<services>\r\n<service name="WcfMathServLib.MathService">\r\n  <host>\r\n      <baseAddresses>\r\n        <add baseAddress = "http://localhost:8732/Design\\_Time\\_Addresses/WcfMathServLib/MathService/" />\r\n      </baseAddresses>\r\n    </host>\r\n\r\n    \x3c!-- Service Endpoints --\x3e\r\n    <endpoint address ="" binding="wsHttpBinding" contract="WcfMathServLib.IMath">\r\n      <identity>\r\n        <dns value="localhost"/>\r\n      </identity>\r\n    </endpoint>\r\n\r\n    \x3c!-- Metadata Endpoints --\x3e\r\n    <endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/>\r\n  </service>\r\n</services>\r\n<behaviors>\r\n\r\n  <serviceBehaviors>\r\n    <behavior>\r\n       <serviceMetadata httpGetEnabled="True"/>\r\n      <serviceDebug includeExceptionDetailInFaults="False" />\r\n    </behavior>\r\n  </serviceBehaviors>\r\n</behaviors>\r\n</system.sericeModel>\r\n\r\n</configuration>\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Result Using WCF Test Client"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Run the WcfMathServLib project you will get the \u2018WCF Test Client\u2019"}),"\n",(0,t.jsx)(n.li,{children:"Select each method say \u2018AddComplexNo\u2019 Give the values in \u2018Request\u2019"}),"\n",(0,t.jsx)(n.li,{children:"Click on Invoke button"}),"\n",(0,t.jsx)(n.li,{children:"See the results in \u201CResponse\u201D"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"steps-for-creating-consolemathclient",children:"Steps for creating ConsoleMathClient"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Open Visual Studio 2010 and File->NewProject"}),"\n",(0,t.jsx)(n.li,{children:"select Visual C#->Windows in \u2018Installed Templates\u2019"}),"\n",(0,t.jsx)(n.li,{children:"select \u2018Console Application\u2019"}),"\n",(0,t.jsx)(n.li,{children:"Give Name as ConsoleMathClient"}),"\n",(0,t.jsx)(n.li,{children:"Click OK"}),"\n",(0,t.jsx)(n.li,{children:"Go to \u2018Solution Explorer\u2019 Right click on ConsoleMathClient -> Select \u2018Add Service Reference\u2019 the below dialog will be displayed"}),"\n",(0,t.jsx)(n.li,{children:"Click on Discover button"}),"\n",(0,t.jsx)(n.li,{children:"Give namespace as \u2018MathServiceReference\u2019 and click OK"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The service reference will be added now modify the program.cs as shown below."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Program.cs"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"using System;\r\nusing ConsoleMathClient.MathServiceReference;\r\n\r\nnamespace ConsoleMathClient\r\n{\r\n  class Program\r\n  {\r\n    static void Main(string\\[\\] args)\r\n    {\r\n        Console.WriteLine(Press Enter to run the client....);\r\n        Console.ReadLine();\r\n\r\n        MathClient math = new MathClient();\r\n        Console.WriteLine(Add of 3 and 2 = {0}, math.Add(3, 2));\r\n        Console.WriteLine(Sub of 3 and 2 = {0}, math.Sub(3, 2));\r\n\r\n        Complex no1 = new Complex();\r\n        no1.Real = 3;\r\n        no1.Imaginary = 3;\r\n\r\n        Complex no2 = new Complex();\r\n        no2.Real = 2;\r\n        no2.Imaginary = 2;\r\n\r\n        Complex result = new Complex();\r\n        result = math.AddComplexNo(no1, no2);\r\n        Console.WriteLine(Add of 3+3i and 2+2i = {0}+{1}i, result.Real, result.Imaginary);\r\n\r\n        result = math.SubComplexNo(no1, no2);\r\n        Console.WriteLine(Sub of 3+3i and 2+2i = {0}+{1}i, result.Real, result.Imaginary);\r\n\r\n        Console.ReadLine();\r\n    }\r\n  }\r\n\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Result"})}),"\n",(0,t.jsx)(n.p,{children:"Compile and Run the project to see the Result"})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},50065:function(e,n,r){r.d(n,{Z:()=>o,a:()=>a});var i=r(67294);let t={},s=i.createContext(t);function a(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);