"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[7311],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>f});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),c=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},p=function(t){var e=c(t.components);return a.createElement(s.Provider,{value:e},t.children)},u="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},b=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,p=l(t,["components","mdxType","originalType","parentName"]),u=c(n),b=r,f=u["".concat(s,".").concat(b)]||u[b]||m[b]||o;return n?a.createElement(f,i(i({ref:e},p),{},{components:n})):a.createElement(f,i({ref:e},p))}));function f(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,i=new Array(o);i[0]=b;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=t,l[u]="string"==typeof t?t:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},51499:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={title:"Size Matters (C++)",date:"2011-09-18",categories:["c-cpp-mfc-vcpp"],tags:["cpp"]},i=void 0,l={permalink:"/blog/2011/09/18/size-matters-c",source:"@site/blog/2011-09-18-size-matters-c.md",title:"Size Matters (C++)",description:"C++ class have A. Data Members B. Members Functions",date:"2011-09-18T00:00:00.000Z",formattedDate:"September 18, 2011",tags:[{label:"cpp",permalink:"/blog/tags/cpp"}],readingTime:1.63,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Size Matters (C++)",date:"2011-09-18",categories:["c-cpp-mfc-vcpp"],tags:["cpp"]},prevItem:{title:"Memory Layout of a class (C++) Object",permalink:"/blog/2011/09/18/memory-layout-of-a-class-c-object"},nextItem:{title:"Variable arguments handling in C/C++",permalink:"/blog/2011/09/18/variable-arguments-handling"}},s={authorsImageUrls:[]},c=[],p={toc:c},u="wrapper";function m(t){let{components:e,...n}=t;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"C++ class have A. Data Members B. Members Functions"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"A. Data Members")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Static Data Member The size of a class object with only Static data members irrespective of Data Type (say float, long e.tc.) is\xa0equal to ",(0,r.kt)("a",{parentName:"p",href:"http://nagvbt.blogspot.com/2011/09/18/why-size-of-an-empty-c-class-not-zero/"},"one Byte (~ size of Empty class)")," "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class CStaticDataMemberCls\n{\npublic:\nstatic int i;\nstatic float f;\n};\n\n")))),(0,r.kt)("p",null,"void main() { CStaticDataMemberCls objSDMC; cout","<","} ","[","/source","]"),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Non Static Data Member The size of a class with non static data members is equal to sum of the data type size i.e. size of int = 4 size of float = 4 so total = 8"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class CNonStaticDataMemberCls\n{\npublic:\nint i;\nfloat f;\n};\n\n")))),(0,r.kt)("p",null,"void main() { CNonStaticDataMemberCls objNSDMC; cout","<","} ","[","/source","]"," ",(0,r.kt)("strong",{parentName:"p"},"B. Members Functions")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Static Members Functions"),(0,r.kt)("li",{parentName:"ol"},"Non Static Members Functions")),(0,r.kt)("p",null,"As Static Members Functions and Non static Members Functions are hoisted outside the class object. The size of the class will also be equal to ",(0,r.kt)("a",{parentName:"p",href:"http://nagvbt.blogspot.com/2011/09/18/why-size-of-an-empty-c-class-not-zero/"},"one Byte (~ size of Empty class)")," "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class CMemberFunctionsCls\n{\npublic:\n    int fun1() { return 1; }\n    static int staticFun() { return 1; }\n\n};\n\nvoid main()\n{\n        CMemberFunctionsCls objMFC;\n    cout&lt;}\n\\[/source\\]\n\n3. Virtual Members Functions If a class consists of virtual functions a table of pointers(i.e. Virtual Table) to virtual functions is generated for each class. And a pointer (vptr) to the created Virtual Table is inserted with in each class object. So the size of CVirtualFunctionCls object will be 4 Bytes which is nothing but a size of vptr.\n    \n    ```cpp\n    class CVirtualFunctionCls\n    {\n    public:\n    virtual ~CVirtualFunctionCls() {}\n        virtual void virtualFun1() {}\n    virtual void virtualFun2() {}\n    };\n    \n\nvoid main() { CVirtualFunctionCls objVFC; cout&lt;} \\[/source\\] Let us see the class with all the above members\n\n```cpp\nclass Sample\n{\npublic:\n     Sample() {};\n\n     virtual ~Sample() {}\n     virtual void virtualFun1() {}\n     virtual void virtualFun2() {}\n\n     void normalFun() {}\n\n     static int getCount() //static function\n     {\n       return nCount;\n     }\n\nprivate:\n     int i;\n     static int nCount;\n};\n\nvoid main()\n{\n        Sample obj;\n    cout&lt;}\n\n\\[/source\\]\n")))}m.isMDXComponent=!0}}]);