"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[79382],{3905:(n,e,t)=>{t.d(e,{Zo:()=>s,kt:()=>D});var r=t(67294);function d(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function p(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){d(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function o(n,e){if(null==n)return{};var t,r,d=function(n,e){if(null==n)return{};var t,r,d={},a=Object.keys(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||(d[t]=n[t]);return d}(n,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)t=a[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(d[t]=n[t])}return d}var i=r.createContext({}),c=function(n){var e=r.useContext(i),t=e;return n&&(t="function"==typeof n?n(e):p(p({},e),n)),t},s=function(n){var e=c(n.components);return r.createElement(i.Provider,{value:e},n.children)},l="mdxType",y={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,d=n.mdxType,a=n.originalType,i=n.parentName,s=o(n,["components","mdxType","originalType","parentName"]),l=c(t),m=d,D=l["".concat(i,".").concat(m)]||l[m]||y[m]||a;return t?r.createElement(D,p(p({ref:e},s),{},{components:t})):r.createElement(D,p({ref:e},s))}));function D(n,e){var t=arguments,d=e&&e.mdxType;if("string"==typeof n||d){var a=t.length,p=new Array(a);p[0]=m;var o={};for(var i in e)hasOwnProperty.call(e,i)&&(o[i]=e[i]);o.originalType=n,o[l]="string"==typeof n?n:d,p[1]=o;for(var c=2;c<a;c++)p[c]=t[c];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},67551:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>i,contentTitle:()=>p,default:()=>y,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=t(87462),d=(t(67294),t(3905));const a={},p="Operator Overloading Date Class",o={unversionedId:"articles/Cpp/OperatorOverloadingDateClass",id:"articles/Cpp/OperatorOverloadingDateClass",title:"Operator Overloading Date Class",description:"",source:"@site/docs/articles/Cpp/OperatorOverloadingDateClass.md",sourceDirName:"articles/Cpp",slug:"/articles/Cpp/OperatorOverloadingDateClass",permalink:"/docs/articles/Cpp/OperatorOverloadingDateClass",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Inheritance Program",permalink:"/docs/articles/Cpp/InheritanceProgram"},next:{title:"Random FAQ (C++)",permalink:"/docs/articles/Cpp/RandomFaq"}},i={},c=[],s={toc:c},l="wrapper";function y(n){let{components:e,...t}=n;return(0,d.kt)(l,(0,r.Z)({},s,t,{components:e,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"operator-overloading-date-class"},"Operator Overloading Date Class"),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-cpp"},'//Class Date Explains About operator overloading\n \n#define W1 "SUN DAY"\n#define W2 "MON DAY"\n#define W3 "TUES DAY"\n#define W4 "WEDNES DAY"\n#define W5 "THURS DAY"\n#define W6 "FRI DAY"\n#define W7 "SATUR DAY"\n \n#include<iostream>\n#include<string.h>\nusing namespace std;\n \nclass DATE\n{\n    int dd;\n    int mm;\n    int yy;\n    long dp;\n    charweek[30];\n    voidcaldmy();\n    voidcal_dp_week();\npublic:\n    DATE();\n    DATE(int,int,int);\n    voidgetdate();\n    voidgetdate(int,int,int);\n    voidshowdate();\n    DATE operator+(long);\n    DATE operator-(long);\n    long operator-(DATE);\n    DATE operator=(long);\n    DATE operator++();\n    DATE operator++(int);\n    DATE operator--();\n    DATE operator--(int);\n    int operator>(DATE);\n \n};\nDATE::DATE()\n{\n    dp=1;\n    caldmy();\n}\nDATE::DATE(int d,int m,int y)\n{\n    dd=d;\n    mm=m;\n    yy=y;\n    cal_dp_week();\n}\n \nint DATE::operator>(DATE D)\n{\n    returndp>D.dp;\n}\n \nDATE DATE::operator++()\n{\n    dp++;\n    caldmy();\n    return *this;\n}\n \nDATE DATE::operator++(int)\n{\n    DATE td;\n    td=*this;\n    dp++;\n    caldmy();\n    returntd;\n}\n \nDATE DATE::operator--()\n{\n    dp--;\n    caldmy();\n    return *this;\n}\n \nDATE DATE::operator--(int)\n{\n    DATE td;\n    td=*this;\n    dp--;\n    caldmy();\n    returntd;\n}\n  \nDATE DATE::operator=(long days)\n{\n    dp=days;\n    caldmy();\n    return *this;\n}\n \nlong DATE::operator-(DATE D)\n{\n    returndp-D.dp;\n}\n \nvoid DATE::getdate(int d,int m,int y)\n{\n    dd=d;\n    mm=m;\n    yy=y;\n    cal_dp_week();\n}\n \nDATE DATE::operator+(long days)\n{\n    DATE td;\n    td.dp=dp+days;\n    td.caldmy();\n    returntd;\n}\n \nDATE DATE::operator-(long days)\n{\n    return operator+(-days);\n} \n \nvoid DATE::caldmy()\n{\n    long int tdp=dp;\n    for(yy=1;tdp>365;tdp-=365)\n    {\n        if(tdp==366 && yy%4==0)\n        break;\n        if(yy%4==0)\n        tdp--;\n     \n        yy++;\n    }\n     \n    if(tdp>=1&&tdp<=31)\n    {\n        mm=1;\n        dd=tdp;\n    }\n     \n    if(tdp>=32&&tdp<=59)\n    {\n        mm=2;\n        dd=tdp-31;\n    }\n     \n    if(yy%4==0 && tdp==60)\n    {\n        mm=2;\n        dd=tdp-31;\n    }\n    if(yy%4==0)\n    tdp--;\n     \n    if(tdp>=60&&tdp<=90)\n    {\n        mm=3;\n        dd=tdp-59;\n    }\n    if(tdp>=91&&tdp<=120)\n    {\n        mm=4;\n        dd=tdp-90;\n    }\n    if(tdp>=121&&tdp<=151)\n    {\n        mm=5;\n        dd=tdp-120;\n    }\n    if(tdp>=152&&tdp<=181)\n    {\n        mm=6;\n        dd=tdp-151;\n    }\n    if(tdp>=182&&tdp<=212)\n    {\n        mm=7;\n        dd=tdp-181;\n    }\n    if(tdp>=213&&tdp<=243)\n    {\n        mm=8;\n        dd=tdp-212;\n    }\n    if(tdp>=244&&tdp<=273)\n    {\n        mm=9;\n        dd=tdp-243;\n    }\n    if(tdp>=274&&tdp<=304)\n    {\n        mm=10;\n        dd=tdp-273;\n    }\n    if(tdp>=305&&tdp<=334)\n    {\n        mm=11;\n        dd=tdp-304;\n    }\n    if(tdp>=335&&tdp<=365)\n    {\n        mm=12;\n        dd=tdp-334;\n    }\n     \n    switch(dp%7)\n    {\n    case1:strcpy(week,W1);\n        break;\n    case2:strcpy(week,W2);\n        break;\n    case3:strcpy(week,W3);\n        break;\n    case4:strcpy(week,W4);\n        break;\n    case5:strcpy(week,W5);\n        break;\n    case6:strcpy(week,W6);\n        break;\n    case0:strcpy(week,W7);\n        break;\n \n    }\n}// END FOR CAL DMY\n \nvoidDATE::cal_dp_week()\n{\n    int syy;\n    dp=0;\n    for(syy=1;syy<yy;syy++)\n    {\n        dp+=365;\n         \n        if(syy%4==0)\n            dp++;\n    }\n    switch(mm)\n    {\n        case12:dp+=30;\n        case11:dp+=31;\n        case10:dp+=30;\n        case9:dp+=31;\n        case8:dp+=31;\n        case7:dp+=30;\n        case6:dp+=31;\n        case5:dp+=30;\n        case4:dp+=31;\n        case3:dp+=28;\n        case2:dp+=31;\n        case1:dp+=dd;\n    }\n    if( yy%4==0 && mm>2)\n        dp++;\n    switch(dp%7)\n    {\n    case1:strcpy(week,W1);\n        break;\n    case2:strcpy(week,W2);\n        break;\n    case3:strcpy(week,W3);\n        break;\n    case4:strcpy(week,W4);\n        break;\n    case5:strcpy(week,W5);\n        break;\n    case6:strcpy(week,W6);\n        break;\n    case0:strcpy(week,W7);\n        break;\n \n    }\n} // END FOR CAL DP &WEEK\n \nvoid DATE::getdate()\n{\n    cout<<"\\nENTER DD:";\n    cin>>dd;\n    cout<<"\\nENTER MM:";\n    cin>>mm;\n    cout<<"\\nENTER YY:";\n    cin>>yy;\n    cal_dp_week();\n}\n \nvoid DATE::showdate()\n{\n    cout<<"\\nDATE:"<<dd<<"/"<<mm<<"/"<<yy;\n    cout<<"\\nDP ="<<dp;\n    cout<<"\\nWEEK ="<<week;\n}\n \nDATE operator+(long days,DATE D)\n{\n    returnD+days;\n}\n \nvoid main()\n{\n    DATE d1,d2,d3,d4;\n    d1.getdate(23,2,1981);\n    d2.getdate(15,3,2005);\n    cout<< (d2>d1);\n    d1.showdate();\n    // d2=d1+365+1;\n    // d2=d1-365;\n    // d2.showdate();\n    // cout<<d2-d1;\n    // d3= d2-d1;\n    /* d3.getdate(28,2,2003);\n    d4=d3++;\n    d3.showdate();\n    d4.showdate();\n    */\n}\n')))}y.isMDXComponent=!0}}]);