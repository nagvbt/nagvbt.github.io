"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["59917"],{79456:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>s,default:()=>u,toc:()=>t,metadata:()=>l,assets:()=>i,contentTitle:()=>c});var l=JSON.parse('{"id":"Languages/Enum","title":"Enum","description":"Definition","source":"@site/docs/Languages/Enum.md","sourceDirName":"Languages","slug":"/Languages/Enum","permalink":"/docs/Languages/Enum","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":16,"frontMatter":{"sidebar_position":16},"sidebar":"tutorialSidebar","previous":{"title":"Polymorphism","permalink":"/docs/Languages/Polymorphism"},"next":{"title":"Interface","permalink":"/docs/Languages/Interfaces"}}'),o=r(85893),a=r(50065);let s={sidebar_position:16},c="Enum",i={},t=[{value:"Definition",id:"definition",level:2},{value:"Syntax",id:"syntax",level:2},{value:"C#",id:"c",level:3},{value:"Example",id:"example",level:3},{value:"Java",id:"java",level:3},{value:"Example",id:"example-1",level:3},{value:"Python",id:"python",level:3},{value:"Example",id:"example-2",level:3},{value:"JavaScript",id:"javascript",level:3},{value:"Example",id:"example-3",level:3},{value:"C++",id:"c-1",level:3},{value:"Example",id:"example-4",level:3},{value:"TypeScript",id:"typescript",level:3},{value:"Example",id:"example-5",level:3}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"enum",children:"Enum"})}),"\n",(0,o.jsx)(n.h2,{id:"definition",children:"Definition"}),"\n",(0,o.jsxs)(n.p,{children:["An ",(0,o.jsx)(n.strong,{children:"enum"})," (short for enumeration) is a special data type that allows a variable to be one of\r\na set of predefined named constants. It improves code readability and enforces variable constraints\r\nto a limited set of values."]}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsx)(n.p,{children:"Notes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["In ",(0,o.jsx)(n.strong,{children:"C#"}),", ",(0,o.jsx)(n.strong,{children:"Java"}),", and ",(0,o.jsx)(n.strong,{children:"C++"}),", enums are native language constructs."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Python"})," uses the ",(0,o.jsx)(n.code,{children:"enum"})," module to create enums."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"JavaScript"})," has no native enums, but you can simulate them using frozen objects."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"syntax",children:"Syntax"}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"c",children:"C#"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"enum className {\r\n    VALUE1,\r\n    VALUE2,\r\n    VALUE3\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'using System;\r\n\r\nenum Color {\r\n    RED,\r\n    GREEN,\r\n    BLUE\r\n}\r\n\r\nclass Program {\r\n    static void printColor(Color color) {\r\n        Console.WriteLine("Selected color: " + color);\r\n    }\r\n\r\n    static void Main() {\r\n        printColor(Color.GREEN);  // Output: Selected color: GREEN\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"java",children:"Java"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:"enum className {\r\n    VALUE1,\r\n    VALUE2,\r\n    VALUE3\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-java",children:'enum Color {\r\n    RED,\r\n    GREEN,\r\n    BLUE\r\n}\r\n\r\npublic class Program {\r\n    static void printColor(Color color) {\r\n        System.out.println("Selected color: " + color);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        printColor(Color.GREEN);  // Output: Selected color: GREEN\r\n    }\r\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"from enum import Enum\r\n\r\nclass className(Enum):\r\n    VALUE1 = 1\r\n    VALUE2 = 2\r\n    VALUE3 = 3\n"})}),"\n",(0,o.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'from enum import Enum\r\n\r\nclass Color(Enum):\r\n    RED = 1\r\n    GREEN = 2\r\n    BLUE = 3\r\n\r\ndef print_color(color):\r\n    print("Selected color:", color.name)\r\n\r\nprint_color(Color.GREEN)  # Output: Selected color: GREEN\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"javascript",children:"JavaScript"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const className = Object.freeze({\r\n    VALUE1: "VALUE1",\r\n    VALUE2: "VALUE2",\r\n    VALUE3: "VALUE3"\r\n});\n'})}),"\n",(0,o.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:'const Color = Object.freeze({\r\n    RED: "RED",\r\n    GREEN: "GREEN",\r\n    BLUE: "BLUE"\r\n});\r\n\r\nfunction printColor(color) {\r\n    console.log("Selected color:", color);\r\n}\r\n\r\nprintColor(Color.GREEN);  // Output: Selected color: GREEN\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"c-1",children:"C++"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:"enum class className {\r\n    VALUE1,\r\n    VALUE2,\r\n    VALUE3\r\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\r\nusing namespace std;\r\n\r\nenum class Color {\r\n    RED,\r\n    GREEN,\r\n    BLUE\r\n};\r\n\r\nvoid printColor(Color color) {\r\n    switch(color) {\r\n        case Color::RED:\r\n            cout << "Selected color: RED" << endl;\r\n            break;\r\n        case Color::GREEN:\r\n            cout << "Selected color: GREEN" << endl;\r\n            break;\r\n        case Color::BLUE:\r\n            cout << "Selected color: BLUE" << endl;\r\n            break;\r\n    }\r\n}\r\n\r\nint main() {\r\n    printColor(Color::GREEN);  // Output: Selected color: GREEN\r\n    return 0;\r\n}\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"typescript",children:"TypeScript"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"enum className {\r\n    VALUE1,\r\n    VALUE2,\r\n    VALUE3\r\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"example-5",children:"Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'enum Color {\r\n    RED,\r\n    GREEN,\r\n    BLUE\r\n}\r\n\r\nfunction printColor(color: Color): void {\r\n    console.log("Selected color: " + Color[color]);\r\n}\r\n\r\nprintColor(Color.GREEN);  // Output: Selected color: GREEN\n'})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"#enum",children:"Back to top"})})]})}function u(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},50065:function(e,n,r){r.d(n,{Z:()=>c,a:()=>s});var l=r(67294);let o={},a=l.createContext(o);function s(e){let n=l.useContext(a);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),l.createElement(a.Provider,{value:n},e.children)}}}]);