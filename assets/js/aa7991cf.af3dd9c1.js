"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[12846],{3905:(t,e,n)=>{n.d(e,{Zo:()=>s,kt:()=>m});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),p=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},s=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},c="mdxType",g={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,d=t.parentName,s=l(t,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(d,".").concat(h)]||c[h]||g[h]||i;return n?a.createElement(m,o(o({ref:e},s),{},{components:n})):a.createElement(m,o({ref:e},s))}));function m(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=t,l[c]="string"==typeof t?t:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},58218:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={title:"COM Threading Models / Apartment Model",date:"2012-06-19",categories:["com-dcom-atl"],tags:["com"]},o=void 0,l={permalink:"/blog/2012/06/19/threading-modelsapartment-model",source:"@site/blog/2012-06-19-threading-modelsapartment-model.md",title:"COM Threading Models / Apartment Model",description:"Definition: Multithreading in COM is referred to as the apartment model in COM",date:"2012-06-19T00:00:00.000Z",formattedDate:"June 19, 2012",tags:[{label:"com",permalink:"/blog/tags/com"}],readingTime:1.46,hasTruncateMarker:!1,authors:[],frontMatter:{title:"COM Threading Models / Apartment Model",date:"2012-06-19",categories:["com-dcom-atl"],tags:["com"]},prevItem:{title:"WPF Basics",permalink:"/blog/2012/07/01/wpf-basics"},nextItem:{title:"COM Threading Model vs Win32/MFC Threads",permalink:"/blog/2012/06/18/com-threading-model-vs-win32mfc-threads"}},d={authorsImageUrls:[]},p=[],s={toc:p},c="wrapper";function g(t){let{components:e,...n}=t;return(0,r.kt)(c,(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Definition"),": Multithreading in COM is referred to as the apartment model in COM"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Apartment"))),(0,r.kt)("p",null,"The COM apartment is a conceptual entity that allows us to think about components and their clients in a logical way"),(0,r.kt)("p",null,"\u2022 An apartment is not a thread, but a thread belongs to only one apartment. \u2022 An apartment is not an instance of a COM object, but each COM instance belongs to only one apartment. \u2022 A process can have one or more apartments, depending on its implementation. \u2022 Apartments are created or entered by calling the CoInitialize or CoInitializeEx function. Each thread that calls CoInitialize(0) or CoInitializeEx( 0, COINIT","_","APARTMENTTHREADED )"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"STA (Single Threaded Apartment) : Only One thread can join this Apartment."),(0,r.kt)("li",{parentName:"ol"},"MTA (MultiThreaded Apartment): Multiple threads can join this Apartment.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Differences between STA and MTA"))),(0,r.kt)("table",{border:"1",cellspacing:"0",cellpadding:"0"},(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"33"},(0,r.kt)("strong",null,"No")),(0,r.kt)("td",{valign:"top",width:"515"},(0,r.kt)("strong",null,"Feature")),(0,r.kt)("td",{valign:"top",width:"72"},(0,r.kt)("strong",null,"STA")),(0,r.kt)("td",{valign:"top",width:"67"},(0,r.kt)("strong",null,"MTA"))),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"33"},"1"),(0,r.kt)("td",{valign:"top",width:"515"},"Synchronization provided by COM"),(0,r.kt)("td",{valign:"top",width:"72"},"YES"),(0,r.kt)("td",{valign:"top",width:"67"},"NO")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"33"},"2"),(0,r.kt)("td",{valign:"top",width:"515"},"Uses Windows message queues"),(0,r.kt)("td",{valign:"top",width:"72"},"YES"),(0,r.kt)("td",{valign:"top",width:"67"},"NO")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"33"},"3"),(0,r.kt)("td",{valign:"top",width:"515"},"Can have multiple threads in an apartment"),(0,r.kt)("td",{valign:"top",width:"72"},"NO"),(0,r.kt)("td",{valign:"top",width:"67"},"YES")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"33"},"4"),(0,r.kt)("td",{valign:"top",width:"515"},"Must marshal interface pointers between the threads in the same apartment"),(0,r.kt)("td",{valign:"top",width:"72"},"N/A"),(0,r.kt)("td",{valign:"top",width:"67"},"YES")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"33"},"5"),(0,r.kt)("td",{valign:"top",width:"515"},"Must marshal interface pointers between apartments"),(0,r.kt)("td",{valign:"top",width:"72"},"YES"),(0,r.kt)("td",{valign:"top",width:"67"},"YES")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"33"},"6"),(0,r.kt)("td",{valign:"top",width:"515"},"Must call Coinitialize() in every thread that uses a COM Service"),(0,r.kt)("td",{valign:"top",width:"72"},"YES"),(0,r.kt)("td",{valign:"top",width:"67"},"YES")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"33"},"7"),(0,r.kt)("td",{valign:"top",width:"515"},"Perfomance"),(0,r.kt)("td",{valign:"top",width:"72"},"Slow"),(0,r.kt)("td",{valign:"top",width:"67"},"Fast")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE"),": ATL object wizard allows you to set the threading model. The values can be"),(0,r.kt)("table",{border:"1",cellspacing:"0",cellpadding:"0"},(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"272"},"Threading Model"),(0,r.kt)("td",{valign:"top",width:"228"},"Description")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"272"},"Single / No Value"),(0,r.kt)("td",{valign:"top",width:"228"},"Object knows nothing about threads")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"272"},"Apartment"),(0,r.kt)("td",{valign:"top",width:"228"},"STA")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"272"},"Free"),(0,r.kt)("td",{valign:"top",width:"228"},"MTA")),(0,r.kt)("tr",null,(0,r.kt)("td",{valign:"top",width:"272"},"Both"),(0,r.kt)("td",{valign:"top",width:"228"},"Both STA & MTA")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Types of Apartments")))}g.isMDXComponent=!0}}]);