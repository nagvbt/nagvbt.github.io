"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[10156],{7532:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var r=t(8425),a=t(74848),s=t(28453);const i={tags:["C++"]},o="Variable arguments handling in C/C++",l={authorsImageUrls:[]},c=[];function u(n){const e={code:"code",p:"p",pre:"pre",...(0,s.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"Use va_list to accept a VARYING NUMBER OF ARGUMENTS for any function in C/C++. printf(const char*_Format, ...) is a real time function which uses va_list."}),"\n",(0,a.jsx)(e.p,{children:"For using va_list we need to know about the following macros"}),"\n",(0,a.jsx)(e.p,{children:"va_start Initialize a variable argument list (macro) va_arg Retrieve next argument (macro) va_end End using variable argument list (macro)"}),"\n",(0,a.jsx)(e.p,{children:"The sample explains how to use VARYING NUMBER OF ARGUMENTS"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'\r\n# include <stdarg.h>\r\n\r\nint Add(int args, ...) \r\n{ \r\n  int sum = 0; \r\n  int temp = 0;\r\n\r\n  va_list va; //1. Declare a va_list\r\n\r\n  va_start(va, args); //2. Initialise\r\n\r\n  for(int i = 0; i<=args; i++) { \r\n    temp = va_arg(va, int); //3. Retrieve \r\n    sum = temp+sum; \r\n  }\r\n\r\nva_end(va); //4. END\r\n\r\nreturn sum; \r\n}\r\n\r\nvoid main() { \r\n  printf("sum=%d n ", Add(2, 1, 2, 5)); \r\n  //OutPut: 8 \r\n  }\n'})})]})}function m(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},8425:n=>{n.exports=JSON.parse('{"permalink":"/blog/2011/09/18/variable-arguments-handling","source":"@site/blog/2011-09-18-variable-arguments-handling.md","title":"Variable arguments handling in C/C++","description":"Use valist to accept a VARYING NUMBER OF ARGUMENTS for any function in C/C++. printf(const char\\\\*Format, ...) is a real time function which uses va_list.","date":"2011-09-18T00:00:00.000Z","tags":[{"inline":true,"label":"C++","permalink":"/blog/tags/c"}],"readingTime":0.705,"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["C++"]},"unlisted":false,"prevItem":{"title":"Size Matters (C++)","permalink":"/blog/2011/09/18/size-matters-c"},"nextItem":{"title":"Why size of an empty C++ class not zero?","permalink":"/blog/2011/09/18/why-size-of-an-empty-c-class-not-zero"}}')},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>o});var r=t(96540);const a={},s=r.createContext(a);function i(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);