"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[5933],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(n),h=r,m=c["".concat(s,".").concat(h)]||c[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3909:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3},i="Polymorphism",l={unversionedId:"articles/Cpp/Polymorphism",id:"articles/Cpp/Polymorphism",title:"Polymorphism",description:"1.What are the types of Polymorphism ?",source:"@site/docs/articles/Cpp/Polymorphism.md",sourceDirName:"articles/Cpp",slug:"/articles/Cpp/Polymorphism",permalink:"/docs/articles/Cpp/Polymorphism",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Functions",permalink:"/docs/articles/Cpp/Functions"},next:{title:"Inheritance",permalink:"/docs/articles/Cpp/Inheritance"}},s={},u=[{value:"1.What are the types of Polymorphism ?",id:"1what-are-the-types-of-polymorphism-",level:3},{value:"2.What is Binding ?",id:"2what-is-binding-",level:3},{value:"3.What is the difference between Static and Dynamic Binding ?",id:"3what-is-the-difference-between-static-and-dynamic-binding-",level:3},{value:"4.What are Virtual Functions ?",id:"4what-are-virtual-functions-",level:3},{value:"5.What is a Pure virtual function ?",id:"5what-is-a-pure-virtual-function-",level:3},{value:"6.Pure Abstract base class ?",id:"6pure-abstract-base-class-",level:3},{value:"7.What is a Vtable pointer ?",id:"7what-is-a-vtable-pointer-",level:3},{value:"8.What is a virtual function table ?",id:"8what-is-a-virtual-function-table-",level:3},{value:"9.Can we have virtual constructors ?",id:"9can-we-have-virtual-constructors-",level:3},{value:"10.Write a program to Demonstrates Virtual Functions ?",id:"10write-a-program-to-demonstrates-virtual-functions-",level:3},{value:"11.Explain about Function Overloading ?",id:"11explain-about-function-overloading-",level:3},{value:"12.What are the senarios that Function Overloading misunderstood ?",id:"12what-are-the-senarios-that-function-overloading-misunderstood-",level:3},{value:"13.What is NAME MANGLING or NAME DECORATION ?",id:"13what-is-name-mangling-or-name-decoration-",level:3},{value:"14.Explain about Operator overloading ?",id:"14explain-about-operator-overloading-",level:3},{value:"15.What are the Operators that cannot be overloaded ?",id:"15what-are-the-operators-that-cannot-be-overloaded-",level:3},{value:"16.Write the Syntax for Operator overloading ?",id:"16write-the-syntax-for-operator-overloading-",level:3},{value:"17.Write a program to demonstrate Operator overloading ?",id:"17write-a-program-to-demonstrate-operator-overloading-",level:3}],p={toc:u},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"polymorphism"},"Polymorphism"),(0,r.kt)("h3",{id:"1what-are-the-types-of-polymorphism-"},"1.What are the types of Polymorphism ?"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"COMPILE-TIME Polymorphism: It will be implemened by using Function Overloading and Operator Overloading\n"),(0,r.kt)("li",{parentName:"ol"},"RUN-TIME Polymorphism: It will be implemened by using Virtual Functions")),(0,r.kt)("h3",{id:"2what-is-binding-"},"2.What is Binding ?"),(0,r.kt)("p",null,"The term binding refers to the connection between a function call and the actual code executed as a result of the call."),(0,r.kt)("h3",{id:"3what-is-the-difference-between-static-and-dynamic-binding-"},"3.What is the difference between Static and Dynamic Binding ?"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Static or Early Binding:"))),(0,r.kt)("p",null,"Adavantage of function calls are fast when a function call gets resolved at compile-time it is called as static binding.\ne.g: Normal functions, overloaded functions, overloaded operator."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Dynamic or Late Binding:"))),(0,r.kt)("p",null,"When a function call gets resolved at runtime it is called as dynamic binding. e.g: virtual functions"),(0,r.kt)("h3",{id:"4what-are-virtual-functions-"},"4.What are Virtual Functions ?"),(0,r.kt)("p",null,"The form of the function that can be changed at runtime is called virtual function and the corresponding class is called polymorphic class. "),(0,r.kt)("p",null,"C++ provides a solution to invoke the exact version of the member function which as to be decided at runtime using virtual functions."),(0,r.kt)("p",null,"They are the means by which functions of the base class can be overridden by the functions of the derived class."),(0,r.kt)("h3",{id:"5what-is-a-pure-virtual-function-"},"5.What is a Pure virtual function ?"),(0,r.kt)("p",null,"A virtual function which is marked with the pure specifier (=0)\ne.g: ",(0,r.kt)("inlineCode",{parentName:"p"},"virtual void __stdcall Add( ) = 0;")),(0,r.kt)("h3",{id:"6pure-abstract-base-class-"},"6.Pure Abstract base class ?"),(0,r.kt)("p",null,"It is a base class that contains only pure virtual functions."),(0,r.kt)("h3",{id:"7what-is-a-vtable-pointer-"},"7.What is a Vtable pointer ?"),(0,r.kt)("p",null,"It is a pointer to abstract base class points to the vtbl pointer which points to the virtual function table."),(0,r.kt)("h3",{id:"8what-is-a-virtual-function-table-"},"8.What is a virtual function table ?"),(0,r.kt)("p",null,"It is an array of pointers that point to the implementations of the virtual functions."),(0,r.kt)("h3",{id:"9can-we-have-virtual-constructors-"},"9.Can we have virtual constructors ?"),(0,r.kt)("p",null,"Constructor can not be virtual, because when constructor of a class is executed there is no vtable in the memory, means no virtual pointer defined yet. Hence the constructor should always be non-virtual."),(0,r.kt)("h3",{id:"10write-a-program-to-demonstrates-virtual-functions-"},"10.Write a program to Demonstrates Virtual Functions ?"),(0,r.kt)("p",null,"Purpose: Demonstrates Virtual Functions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Base {\npublic:\n    virtual void vfun() {\n        cout << \"Base's vfun() \\n\";\n    }\n};\n\nclass Der1 : public Base {\npublic:\n    virtual void vfun() {\n        cout << \"D1's vfun() \\n\";\n    }\n};\n\nclass Der2 : public Base {\npublic:\n    virtual void vfun() {\n        cout << \"D2's vfun() \\n\";\n    }\n};\n\nvoid main() {\n    Base b, * bptr;\n    Der1 d1;\n    Der2 d2;\n\n    bptr = &b;\n    bptr->vfun(); // Base's vfun()\n\n    bptr = &d1;\n    bptr->vfun(); // D1's vfun()\n\n    bptr = &d2;\n    bptr->vfun(); // D2's vfun()\n}\n\nOUTPUT\nBase's vfun()\nD1's vfun()\nD2's vfun()\n")),(0,r.kt)("h3",{id:"11explain-about-function-overloading-"},"11.Explain about Function Overloading ?"),(0,r.kt)("p",null,"Function overloading is the process of using the same name for two or more functions."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Use different types of parameters.\n"),(0,r.kt)("li",{parentName:"ol"},"Use different number of parameters.")),(0,r.kt)("h3",{id:"12what-are-the-senarios-that-function-overloading-misunderstood-"},"12.What are the senarios that Function Overloading misunderstood ?"),(0,r.kt)("p",null,"A. Two functions differing only in their return types cannot be overloaded:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int fun1(int i)\nfloat fun2(int i)                           \n")),(0,r.kt)("p",null,"B. Ambiguity due to Default arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int fun1(int i)\nint fun2(int i, int j = 1)                      \n")),(0,r.kt)("p",null,"C. Ambiguity due to normal & reference arguments"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int fun1(int i)\nint fun2(int &i)                        \n")),(0,r.kt)("p",null,"D. Sometimes two function declarations will appear to be different when in fact they don\u2019t."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int fun1(int *p)\nint fun2(int p[])\n")),(0,r.kt)("h3",{id:"13what-is-name-mangling-or-name-decoration-"},"13.What is NAME MANGLING or NAME DECORATION ?"),(0,r.kt)("p",null,"C++ Compiler changes names of all functions definitions and calls while compiling the program. This is known as NAME MANGLING or NAME DECORATION."),(0,r.kt)("h3",{id:"14explain-about-operator-overloading-"},"14.Explain about Operator overloading ?"),(0,r.kt)("p",null,"Operator overloading means giving capability to the operator to work on different types of operands other than basic types."),(0,r.kt)("p",null,"The operators +, *  etc. work on operands of type int, float etc. we can overload these operators by giving them the capability to work on user-defined data types."),(0,r.kt)("h3",{id:"15what-are-the-operators-that-cannot-be-overloaded-"},"15.What are the Operators that cannot be overloaded ?"),(0,r.kt)("p",null,"Table:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"sizeof\tSize of operator"),(0,r.kt)("li",{parentName:"ol"},"?:\tConditional operator"),(0,r.kt)("li",{parentName:"ol"},"::\tScope resolution operator"),(0,r.kt)("li",{parentName:"ol"},".\tMembership operator"),(0,r.kt)("li",{parentName:"ol"},".*\tPointer-to-member operator")),(0,r.kt)("h3",{id:"16write-the-syntax-for-operator-overloading-"},"16.Write the Syntax for Operator overloading ?"),(0,r.kt)("p",null,"Syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"ret_type className::operator op(arg_list)\n{\n\n}\n")),(0,r.kt)("p",null,"Where op is operator ( +, -, * \u2026)"),(0,r.kt)("h3",{id:"17write-a-program-to-demonstrate-operator-overloading-"},"17.Write a program to demonstrate Operator overloading ?"),(0,r.kt)("p",null,"Purpose: demonstrate Operator overloading "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"struct data {int i; };\n\n//Post Increment\n    data operator ++ (data x, int) {\n    data t;\n    t.i = x.i;\n    x.i = x.i + 1;\n    return t;\n}\n\n//Pre Increment\ndata operator ++ (data x) {\n    data t;\n    x.i = x.i + 1;\n    t.i = x.i;\n    return t;\n}\n\nvoid main() {\n    data d;\n    d.i = 1;\n    //d++;\n    ++d;\n    cout<<d.i;\n}\n")))}d.isMDXComponent=!0}}]);