"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[7311],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},b=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),b=r,f=p["".concat(s,".").concat(b)]||p[b]||m[b]||o;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},51499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(87462),r=(n(67294),n(3905));const o={tags:["C++"]},i="Size Matters (C++)",l={permalink:"/blog/2011/09/18/size-matters-c",source:"@site/blog/2011-09-18-size-matters-c.md",title:"Size Matters (C++)",description:"C++ class have",date:"2011-09-18T00:00:00.000Z",formattedDate:"September 18, 2011",tags:[{label:"C++",permalink:"/blog/tags/c"}],readingTime:1.715,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["C++"]},prevItem:{title:"Memory Layout of a class (C++) Object",permalink:"/blog/2011/09/18/memory-layout-of-a-class-c-object"},nextItem:{title:"Variable arguments handling in C/C++",permalink:"/blog/2011/09/18/variable-arguments-handling"}},s={authorsImageUrls:[]},c=[{value:"Data Members",id:"data-members",level:2},{value:"Members Functions",id:"members-functions",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"C++ class have"),(0,r.kt)("p",null,"A. Data Members\nB. Members Functions"),(0,r.kt)("h2",{id:"data-members"},"Data Members"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Static Data Member The size of a class object with only Static data members irrespective of Data Type (say float, long e.tc.) is\xa0equal to ",(0,r.kt)("a",{parentName:"li",href:"blog/2011/09/18/why-size-of-an-empty-c-class-not-zero"},"one Byte (~ size of Empty class)"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"    class CStaticDataMemberCls\n    {\n    public:\n    static int i;\n    static float f;\n    };\n\n\nvoid main() {\n    CStaticDataMemberCls objSDMC;\n    cout<<objSDMC;\n    }\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Non Static Data Member The size of a class with non static data members is equal to sum of the data type size i.e. size of int = 4 size of float = 4 so total = 8")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"    class CNonStaticDataMemberCls\n    {\n    public:\n    int i;\n    float f;\n    };\n\n\nvoid main() {\n    CNonStaticDataMemberCls objNSDMC;\n    cout<<objNSDMC;\n    }\n")),(0,r.kt)("h2",{id:"members-functions"},"Members Functions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Static Members Functions"),(0,r.kt)("li",{parentName:"ol"},"Non Static Members Functions")),(0,r.kt)("p",null,"As Static Members Functions and Non static Members Functions are hoisted outside the class object. The size of the class will also be equal to ",(0,r.kt)("a",{parentName:"p",href:"blog/2011/09/18/why-size-of-an-empty-c-class-not-zero"},"one Byte (~ size of Empty class)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class CMemberFunctionsCls\n{\npublic:\n    int fun1() { return 1; }\n    static int staticFun() { return 1; }\n\n};\n\nvoid main()\n{\n    CMemberFunctionsCls objMFC;\n    cout<<objMFC;\n}\n")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"Virtual Members Functions If a class consists of virtual functions a table of pointers(i.e. Virtual Table) to virtual functions is generated for each class. And a pointer (vptr) to the created Virtual Table is inserted with in each class object. So the size of CVirtualFunctionCls object will be 4 Bytes which is nothing but a size of vptr.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"    class CVirtualFunctionCls\n    {\n    public:\n    virtual ~CVirtualFunctionCls() {}\n        virtual void virtualFun1() {}\n    virtual void virtualFun2() {}\n    };\n\n\nvoid main() {\n    CVirtualFunctionCls objVFC;\n    cout<<objVFC;\n}\n")),(0,r.kt)("p",null,"Let us see the class with all the above members"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"class Sample\n{\npublic:\n     Sample() {};\n\n     virtual ~Sample() {}\n     virtual void virtualFun1() {}\n     virtual void virtualFun2() {}\n\n     void normalFun() {}\n\n     static int getCount() //static function\n     {\n       return nCount;\n     }\n\nprivate:\n     int i;\n     static int nCount;\n};\n\nvoid main()\n{\n    Sample obj;\n    cout<<obj;\n}\n\n")))}m.isMDXComponent=!0}}]);