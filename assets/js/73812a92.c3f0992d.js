"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[55869],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>C});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=i.createContext({}),d=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return i.createElement(p.Provider,{value:n},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=d(t),u=a,C=m["".concat(p,".").concat(u)]||m[u]||s[u]||r;return t?i.createElement(C,l(l({ref:n},c),{},{components:t})):i.createElement(C,l({ref:n},c))}));function C(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var d=2;d<r;d++)l[d]=t[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},57875:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=t(87462),a=(t(67294),t(3905));const r={},l="Quick Tips",o={unversionedId:"articles/MFC/Quick",id:"articles/MFC/Quick",title:"Quick Tips",description:"Creating an SDI/MDI application that is initially maximized",source:"@site/docs/articles/MFC/Quick.md",sourceDirName:"articles/MFC",slug:"/articles/MFC/Quick",permalink:"/docs/articles/MFC/Quick",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ATL, ActiveX FAQ",permalink:"/docs/articles/MFC/COM/atl-faq"},next:{title:"Splitter Window",permalink:"/docs/articles/MFC/SplitterWindow"}},p={},d=[{value:"Creating an SDI/MDI application that is initially maximized",id:"creating-an-sdimdi-application-that-is-initially-maximized",level:2},{value:"Creating a CDC from a HDC",id:"creating-a-cdc-from-a-hdc",level:2},{value:"To fill the Background of the client area with a bitmap",id:"to-fill-the-background-of-the-client-area-with-a-bitmap",level:2},{value:"To fill the Background of the client area with a desired color keeping the text in the client area unchanged",id:"to-fill-the-background-of-the-client-area-with-a-desired-color-keeping-the-text-in-the-client-area-unchanged",level:2},{value:"MFC Dialog creation",id:"mfc-dialog-creation",level:2},{value:"Programmatically terminate MFC application",id:"programmatically-terminate-mfc-application",level:2},{value:"Limiting the maximum and minimum sizing of a Frame Window",id:"limiting-the-maximum-and-minimum-sizing-of-a-frame-window",level:2},{value:"Centering an Application Frame Window to desktop",id:"centering-an-application-frame-window-to-desktop",level:2},{value:"Minimal MFC Window",id:"minimal-mfc-window",level:2},{value:"Making first MDI child window start out maximized",id:"making-first-mdi-child-window-start-out-maximized",level:2},{value:"Remove \u2018Untitled\u2019 window caption",id:"remove-untitled-window-caption",level:2}],c={toc:d},m="wrapper";function s(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,i.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"quick-tips"},"Quick Tips"),(0,a.kt)("h2",{id:"creating-an-sdimdi-application-that-is-initially-maximized"},"Creating an SDI/MDI application that is initially maximized"),(0,a.kt)("p",null," To Creating an SDI/MDI application that is initially maximized Pass ",(0,a.kt)("inlineCode",{parentName:"p"},"SW_SHOWMAXIMIZED")," as paramater to ",(0,a.kt)("inlineCode",{parentName:"p"},"m_pMainWnd->ShowWindow()")," in the  in the ",(0,a.kt)("inlineCode",{parentName:"p"},"CWinApp::InitInstance()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// SDI/MDI application that is initially maximized\nBOOL CWindowTitleApp::InitInstance()\n{\n :\n :\n ////////////////////////////////////////////////////////////////////////////\n // To Create an SDI/MDI application that is initially maximized           //\n ////////////////////////////////////////////////////////////////////////////\n m_pMainWnd->ShowWindow(SW_SHOWMAXIMIZED);\n ////////////////////////////////////////////////////////////////////////////\n m_pMainWnd->UpdateWindow();\n m_pMainWnd->DragAcceptFiles();\n return TRUE;\n}\n")),(0,a.kt)("h2",{id:"creating-a-cdc-from-a-hdc"},"Creating a CDC from a HDC"),(0,a.kt)("p",null," If we get handle to a DC and sometimes we might want to create a CDC from that. One example is owner-drawn lists, combos, and buttons. we will receive a draw item message with a hDC. The below code can be used to convert hdc into CDC."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// NOTE: This technique for any of the other MFC class/ Windows handle pairs too.\n// Creating a CDC from a HDC\nvoid MyList::DrawItem(LPDRAWITEMSTRUCT lpDrawItem)\n{\n CDC* pDC;\n pDC = CDC:FromHandle(lpDrawItem->hDC);\n}\n\n")),(0,a.kt)("h2",{id:"to-fill-the-background-of-the-client-area-with-a-bitmap"},"To fill the Background of the client area with a bitmap"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"}," BOOL CMySDIView::OnEraseBkgnd(CDC* pDC)\n{\n CDC mymem;\n //Create a dc to represent display surface\n mymem.CreateCompatibleDC(pDC);\n \n CBitmap bmp;\n bmp.LoadBitmap(IDB_MYBITMAP);\n mymem.SelectObject(&bmp);\n \n    //BitBlt Copyes bitbamp from source (mymem) to destination (pDC)\n pDC->BitBlt(0,0,740, 520, &mymem,0,0, SRCCOPY);\n return 1; // CView::OnEraseBkgnd(pDC);\n}\n")),(0,a.kt)("h2",{id:"to-fill-the-background-of-the-client-area-with-a-desired-color-keeping-the-text-in-the-client-area-unchanged"},"To fill the Background of the client area with a desired color keeping the text in the client area unchanged"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"BOOL CMySDIView::OnEraseBkgnd(CDC* pDC)\n{\n    CRect r;\n    //GetClientRect gets the width & height of the client area of             \n    //the window\n GetClientRect(&r);\n CBrush br(RGB(255,250,100));\n pDC->SelectObject(br);\n pDC->FillRect(r,&br);\n  \n return TRUE;\n}\n")),(0,a.kt)("h2",{id:"mfc-dialog-creation"},"MFC Dialog creation"),(0,a.kt)("p",null," Use the ",(0,a.kt)("inlineCode",{parentName:"p"},"CWnd::CenterWindow")," method to center the dialog. Write ",(0,a.kt)("inlineCode",{parentName:"p"},"CenterWindow()")," method in the OnInitDialog() method."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"BOOL CMyDialog::OnInitDialog()\n{     \n    CenterWindow();\n    return TRUE;\n} \n")),(0,a.kt)("h2",{id:"programmatically-terminate-mfc-application"},"Programmatically terminate MFC application"),(0,a.kt)("p",null,"MFC does not provide a public function to exit an application. The following method shutdowns the Application. The method simply sends a ",(0,a.kt)("inlineCode",{parentName:"p"},"WM_CLOSE")," message to application\u2019s mainframe window."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void CmfcApp::ExitApplication()\n{\n     if(AfxGetApp()->m_pMainWnd != NULL))\n     {\n          AfxGetApp()->m_pMainWnd->SendMessage(WM_CLOSE);\n     }\n}\n")),(0,a.kt)("h2",{id:"limiting-the-maximum-and-minimum-sizing-of-a-frame-window"},"Limiting the maximum and minimum sizing of a Frame Window"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Define Min and Mix size in pixels"),(0,a.kt)("li",{parentName:"ol"},"Handle the ",(0,a.kt)("inlineCode",{parentName:"li"},"WM_GETMINMAXINFO")," message in a ",(0,a.kt)("inlineCode",{parentName:"li"},"CFrameWnd")," derived class.  The MINMAXINFO struct sets limits on the entire window, we need to take into account scroll bars, toolbars,  etc")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Min and Mix size in pixels\n#define MINX  500\n#define MINY  300\n#define MAXX  600\n#define MAXY  400\nvoid CMainFrame::OnGetMinMaxInfo(MINMAXINFO* lpMMI)\n{\n  CRect rectWnd;\n  CRect rectClient;\n  GetWindowRect(&rectWnd);\n  GetClientRect(&rectClient);\n  // get offset of toolbars, scrollbars, etc.\n  int nWidthOffset = rectWnd.Width() - rectClient.Width();\n  int nHeightOffset = rectWnd.Height() - rectClient.Height();\n  lpMMI->ptMinTrackSize.x = MINX + nWidthOffset;\n  lpMMI->ptMinTrackSize.y = MINY + nHeightOffset;\n  lpMMI->ptMaxTrackSize.x = MAXX + nWidthOffset;\n  lpMMI->ptMaxTrackSize.y = MAXY + nHeightOffset;\n  CFrameWnd::OnGetMinMaxInfo(lpMMI);\n}\n\n")),(0,a.kt)("h2",{id:"centering-an-application-frame-window-to-desktop"},"Centering an Application Frame Window to desktop"),(0,a.kt)("p",null,"To center Application\u2019s Frame Window call ",(0,a.kt)("inlineCode",{parentName:"p"},"CenterWindow()")," in MainFrame\u2019s ",(0,a.kt)("inlineCode",{parentName:"p"},"OnCreate()")," fucntion.  See the code snippet below"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)\n{\n  if (CFrameWnd::OnCreate(lpCreateStruct) == -1)\n   return -1;\n  //////////////////////////////////////////////////////////\n  //  Center Application Frame Window                     //\n  /////////////////////////////////////////////////////////\n  CWnd* pWnd = GetDesktopWindow();\n  CenterWindow(pWnd);\n  //////////////////////////////////////////////////////////\n  return 0;\n}\n\n")),(0,a.kt)("h2",{id:"minimal-mfc-window"},"Minimal MFC Window"),(0,a.kt)("p",null,"  We need at least two clases derived to construct an window"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Window class / Frame class ",(0,a.kt)("inlineCode",{parentName:"li"},"CMainFrame")," which is derived from ",(0,a.kt)("inlineCode",{parentName:"li"},"CFrameWnd")),(0,a.kt)("li",{parentName:"ol"},"Application class ",(0,a.kt)("inlineCode",{parentName:"li"},"CMyApp")," which is derived from ",(0,a.kt)("inlineCode",{parentName:"li"},"CWinApp"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'#include <afxwin.h>\nclass CMainFrame : public CFrameWnd\n{\npublic:\n      CMainFrame()\n      {\n            Create(NULL, "HELLO MFC");\n      }\nprotected:\n      afx_msg void OnPaint()\n      {\n       CPaintDC dc( this);\n       dc.TextOut(100, 100, "This is the my MFC window" );\n      }\n      afx_msg void OnLButtonDown(UINT nFlags, CPoint point)\n      {\n            AfxMessageBox( "Mouse OnLButtonDown !!");\n            CFrameWnd::OnLButtonDown(nFlags, point);\n      }\n       // Declare the Message Map\n      DECLARE_MESSAGE_MAP()\n};\n// Define the Message Map out side the class Definition\nBEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd)\n      ON_WM_PAINT()       // Paint Message\n      ON_WM_LBUTTONDOWN() // Mouse LButton down message\nEND_MESSAGE_MAP()\n\n\nclass CMyApp : public CWinApp\n{\npublic:\n       virtual BOOL InitInstance()\n      {\n            m_pMainWnd = new CMainFrame();\n            m_pMainWnd->ShowWindow(SW_SHOWNORMAL);\n            m_pMainWnd->UpdateWindow();\n             return TRUE;\n      }\n};\n// The one and only Application Object\nCMyApp theApp;\n')),(0,a.kt)("h2",{id:"making-first-mdi-child-window-start-out-maximized"},"Making first MDI child window start out maximized"),(0,a.kt)("p",null," To make first MDI child window start out maximized"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add a ",(0,a.kt)("inlineCode",{parentName:"li"},"ActivateFrame()")," which is a ",(0,a.kt)("inlineCode",{parentName:"li"},"CChildFrame")," virtual function"),(0,a.kt)("li",{parentName:"ol"},"Modify the function with the below code snnipet")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"void CChildFrame::ActivateFrame(int nCmdShow)\n{\n       ////////////////////////////////////////////////////////////////////////////\n       // To make first MDI child window start out maximized                     //\n       ////////////////////////////////////////////////////////////////////////////\n      m_pMainWnd->ShowWindow(SW_SHOWMAXIMIZED);\n      \n    // if another window is open, use default\n    if(GetMDIFrame()->MDIGetActive())\n      {\n        CMDIChildWnd::ActivateFrame(nCmdShow);\n      }\n    else // else open the child window maximized.\n      {\n        CMDIChildWnd::ActivateFrame(SW_SHOWMAXIMIZED);\n      }\n       ////////////////////////////////////////////////////////////////////////////\n}\n\n")),(0,a.kt)("h2",{id:"remove-untitled-window-caption"},"Remove \u2018Untitled\u2019 window caption"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Override the ",(0,a.kt)("inlineCode",{parentName:"li"},"PreCreateWindow()")," function in ",(0,a.kt)("inlineCode",{parentName:"li"},"CMainFrame")," class"),(0,a.kt)("li",{parentName:"ol"},"Modify the ",(0,a.kt)("inlineCode",{parentName:"li"},"CREATESTRUCT")," style by adding the below code")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs)\n{\n  if( !CFrameWnd::PreCreateWindow(cs) ){\n   return FALSE;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////\n  // To remove 'Untitled' in main window caption //\n  ////////////////////////////////////////////////////////////////////////////\n  cs.style &= ~FWS_ADDTOTITLE ;\n\n  return TRUE;\n}\n")))}s.isMDXComponent=!0}}]);