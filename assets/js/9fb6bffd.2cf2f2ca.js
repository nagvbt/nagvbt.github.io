"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[4951],{34063:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=t(85893),r=t(11151);const a={tags:["MFC"]},o="Limiting the maximum and minimum sizing  of a Frame Window",s={permalink:"/blog/2012/03/17/limiting-maximum-minimum-sizing-of-a-window",source:"@site/blog/2012-03-17-limiting-maximum-minimum-sizing-of-a-window.md",title:"Limiting the maximum and minimum sizing  of a Frame Window",description:"To limit the maximum and minimum size of a Frame Window.",date:"2012-03-17T00:00:00.000Z",formattedDate:"March 17, 2012",tags:[{label:"MFC",permalink:"/blog/tags/mfc"}],readingTime:.675,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["MFC"]},unlisted:!1,prevItem:{title:"Reading Books",permalink:"/blog/2012/03/25/reading-books"},nextItem:{title:"Centering an Application Frame Window to desktop",permalink:"/blog/2012/03/16/centering-an-application-frame-window-to-desktop"}},m={authorsImageUrls:[]},c=[];function l(n){const e={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.p,{children:"To limit the maximum and minimum size of a Frame Window."}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Define Min and Mix size in pixels"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:["Handle the ",(0,i.jsx)(e.strong,{children:"WM_GETMINMAXINFO"})," message in a CFrameWnd derived class. \xa0The MINMAXINFO struct sets limits on the entire window, we need to take into account scroll bars,\xa0toolbars, \xa0etc"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:" // Min and Mix size in pixels\r\n# define MINX 500\r\n# define MINY 300\r\n# define MAXX 600\r\n# define MAXY 400\r\n\r\nvoid CMainFrame::OnGetMinMaxInfo(MINMAXINFO* lpMMI) { \r\n  CRect rectWnd; CRect rectClient;\r\n  GetWindowRect(&rectWnd); \r\n  GetClientRect(&rectClient);\r\n\r\n  // get offset of toolbars, scrollbars, etc. \r\n  int nWidthOffset = rectWnd.Width() - rectClient.Width(); \r\n  int nHeightOffset = rectWnd.Height() - rectClient.Height();\r\n\r\n  lpMMI->ptMinTrackSize.x = MINX + nWidthOffset; \r\n  lpMMI->ptMinTrackSize.y = MINY + nHeightOffset;\r\n  lpMMI->ptMaxTrackSize.x = MAXX + nWidthOffset;\r\n  lpMMI->ptMaxTrackSize.y = MAXY + nHeightOffset;\r\n\r\n  CFrameWnd::OnGetMinMaxInfo(lpMMI);\r\n\r\n}\n"})})]})}function d(n={}){const{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(l,{...n})}):l(n)}},11151:(n,e,t)=>{t.d(e,{Z:()=>s,a:()=>o});var i=t(67294);const r={},a=i.createContext(r);function o(n){const e=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(a.Provider,{value:e},n.children)}}}]);