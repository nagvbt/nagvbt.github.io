"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[65022],{28453:(n,t,r)=>{r.d(t,{R:()=>l,x:()=>c});var e=r(96540);const o={},a=e.createContext(o);function l(n){const t=e.useContext(a);return e.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function c(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),e.createElement(a.Provider,{value:t},n.children)}},41855:n=>{n.exports=JSON.parse('{"permalink":"/blog/2012/04/01/expand-and-contract-a-mfc-dialog","source":"@site/blog/2012-04-01-expand-and-contract-a-mfc-dialog.md","title":"How to Expand and Contract a MFC Dialog ?","description":"This article gives the ability to make MFC dialogs expand or contract. The\xa0CExpandContractHelper simplifies the process to \xa0expand or contract MFC Dialog.","date":"2012-04-01T00:00:00.000Z","tags":[{"inline":true,"label":"MFC","permalink":"/blog/tags/mfc"}],"readingTime":2.68,"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["MFC"]},"unlisted":false,"prevItem":{"title":"Simple Stack Program in C++","permalink":"/blog/2012/04/02/stack"},"nextItem":{"title":"Tutorial to create MFC ActiveX Control which can be used in HTML Pages","permalink":"/blog/2012/04/01/mfc-activex-control-which-can-be-used-in-html-pages"}}')},76086:(n,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>s,frontMatter:()=>l,metadata:()=>e,toc:()=>d});var e=r(41855),o=r(74848),a=r(28453);const l={tags:["MFC"]},c="How to Expand and Contract a MFC Dialog ?",i={authorsImageUrls:[]},d=[];function p(n){const t={code:"code",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"This article gives the ability to make MFC dialogs expand or contract. The\xa0CExpandContractHelper simplifies the process to \xa0expand or contract MFC Dialog."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Steps to use CExpandContractHelper\xa0:"})}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:"Create Dialog Based application"}),"\n",(0,o.jsx)(t.li,{children:"Place the controls as shown below"}),"\n",(0,o.jsx)(t.li,{children:"Add the CExpandContractHelper.cpp & CExpandContractHelper.h files to the project"}),"\n",(0,o.jsx)(t.li,{children:"Create the in the Dialog class CExpandContractHelper* m_pECH;"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"CExpandDialogDlg::CExpandDialogDlg(CWnd* pParent =NULL)\r\n    : CDialog(CExpandDialogDlg::IDD, pParent)\r\n{\r\n    m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);\r\n    //Step - 1 Create CExpandContractHelper\r\n    m_pECH = new CExpandContractHelper(IDC_PIC_START, IDC_PIC_END, this);\r\n}\n"})}),"\n",(0,o.jsxs)(t.ol,{start:"5",children:["\n",(0,o.jsx)(t.li,{children:"Call ExpandContract in the OnInitDialog"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"BOOL CExpandDialogDlg::OnInitDialog()\r\n{\r\n    CDialog::OnInitDialog();\r\n    SetIcon(m_hIcon, TRUE);         // Set big icon\r\n    SetIcon(m_hIcon, FALSE);        // Set small icon\r\n    //Step - 2 Call ExpandContract\r\n    m_pECH->ExpandContract((CButton*)GetDlgItem(IDC_BN_EXPAND_CONTRACT));\r\n    return TRUE;\r\n}\n"})}),"\n",(0,o.jsxs)(t.ol,{start:"6",children:["\n",(0,o.jsx)(t.li,{children:"Call ExpandContract in the button handler OnBnClickedBnExpandContract"}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"void CExpandDialogDlg::OnBnClickedBnExpandContract()\r\n{\r\n    //Step - 3 Call ExpandContract\r\n    m_pECH->ExpandContract((CButton*)GetDlgItem(IDC_BN_EXPAND_CONTRACT));\r\n}\n"})}),"\n",(0,o.jsx)(t.p,{children:"CExpandContractHelper class"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:"//////////////////////////////////////////////////\r\n// Purpose: To exapand or contract a dialog control\r\n//////////////////////////////////////////////////\r\nclass CExpandContractHelper\r\n{\r\npublic:\r\n    CExpandContractHelper(UINT nStart, UINT nEnd, CDialog\\* dlg);\r\n    ~CExpandContractHelper(void);\r\nprotected:\r\n    // ID of start picture control\r\n    UINT m_nStart;\r\n    // ID of end picture control\r\n    UINT m_nEnd;\r\n    CDialog* m_dlg;\r\n    CButton* m_pButton;\r\n    CString m_sExpand;\r\n    CString m_sContract;\r\npublic:\r\n    void ExpandContract(CButton* pButton);\r\nprotected:\r\n    BOOL IsExpand();\r\n};\n"})}),"\n",(0,o.jsx)(t.p,{children:"CExpandContractHelper.cpp"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-cpp",children:'#include "StdAfx.h"\r\n#include "ExpandContractHelper.h"\r\nCExpandContractHelper::~CExpandContractHelper(void)\r\n{\r\n}\r\nCExpandContractHelper::CExpandContractHelper(\r\n    UINT nStart, // Start Picture control ID\r\n    UINT nEnd,   // End  Picture control ID\r\n    CDialog *dlg // Dialog pointer\r\n    )\r\n{\r\n    m_nStart = nStart;\r\n    m_nEnd   = nEnd;\r\n    m_dlg    = dlg;\r\n}\r\nBOOL CExpandContractHelper::IsExpand()\r\n{\r\n    // 1 - Load button caption Expand/Contact\r\n    m_sExpand = "&amp;Expand >>";\r\n    m_sContract = "&lt;&lt; &amp;Contract";\r\n    // 2 - Find out if we need to expand or collapse the dialog\r\n    CString strCaption;\r\n    m_pButton->GetWindowText( strCaption );\r\n    BOOL bExpand = ( strCaption == m_sExpand ); // Collapse by default\r\n    return bExpand;\r\n}\r\nvoid CExpandContractHelper::ExpandContract(\r\n    CButton* pButton  // Expand Contract button pointer\r\n    )\r\n{\r\n    m_pButton = pButton;\r\n    // 3 - Get current dialog window rectangle\r\n    CRect rcDialog;\r\n    m_dlg->GetWindowRect( &amp;rcDialog );\r\n    int nNewHeight = -1;\r\n    if( IsExpand() )\r\n    {\r\n        // 4a - Change Expand/Contract button caption\r\n        pButton->SetWindowText( m_sContract );\r\n        // 4b - Calculate new dialog height\r\n        CWnd* pWndLarge = m_dlg->GetDlgItem( m_nEnd );\r\n        ASSERT_VALID( pWndLarge );\r\n        CRect rcLarge;\r\n        pWndLarge->GetWindowRect( &amp;rcLarge );\r\n        nNewHeight = rcLarge.top-rcDialog.top;\r\n    }\r\n    else\r\n    {\r\n        // 5a - Change Expand/Contract button caption\r\n        pButton->SetWindowText( m_sExpand );\r\n        // 5b - Calculate new dialog height\r\n        CWnd* pWndSmall = m_dlg->GetDlgItem( m_nStart );\r\n        ASSERT_VALID( pWndSmall );\r\n        pWndSmall->ShowWindow(FALSE);\r\n        CRect rcSmall;\r\n        pWndSmall->GetWindowRect( &amp;rcSmall );\r\n        nNewHeight = rcSmall.top-rcDialog.top;\r\n    }\r\n    // 6 - Set new dialog height\r\n    ASSERT( nNewHeight > 0 );\r\n    m_dlg->SetWindowPos( NULL, 0, 0,\r\n                        rcDialog.Width(), nNewHeight,\r\n                        SWP_NOMOVE | SWP_NOZORDER );\r\n    // 7 - Set the enabled state for each control depending on whether\r\n    // the control is currently visible or not\r\n    CWnd* pWndControl = m_dlg->GetWindow( GW_CHILD );\r\n    while( pWndControl != NULL )\r\n    {\r\n        CRect rcControl;\r\n        pWndControl->GetWindowRect( &amp;rcControl );\r\n        pWndControl->EnableWindow( rcControl.top &lt;= rcDialog.top + nNewHeight );\r\n        pWndControl = pWndControl->GetWindow( GW_HWNDNEXT );\r\n    }\r\n    // 8 - Check if a control still has the focus\r\n    // (can lose it if the active control becomes disabled)\r\n    CWnd* pWndActiveControl = CWnd::GetFocus();\r\n    if( pWndActiveControl == NULL )\r\n    {\r\n        // 9 - Set focus to "first" control on dialog\r\n        CWnd* pWndFirstControl = m_dlg->GetNextDlgTabItem( NULL );\r\n        ASSERT_VALID( pWndFirstControl );\r\n        ASSERT( pWndFirstControl->IsWindowEnabled() );\r\n        pWndFirstControl->SetFocus();\r\n    }\r\n}\n'})})]})}function s(n={}){const{wrapper:t}={...(0,a.R)(),...n.components};return t?(0,o.jsx)(t,{...n,children:(0,o.jsx)(p,{...n})}):p(n)}}}]);