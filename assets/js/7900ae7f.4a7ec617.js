"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["60969"],{83589:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>o,default:()=>d,toc:()=>u,metadata:()=>i,assets:()=>c,contentTitle:()=>s});var i=JSON.parse('{"id":"C/Functions","title":"Functions","description":"1. Define a C function ?","source":"@site/docs/C/Functions.md","sourceDirName":"C","slug":"/C/Functions","permalink":"/docs/C/Functions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"C","previous":{"title":"Iterative Statements","permalink":"/docs/C/Iterative"},"next":{"title":"Arrays","permalink":"/docs/C/Arrays"}}'),a=t(85893),r=t(50065);let o={sidebar_position:7},s="Functions",c={},u=[{value:"1. Define a C function ?",id:"1-define-a-c-function-",level:3},{value:"2. Explain about parts of a function ?",id:"2-explain-about-parts-of-a-function-",level:3},{value:"3. Explain about function Declaration and Definition?",id:"3-explain-about-function-declaration-and-definition",level:3},{value:"4. What are the Advantages of using functions ?",id:"4-what-are-the-advantages-of-using-functions-",level:3},{value:"5. Write a program to perform addition of two numbers using function?",id:"5-write-a-program-to-perform-addition-of-two-numbers-using-function",level:3},{value:"6. Explain about Passing Parameters to a Function ?",id:"6-explain-about-passing-parameters-to-a-function-",level:3},{value:"7. Write a program to swap two numbers using pass by reference?",id:"7-write-a-program-to-swap-two-numbers-using-pass-by-reference",level:3}];function l(n){let e={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"functions",children:"Functions"})}),"\n",(0,a.jsx)(e.h3,{id:"1-define-a-c-function-",children:"1. Define a C function ?"}),"\n",(0,a.jsx)(e.p,{children:"Definition: A \u2018Function\u2019 can be defined as a group of statements which performs a certain task."}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.em,{children:(0,a.jsx)(e.strong,{children:"Syntax:"})}),"\r\nreturnType functionName ( parameter1, parameter2, ...)"]}),"\n","\n",(0,a.jsx)(e.h3,{id:"2-explain-about-parts-of-a-function-",children:"2. Explain about parts of a function ?"}),"\n",(0,a.jsx)(e.p,{children:"A function definition in C programming language consists of a function header and a function body. Here are all the parts of a function:"}),"\n",(0,a.jsx)(e.p,{children:"return_type function_name( parameter list )"}),"\n","\n",(0,a.jsx)(e.p,{children:"a. Return Type: A function may return a value. The return_type is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword void."}),"\n",(0,a.jsx)(e.p,{children:"b. Function Name: This is the actual name of the function. The function name and the parameter list together constitute the function signature."}),"\n",(0,a.jsx)(e.p,{children:"c. Parameters: A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters."}),"\n",(0,a.jsx)(e.p,{children:"d. Function Body: The function body contains a collection of statements that define what the function does."}),"\n",(0,a.jsx)(e.p,{children:"Note: returnType specifies the type of data that the function returns. A function may return any type of data except an Array."}),"\n",(0,a.jsx)(e.h3,{id:"3-explain-about-function-declaration-and-definition",children:"3. Explain about function Declaration and Definition?"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"Declaration: *\r\nA function declaration tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately.\r\nA function declaration has the following parts:\r\nreturn_type function_name( parameter list );\r\nFor the above defined function max(), following is the function declaration:\r\nint max(int num1, int num2);\r\nParameter names are not important in function declaration only their type is required, so following is also valid declaration:\r\nint max(int, int);\r\nFunction declaration is required when we define a function in one source file and you call that function in another file. In such case we should declare the function at the top of the file calling the function."}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:"Definition: *\r\nWhen a function is defined at any place in the program then it is called function definition. At the time of definition of a function actual logic is implemented with-in the function."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"4-what-are-the-advantages-of-using-functions-",children:"4. What are the Advantages of using functions ?"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Writing functions avoids rewriting the same code"}),"\n",(0,a.jsx)(e.li,{children:"Using functions it becomes easier to write programs and keep track of what they are doing."}),"\n"]}),"\n",(0,a.jsx)(e.h3,{id:"5-write-a-program-to-perform-addition-of-two-numbers-using-function",children:"5. Write a program to perform addition of two numbers using function?"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\r\n//Function Declaration\r\nint addition (int a, int b);\r\n\r\nint main ()\r\n{\r\n  int z;\r\n  z = addition (5,3);\r\n  printf("The result is = %d \\n",z);\r\n  return 0;\r\n}\r\n\r\n//Function definition\r\nint addition (int a, int b)\r\n{\r\n  int Result;\r\n  Result = a + b;\r\n  return Result;\r\n}\r\n\r\nOUTPUT:\r\nThe result is =  8\n'})}),"\n",(0,a.jsx)(e.p,{children:"Program flow:\r\nIn the above example the function addition  performs a certain task Adding of two numbers.\r\nThe value of both arguments passed in the call (5 and 3) are copied to the local variables int a and int b within the function."}),"\n",(0,a.jsx)(e.p,{children:"The call to a function (addition (5,3)) is literally replaced by the value it returns (8)."}),"\n",(0,a.jsx)(e.h3,{id:"6-explain-about-passing-parameters-to-a-function-",children:"6. Explain about Passing Parameters to a Function ?"}),"\n",(0,a.jsx)(e.p,{children:"There are two ways to pass parameters to a function:"}),"\n",(0,a.jsx)(e.p,{children:"\u2022 Pass by Value: mechanism is used when you don't want to change the value of passed paramters. When parameters are passed by value then functions in C create copies of the passed in variables and do required processing on these copied variables."}),"\n",(0,a.jsx)(e.p,{children:"\u2022 Pass by Reference mechanism is used when you want a function to do the changes in passed parameters and reflect those changes back to the calling function. In this case only addresses of the variables are passed to a function so that function can work directly over the addresses."}),"\n",(0,a.jsx)(e.h3,{id:"7-write-a-program-to-swap-two-numbers-using-pass-by-reference",children:"7. Write a program to swap two numbers using pass by reference?"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\r\n \r\nvoid swap(int*, int*);\r\n \r\nint main()\r\n{\r\n   int x, y;\r\n \r\n   printf("Enter the value of x and y\\n");\r\n   scanf("%d%d",&x,&y);\r\n \r\n   printf("Before Swapping\\nx = %d\\ny = %d\\n", x, y);\r\n \r\n   swap(&x, &y); \r\n \r\n   printf("After Swapping\\nx = %d\\ny = %d\\n", x, y);\r\n \r\n   return 0;\r\n}\r\n \r\nvoid swap(int *a, int *b)\r\n{\r\n   int temp;\r\n \r\n   temp = *b;\r\n   *b   = *a;\r\n   *a   = temp;   \r\n}\n'})})]})}function d(n={}){let{wrapper:e}={...(0,r.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(l,{...n})}):l(n)}},50065:function(n,e,t){t.d(e,{Z:()=>s,a:()=>o});var i=t(67294);let a={},r=i.createContext(a);function o(n){let e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:o(n.components),i.createElement(r.Provider,{value:e},n.children)}}}]);