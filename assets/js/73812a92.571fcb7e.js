"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["54148"],{42698:function(n,e,i){i.r(e),i.d(e,{frontMatter:()=>d,default:()=>h,toc:()=>o,metadata:()=>t,assets:()=>c,contentTitle:()=>l});var t=JSON.parse('{"id":"articles/MFC/Quick","title":"Quick Tips","description":"Creating an SDI/MDI application that is initially maximized","source":"@site/docs/articles/MFC/Quick.md","sourceDirName":"articles/MFC","slug":"/articles/MFC/Quick","permalink":"/docs/articles/MFC/Quick","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"Articles","previous":{"title":"ATL, ActiveX FAQ","permalink":"/docs/articles/MFC/COM/atl-faq"},"next":{"title":"Splitter Window","permalink":"/docs/articles/MFC/SplitterWindow"}}'),r=i(85893),a=i(50065);let d={},l="Quick Tips",c={},o=[{value:"Creating an SDI/MDI application that is initially maximized",id:"creating-an-sdimdi-application-that-is-initially-maximized",level:2},{value:"Creating a CDC from a HDC",id:"creating-a-cdc-from-a-hdc",level:2},{value:"To fill the Background of the client area with a bitmap",id:"to-fill-the-background-of-the-client-area-with-a-bitmap",level:2},{value:"To fill the Background of the client area with a desired color keeping the text in the client area unchanged",id:"to-fill-the-background-of-the-client-area-with-a-desired-color-keeping-the-text-in-the-client-area-unchanged",level:2},{value:"MFC Dialog creation",id:"mfc-dialog-creation",level:2},{value:"Programmatically terminate MFC application",id:"programmatically-terminate-mfc-application",level:2},{value:"Limiting the maximum and minimum sizing of a Frame Window",id:"limiting-the-maximum-and-minimum-sizing-of-a-frame-window",level:2},{value:"Centering an Application Frame Window to desktop",id:"centering-an-application-frame-window-to-desktop",level:2},{value:"Minimal MFC Window",id:"minimal-mfc-window",level:2},{value:"Making first MDI child window start out maximized",id:"making-first-mdi-child-window-start-out-maximized",level:2},{value:"Remove \u2018Untitled\u2019 window caption",id:"remove-untitled-window-caption",level:2}];function s(n){let e={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,a.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"quick-tips",children:"Quick Tips"})}),"\n",(0,r.jsx)(e.h2,{id:"creating-an-sdimdi-application-that-is-initially-maximized",children:"Creating an SDI/MDI application that is initially maximized"}),"\n",(0,r.jsxs)(e.p,{children:["To Creating an SDI/MDI application that is initially maximized Pass ",(0,r.jsx)(e.code,{children:"SW_SHOWMAXIMIZED"})," as paramater to ",(0,r.jsx)(e.code,{children:"m_pMainWnd->ShowWindow()"})," in the  in the ",(0,r.jsx)(e.code,{children:"CWinApp::InitInstance()"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"// SDI/MDI application that is initially maximized\r\nBOOL CWindowTitleApp::InitInstance()\r\n{\r\n :\r\n :\r\n ////////////////////////////////////////////////////////////////////////////\r\n // To Create an SDI/MDI application that is initially maximized           //\r\n ////////////////////////////////////////////////////////////////////////////\r\n m_pMainWnd->ShowWindow(SW_SHOWMAXIMIZED);\r\n ////////////////////////////////////////////////////////////////////////////\r\n m_pMainWnd->UpdateWindow();\r\n m_pMainWnd->DragAcceptFiles();\r\n return TRUE;\r\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"creating-a-cdc-from-a-hdc",children:"Creating a CDC from a HDC"}),"\n",(0,r.jsx)(e.p,{children:"If we get handle to a DC and sometimes we might want to create a CDC from that. One example is owner-drawn lists, combos, and buttons. we will receive a draw item message with a hDC. The below code can be used to convert hdc into CDC."}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"// NOTE: This technique for any of the other MFC class/ Windows handle pairs too.\r\n// Creating a CDC from a HDC\r\nvoid MyList::DrawItem(LPDRAWITEMSTRUCT lpDrawItem)\r\n{\r\n CDC* pDC;\r\n pDC = CDC:FromHandle(lpDrawItem->hDC);\r\n}\r\n\n"})}),"\n",(0,r.jsx)(e.h2,{id:"to-fill-the-background-of-the-client-area-with-a-bitmap",children:"To fill the Background of the client area with a bitmap"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:" BOOL CMySDIView::OnEraseBkgnd(CDC* pDC)\r\n{\r\n CDC mymem;\r\n //Create a dc to represent display surface\r\n mymem.CreateCompatibleDC(pDC);\r\n \r\n CBitmap bmp;\r\n bmp.LoadBitmap(IDB_MYBITMAP);\r\n mymem.SelectObject(&bmp);\r\n \r\n    //BitBlt copy's bitbamp from source (mymem) to destination (pDC)\r\n pDC->BitBlt(0,0,740, 520, &mymem,0,0, SRCCOPY);\r\n return 1; // CView::OnEraseBkgnd(pDC);\r\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"to-fill-the-background-of-the-client-area-with-a-desired-color-keeping-the-text-in-the-client-area-unchanged",children:"To fill the Background of the client area with a desired color keeping the text in the client area unchanged"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"BOOL CMySDIView::OnEraseBkgnd(CDC* pDC)\r\n{\r\n    CRect r;\r\n    //GetClientRect gets the width & height of the client area of             \r\n    //the window\r\n GetClientRect(&r);\r\n CBrush br(RGB(255,250,100));\r\n pDC->SelectObject(br);\r\n pDC->FillRect(r,&br);\r\n  \r\n return TRUE;\r\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"mfc-dialog-creation",children:"MFC Dialog creation"}),"\n",(0,r.jsxs)(e.p,{children:["Use the ",(0,r.jsx)(e.code,{children:"CWnd::CenterWindow"})," method to center the dialog. Write ",(0,r.jsx)(e.code,{children:"CenterWindow()"})," method in the OnInitDialog() method."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"BOOL CMyDialog::OnInitDialog()\r\n{     \r\n    CenterWindow();\r\n    return TRUE;\r\n} \n"})}),"\n",(0,r.jsx)(e.h2,{id:"programmatically-terminate-mfc-application",children:"Programmatically terminate MFC application"}),"\n",(0,r.jsxs)(e.p,{children:["MFC does not provide a public function to exit an application. The following method shutdowns the Application. The method simply sends a ",(0,r.jsx)(e.code,{children:"WM_CLOSE"})," message to application\u2019s mainframe window."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"void CmfcApp::ExitApplication()\r\n{\r\n     if(AfxGetApp()->m_pMainWnd != NULL))\r\n     {\r\n          AfxGetApp()->m_pMainWnd->SendMessage(WM_CLOSE);\r\n     }\r\n}\n"})}),"\n",(0,r.jsx)(e.h2,{id:"limiting-the-maximum-and-minimum-sizing-of-a-frame-window",children:"Limiting the maximum and minimum sizing of a Frame Window"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Define Min and Mix size in pixels"}),"\n",(0,r.jsxs)(e.li,{children:["Handle the ",(0,r.jsx)(e.code,{children:"WM_GETMINMAXINFO"})," message in a ",(0,r.jsx)(e.code,{children:"CFrameWnd"})," derived class.  The MINMAXINFO struct sets limits on the entire window, we need to take into account scroll bars, toolbars,  etc"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"// Min and Mix size in pixels\r\n#define MINX  500\r\n#define MINY  300\r\n#define MAXX  600\r\n#define MAXY  400\r\nvoid CMainFrame::OnGetMinMaxInfo(MINMAXINFO* lpMMI)\r\n{\r\n  CRect rectWnd;\r\n  CRect rectClient;\r\n  GetWindowRect(&rectWnd);\r\n  GetClientRect(&rectClient);\r\n  // get offset of toolbars, scrollbars, etc.\r\n  int nWidthOffset = rectWnd.Width() - rectClient.Width();\r\n  int nHeightOffset = rectWnd.Height() - rectClient.Height();\r\n  lpMMI->ptMinTrackSize.x = MINX + nWidthOffset;\r\n  lpMMI->ptMinTrackSize.y = MINY + nHeightOffset;\r\n  lpMMI->ptMaxTrackSize.x = MAXX + nWidthOffset;\r\n  lpMMI->ptMaxTrackSize.y = MAXY + nHeightOffset;\r\n  CFrameWnd::OnGetMinMaxInfo(lpMMI);\r\n}\r\n\n"})}),"\n",(0,r.jsx)(e.h2,{id:"centering-an-application-frame-window-to-desktop",children:"Centering an Application Frame Window to desktop"}),"\n",(0,r.jsxs)(e.p,{children:["To center Application\u2019s Frame Window call ",(0,r.jsx)(e.code,{children:"CenterWindow()"})," in MainFrame\u2019s ",(0,r.jsx)(e.code,{children:"OnCreate()"})," fucntion.  See the code snippet below"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct)\r\n{\r\n  if (CFrameWnd::OnCreate(lpCreateStruct) == -1)\r\n   return -1;\r\n  //////////////////////////////////////////////////////////\r\n  //  Center Application Frame Window                     //\r\n  /////////////////////////////////////////////////////////\r\n  CWnd* pWnd = GetDesktopWindow();\r\n  CenterWindow(pWnd);\r\n  //////////////////////////////////////////////////////////\r\n  return 0;\r\n}\r\n\n"})}),"\n",(0,r.jsx)(e.h2,{id:"minimal-mfc-window",children:"Minimal MFC Window"}),"\n",(0,r.jsx)(e.p,{children:"We need at least two clases derived to construct an window"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Window class / Frame class ",(0,r.jsx)(e.code,{children:"CMainFrame"})," which is derived from ",(0,r.jsx)(e.code,{children:"CFrameWnd"})]}),"\n",(0,r.jsxs)(e.li,{children:["Application class ",(0,r.jsx)(e.code,{children:"CMyApp"})," which is derived from ",(0,r.jsx)(e.code,{children:"CWinApp"})]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:'#include <afxwin.h>\r\nclass CMainFrame : public CFrameWnd\r\n{\r\npublic:\r\n      CMainFrame()\r\n      {\r\n            Create(NULL, "HELLO MFC");\r\n      }\r\nprotected:\r\n      afx_msg void OnPaint()\r\n      {\r\n       CPaintDC dc( this);\r\n       dc.TextOut(100, 100, "This is the my MFC window" );\r\n      }\r\n      afx_msg void OnLButtonDown(UINT nFlags, CPoint point)\r\n      {\r\n            AfxMessageBox( "Mouse OnLButtonDown !!");\r\n            CFrameWnd::OnLButtonDown(nFlags, point);\r\n      }\r\n       // Declare the Message Map\r\n      DECLARE_MESSAGE_MAP()\r\n};\r\n// Define the Message Map out side the class Definition\r\nBEGIN_MESSAGE_MAP(CMainFrame, CFrameWnd)\r\n      ON_WM_PAINT()       // Paint Message\r\n      ON_WM_LBUTTONDOWN() // Mouse LButton down message\r\nEND_MESSAGE_MAP()\r\n\r\n\r\nclass CMyApp : public CWinApp\r\n{\r\npublic:\r\n       virtual BOOL InitInstance()\r\n      {\r\n            m_pMainWnd = new CMainFrame();\r\n            m_pMainWnd->ShowWindow(SW_SHOWNORMAL);\r\n            m_pMainWnd->UpdateWindow();\r\n             return TRUE;\r\n      }\r\n};\r\n// The one and only Application Object\r\nCMyApp theApp;\n'})}),"\n",(0,r.jsx)(e.h2,{id:"making-first-mdi-child-window-start-out-maximized",children:"Making first MDI child window start out maximized"}),"\n",(0,r.jsx)(e.p,{children:"To make first MDI child window start out maximized"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Add a ",(0,r.jsx)(e.code,{children:"ActivateFrame()"})," which is a ",(0,r.jsx)(e.code,{children:"CChildFrame"})," virtual function"]}),"\n",(0,r.jsx)(e.li,{children:"Modify the function with the below code snippet"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"void CChildFrame::ActivateFrame(int nCmdShow)\r\n{\r\n       ////////////////////////////////////////////////////////////////////////////\r\n       // To make first MDI child window start out maximized                     //\r\n       ////////////////////////////////////////////////////////////////////////////\r\n      m_pMainWnd->ShowWindow(SW_SHOWMAXIMIZED);\r\n      \r\n    // if another window is open, use default\r\n    if(GetMDIFrame()->MDIGetActive())\r\n      {\r\n        CMDIChildWnd::ActivateFrame(nCmdShow);\r\n      }\r\n    else // else open the child window maximized.\r\n      {\r\n        CMDIChildWnd::ActivateFrame(SW_SHOWMAXIMIZED);\r\n      }\r\n       ////////////////////////////////////////////////////////////////////////////\r\n}\r\n\n"})}),"\n",(0,r.jsx)(e.h2,{id:"remove-untitled-window-caption",children:"Remove \u2018Untitled\u2019 window caption"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["Override the ",(0,r.jsx)(e.code,{children:"PreCreateWindow()"})," function in ",(0,r.jsx)(e.code,{children:"CMainFrame"})," class"]}),"\n",(0,r.jsxs)(e.li,{children:["Modify the ",(0,r.jsx)(e.code,{children:"CREATESTRUCT"})," style by adding the below code"]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-cpp",children:"BOOL CMainFrame::PreCreateWindow(CREATESTRUCT&amp; cs)\r\n{\r\n  if( !CFrameWnd::PreCreateWindow(cs) ){\r\n   return FALSE;\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////////////\r\n  // To remove 'Untitled' in main window caption //\r\n  ////////////////////////////////////////////////////////////////////////////\r\n  cs.style &= ~FWS_ADDTOTITLE ;\r\n\r\n  return TRUE;\r\n}\n"})})]})}function h(n={}){let{wrapper:e}={...(0,a.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(s,{...n})}):s(n)}},50065:function(n,e,i){i.d(e,{Z:()=>l,a:()=>d});var t=i(67294);let r={},a=t.createContext(r);function d(n){let e=t.useContext(a);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:d(n.components),t.createElement(a.Provider,{value:e},n.children)}}}]);