"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["57273"],{77702:function(n,e,t){t.r(e),t.d(e,{frontMatter:()=>r,default:()=>p,toc:()=>c,metadata:()=>i,assets:()=>o,contentTitle:()=>a});var i=JSON.parse('{"id":"Languages/TypeCasting","title":"Type Casting","description":"Table of Contents","source":"@site/docs/Languages/TypeCasting.md","sourceDirName":"Languages","slug":"/Languages/TypeCasting","permalink":"/docs/Languages/TypeCasting","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Variables and Data Types","permalink":"/docs/Languages/VariablesDataTypes"},"next":{"title":"User Input","permalink":"/docs/Languages/UserInput"}}'),s=t(85893),l=t(50065);let r={sidebar_position:4},a="Type Casting",o={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"<strong>Type Casting</strong>",id:"type-casting-1",level:2},{value:"<strong>Definition :</strong>",id:"definition-",level:3},{value:"<strong>C++</strong>",id:"c",level:2},{value:"<strong>Types of Type Casting:</strong>",id:"types-of-type-casting",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"<strong>C#</strong>",id:"c-1",level:2},{value:"<strong>Types of Type Casting:</strong>",id:"types-of-type-casting-1",level:3},{value:"Syntax",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"<strong>Java</strong>",id:"java",level:2},{value:"<strong>Types of Type Casting:</strong>",id:"types-of-type-casting-2",level:3},{value:"Syntax",id:"syntax-2",level:3},{value:"Example",id:"example-2",level:3},{value:"<strong>Python</strong>",id:"python",level:2},{value:"<strong>Types of Type Casting:</strong>",id:"types-of-type-casting-3",level:3},{value:"Syntax",id:"syntax-3",level:3},{value:"Example",id:"example-3",level:3},{value:"<strong>JavaScript</strong>",id:"javascript",level:2},{value:"<strong>Types of Type Casting:</strong>",id:"types-of-type-casting-4",level:3},{value:"Syntax",id:"syntax-4",level:3},{value:"Example",id:"example-4",level:3},{value:"<strong>TypeScript</strong>",id:"typescript",level:2},{value:"<strong>Types of Type Casting:</strong>",id:"types-of-type-casting-5",level:3},{value:"Syntax",id:"syntax-5",level:3},{value:"Example",id:"example-5",level:3}];function d(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"type-casting",children:"Type Casting"})}),"\n",(0,s.jsx)(e.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"No."}),(0,s.jsx)(e.th,{children:"Topic"})]})}),(0,s.jsx)(e.tbody,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"5"}),(0,s.jsx)(e.td,{children:(0,s.jsx)(e.a,{href:"#type-casting",children:"Type Casting"})})]})})]}),"\n",(0,s.jsx)(e.h2,{id:"type-casting-1",children:(0,s.jsx)(e.strong,{children:"Type Casting"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"definition-",children:(0,s.jsx)(e.strong,{children:"Definition :"})}),"\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Type casting"})," is the process of converting a variable from one data type to another. It is often\r\nrequired when working with variables that store different types of data (e.g., converting a float\r\nto an integer)."]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"c",children:(0,s.jsx)(e.strong,{children:"C++"})}),"\n",(0,s.jsx)(e.h3,{id:"types-of-type-casting",children:(0,s.jsx)(e.strong,{children:"Types of Type Casting:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting (Widening)"}),": Automatically converts smaller types to larger types\r\n(e.g., ",(0,s.jsx)(e.code,{children:"int"})," to ",(0,s.jsx)(e.code,{children:"double"}),")."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting (Narrowing)"}),": Manually converts larger types to smaller types\r\n(e.g., ",(0,s.jsx)(e.code,{children:"double"})," to ",(0,s.jsx)(e.code,{children:"int"}),")."]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting"}),": Done automatically by the compiler"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting"}),": ",(0,s.jsx)(e.code,{children:"(TargetType)variable"})," or ",(0,s.jsx)(e.code,{children:"static_cast<TargetType>(variable)"})]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\r\n\r\nint main() {\r\n    // Implicit casting: int to double\r\n    int myInt = 9;\r\n    double myDouble = myInt; // Automatically done by C++\r\n\r\n    std::cout << "Implicit Cast: " << myDouble << std::endl; // 9.0\r\n\r\n    // Explicit casting: double to int\r\n    double myNewDouble = 9.78;\r\n    int myNewInt = (int)myNewDouble; // C-style casting\r\n    // Alternatively: int myNewInt = static_cast<int>(myNewDouble);\r\n\r\n    std::cout << "Explicit Cast: " << myNewInt << std::endl; // 9 (decimal part is lost)\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"c-1",children:(0,s.jsx)(e.strong,{children:"C#"})}),"\n",(0,s.jsx)(e.h3,{id:"types-of-type-casting-1",children:(0,s.jsx)(e.strong,{children:"Types of Type Casting:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting (Widening)"}),": Automatically converts smaller types to larger types\r\n(e.g., ",(0,s.jsx)(e.code,{children:"int"})," to ",(0,s.jsx)(e.code,{children:"double"}),")."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting (Narrowing)"}),": Manually converts larger types to smaller types\r\n(e.g., ",(0,s.jsx)(e.code,{children:"double"})," to ",(0,s.jsx)(e.code,{children:"int"}),")."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"syntax-1",children:"Syntax"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting"}),": Done automatically by the compiler"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting"}),": ",(0,s.jsx)(e.code,{children:"(TargetType)variable"})]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"example-1",children:"Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-csharp",children:'using System;\r\n\r\nclass Program\r\n{\r\n    static void Main()\r\n    {\r\n        // Implicit casting: int to double (automatically done by C#)\r\n        int myInt = 9;\r\n        double myDouble = myInt; // No need for explicit cast\r\n\r\n        Console.WriteLine("Implicit Cast: " + myDouble); // 9.0\r\n\r\n        // Explicit casting: double to int (requires explicit cast)\r\n        double myNewDouble = 9.78;\r\n        int myNewInt = (int)myNewDouble; // Manually casting from double to int\r\n\r\n        Console.WriteLine("Explicit Cast: " + myNewInt); // 9 (decimal part is lost)\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"java",children:(0,s.jsx)(e.strong,{children:"Java"})}),"\n",(0,s.jsx)(e.h3,{id:"types-of-type-casting-2",children:(0,s.jsx)(e.strong,{children:"Types of Type Casting:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting (Widening)"}),": Converts a smaller type to a larger type."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting (Narrowing)"}),": Converts a larger type to a smaller type."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"syntax-2",children:"Syntax"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting"}),": Done automatically by Java"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting"}),": ",(0,s.jsx)(e.code,{children:"(TargetType)variable"})]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"example-2",children:"Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-java",children:'public class Main {\r\n    public static void main(String[] args) {\r\n        // Implicit casting: int to double (automatic)\r\n        int myInt = 9;\r\n        double myDouble = myInt; // Automatically casted to double\r\n\r\n        System.out.println("Implicit Cast: " + myDouble); // 9.0\r\n\r\n        // Explicit casting: double to int (requires explicit cast)\r\n        double myNewDouble = 9.78;\r\n        int myNewInt = (int) myNewDouble; // Manual cast from double to int\r\n\r\n        System.out.println("Explicit Cast: " + myNewInt); // 9 (decimal part lost)\r\n    }\r\n}\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"python",children:(0,s.jsx)(e.strong,{children:"Python"})}),"\n",(0,s.jsx)(e.h3,{id:"types-of-type-casting-3",children:(0,s.jsx)(e.strong,{children:"Types of Type Casting:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting"}),": Python automatically converts smaller types to larger types when required\r\n(e.g., ",(0,s.jsx)(e.code,{children:"int"})," to ",(0,s.jsx)(e.code,{children:"float"}),")."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting"}),": Python provides functions like ",(0,s.jsx)(e.code,{children:"int()"}),", ",(0,s.jsx)(e.code,{children:"float()"}),", ",(0,s.jsx)(e.code,{children:"str()"})," to manually\r\nconvert types."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"syntax-3",children:"Syntax"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting"}),": Python does it automatically in some cases (e.g., int to float)."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting"}),": Use functions like ",(0,s.jsx)(e.code,{children:"int()"}),", ",(0,s.jsx)(e.code,{children:"float()"}),", ",(0,s.jsx)(e.code,{children:"str()"}),"."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"example-3",children:"Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'# Implicit casting: int to float (Python does this automatically)\r\nmy_int = 9\r\nmy_float = my_int  # Python converts int to float automatically\r\n\r\nprint("Implicit Cast:", my_float)  # 9.0\r\n\r\n# Explicit casting: float to int (requires manual cast)\r\nmy_new_float = 9.78\r\nmy_new_int = int(my_new_float)  # Manually cast float to int\r\n\r\nprint("Explicit Cast:", my_new_int)  # 9 (decimal part lost)\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"javascript",children:(0,s.jsx)(e.strong,{children:"JavaScript"})}),"\n",(0,s.jsx)(e.h3,{id:"types-of-type-casting-4",children:(0,s.jsx)(e.strong,{children:"Types of Type Casting:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting"}),": JavaScript automatically converts between types when required."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting"}),": Developers use functions like ",(0,s.jsx)(e.code,{children:"Number()"}),", ",(0,s.jsx)(e.code,{children:"String()"}),", ",(0,s.jsx)(e.code,{children:"Boolean()"})," to manually\r\nconvert types."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"syntax-4",children:"Syntax"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Implicit Casting"}),": Automatically done by JavaScript (e.g., ",(0,s.jsx)(e.code,{children:"string"})," to ",(0,s.jsx)(e.code,{children:"number"}),")."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Explicit Casting"}),": Use ",(0,s.jsx)(e.code,{children:"Number()"}),", ",(0,s.jsx)(e.code,{children:"String()"}),", ",(0,s.jsx)(e.code,{children:"Boolean()"}),"."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"example-4",children:"Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-javascript",children:'// Implicit casting: string to number (JavaScript does this automatically)\r\nlet myString = "9";\r\nlet myNumber = +myString;  // The \'+\' operator implicitly converts string to number\r\n\r\nconsole.log("Implicit Cast:", myNumber);  // 9\r\n\r\n// Explicit casting: number to string (manual cast)\r\nlet myNewNumber = 9.78;\r\nlet myNewString = myNewNumber.toString();  // Manually converting number to string\r\n\r\nconsole.log("Explicit Cast:", myNewString);  // "9.78"\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"typescript",children:(0,s.jsx)(e.strong,{children:"TypeScript"})}),"\n",(0,s.jsx)(e.h3,{id:"types-of-type-casting-5",children:(0,s.jsx)(e.strong,{children:"Types of Type Casting:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Type Assertion (Explicit Casting):"})," TypeScript allows casting between types using\r\n",(0,s.jsx)(e.strong,{children:"angle brackets"})," or ",(0,s.jsxs)(e.strong,{children:[(0,s.jsx)(e.code,{children:"as"})," keyword"]}),"."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Type Inference:"})," TypeScript infers types automatically, but doesn\u2019t perform implicit type\r\nconversions like JavaScript."]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"syntax-5",children:"Syntax"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:(0,s.jsx)(e.strong,{children:"Type Assertion (Explicit):"})}),"\n"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-ts",children:"  let someValue: any = \"hello\";\r\n  let strLength: number = (<string>someValue).length;\r\n  // or using 'as'\r\n  let strLengthAlt: number = (someValue as string).length;\n"})}),"\n",(0,s.jsx)(e.h3,{id:"example-5",children:"Example"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-typescript",children:'// Implicit casting doesn\'t exist the same way in TypeScript; number is a single type for all numbers\r\n\r\nlet myInt: number = 9;\r\nlet myDouble: number = myInt; // Same type, so no cast needed\r\n\r\nconsole.log("Implicit Cast:", myDouble); // 9\r\n\r\n// Explicit casting (type assertions) are for types, not number conversions, so use Math.floor or similar:\r\n\r\nlet myNewDouble: number = 9.78;\r\nlet myNewInt: number = Math.floor(myNewDouble); // Convert double to int by flooring\r\n\r\nconsole.log("Explicit Cast:", myNewInt); // 9\r\n\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:"#table-of-contents",children:"Back to Top"})})]})}function p(n={}){let{wrapper:e}={...(0,l.a)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},50065:function(n,e,t){t.d(e,{Z:()=>a,a:()=>r});var i=t(67294);let s={},l=i.createContext(s);function r(n){let e=i.useContext(l);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:r(n.components),i.createElement(l.Provider,{value:e},n.children)}}}]);