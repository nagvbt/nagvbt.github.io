"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[20496],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function d(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var a=r.createContext({}),s=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):d(d({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(a.Provider,{value:n},e.children)},l="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),l=s(t),m=i,f=l["".concat(a,".").concat(m)]||l[m]||c[m]||o;return t?r.createElement(f,d(d({ref:n},u),{},{components:t})):r.createElement(f,d({ref:n},u))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,d=new Array(o);d[0]=m;var p={};for(var a in n)hasOwnProperty.call(n,a)&&(p[a]=n[a]);p.originalType=e,p[l]="string"==typeof e?e:i,d[1]=p;for(var s=2;s<o;s++)d[s]=t[s];return r.createElement.apply(null,d)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},68790:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>s});var r=t(87462),i=(t(67294),t(3905));const o={},d="Linked List",p={unversionedId:"articles/Cpp/DataStructures/LinkedList",id:"articles/Cpp/DataStructures/LinkedList",title:"Linked List",description:"",source:"@site/docs/articles/Cpp/DataStructures/LinkedList.md",sourceDirName:"articles/Cpp/DataStructures",slug:"/articles/Cpp/DataStructures/LinkedList",permalink:"/docs/articles/Cpp/DataStructures/LinkedList",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Doubly Linked List",permalink:"/docs/articles/Cpp/DataStructures/DoublyLinkedList"},next:{title:"Queue",permalink:"/docs/articles/Cpp/DataStructures/Queue"}},a={},s=[],u={toc:s},l="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(l,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"linked-list"},"Linked List"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "iostream"\nusing namespace std;\n\n\nclass nextList\n{\nprivate:\n    struct Node\n    {\n        int data;\n        Node* next;\n    }*pHead;\n\npublic:\n    nextList() { pHead = NULL; }\n    ~nextList();\n\n    void Print();         // Prints the contents of nextedlist\n    void Append(int num); // Adds a new Node at the end of the nextedlist\n    void Delete(int num); // Deletes the specified Node from the nextedlist\n\n    void AddatBeg(int num);// Adds a new Node at the beginning of the nextedlist\n    void AddAfter(int c, int num); // Adds a new Node after specified number of Nodes\n    int Count();          // Counts number of Nodes present in the nextedlist\n\n\n};\n\nvoid main()\n{\n    nextList* pobj = new nextList();\n    pobj->Append(11);\n    pobj->Append(22);\n    pobj->Append(33);\n    pobj->Delete(33);\n    pobj->AddatBeg(44);\n    pobj->AddAfter(1, 55);\n    pobj->Print();\n    cout << endl << "No. of elements in nexted list = " << pobj->Count() << endl;\n\n    delete pobj;\n}\n\n/*\nOUTPUT\n----------------\n44\n11\n55\n22\n\nNo. of elements in nexted list = 4\n*/\n\nnextList::~nextList()\n{\n    if (pHead == NULL)\n        return;\n\n    Node* tmp;\n    while (pHead != NULL)\n    {\n        tmp = pHead->next;\n        delete pHead;\n        pHead = tmp;\n    }\n}\n\n// Prints the contents of nextedlist\nvoid nextList::Print()\n{\n    if (pHead == NULL)\n    {\n        cout << "EMPTY";\n        return;\n    }\n\n    //Traverse\n    Node* tmp = pHead;\n    while (tmp != NULL)\n    {\n        cout << tmp->data << endl;\n        tmp = tmp->next;\n    }\n}\n\n// Adds a new Node at the end of the nextedlist\nvoid nextList::Append(int num)\n{\n    Node* newNode;\n\n    newNode = new Node;\n    newNode->data = num;\n    newNode->next = NULL;\n\n    if (pHead == NULL)\n    {\n        //create first Node\n        pHead = newNode;\n    }\n    else\n    {\n        //Traverse\n        Node* tmp = pHead;\n        while (tmp->next != NULL)\n        {\n            tmp = tmp->next;\n        }\n\n        //add Node to the end  \n        tmp->next = newNode;\n    }\n}\n\n// Deletes the specified Node from the nextedlist\nvoid nextList::Delete(int num)\n{\n    Node* tmp;\n\n    tmp = pHead;\n    //If Node to be delete is first Node\n    if (tmp->data == num)\n    {\n        pHead = tmp->next;\n        delete tmp;\n        return;\n    }\n\n    // traverse list till the last but one Node is reached\n    Node* tmp2 = tmp;\n    while (tmp != NULL)\n    {\n        if (tmp->data == num)\n        {\n            tmp2->next = tmp->next;\n            delete tmp;\n            return;\n        }\n\n        tmp2 = tmp;\n        tmp = tmp->next;\n    }\n    cout << "\\nElement " << num << " not Found.";\n}\n\n// Adds a new Node at the beginning of the nextedlist\nvoid nextList::AddatBeg(int num)\n{\n    Node* tmp;\n\n    //add new Node\n    tmp = new Node;\n    tmp->data = num;\n    tmp->next = pHead;\n    pHead = tmp;\n}\n\n//Adds a new Node after specified number of Nodes\nvoid nextList::AddAfter(int c, int num)\n{\n    Node* tmp;\n    Node* tmp2;\n    int i;\n    //Skip to the desired portion\n    for (i = 0, tmp = pHead; i < c; i++)\n    {\n        tmp = tmp->next;\n\n        //if end of nexted list is enCountered\n        if (tmp == NULL)\n        {\n            cout << endl << "There are less than " << c << " elements";\n            return;\n        }\n    }\n\n    //insert new Node\n    tmp2 = new Node;\n    tmp2->data = num;\n    tmp2->next = tmp->next;\n    tmp->next = tmp2;\n}\n\n// Counts number of Nodes present in the nextedlist\nint nextList::Count()\n{\n    Node* tmp;\n    int c = 0;\n\n    //Traverse the entire nexted List\n    for (tmp = pHead; tmp != NULL; tmp = tmp->next)\n        c++;\n\n    return (c);\n}\n\n')))}c.isMDXComponent=!0}}]);