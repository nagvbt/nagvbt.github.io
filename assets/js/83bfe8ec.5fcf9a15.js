"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[14613],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var h=n.createContext({}),l=function(e){var t=n.useContext(h),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(h.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,h=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(a),u=r,m=c["".concat(h,".").concat(u)]||c[u]||d[u]||o;return a?n.createElement(m,s(s({ref:t},p),{},{components:a})):n.createElement(m,s({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=u;var i={};for(var h in t)hasOwnProperty.call(t,h)&&(i[h]=t[h]);i.originalType=e,i[c]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<o;l++)s[l]=a[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},91473:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>h,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var n=a(87462),r=(a(67294),a(3905));const o={tags:["win32"]},s="Hash Data using Win32 API through a CHashDataProvider class",i={permalink:"/blog/2012/03/15/win32-api-through-a-chashdataprovider-class",source:"@site/blog/2012-03-15-win32-api-through-a-chashdataprovider-class.md",title:"Hash Data using Win32 API through a CHashDataProvider class",description:"Cryptography is the use of codes to convert data so that only a specific recipient will be able to read it. Microsoft provide win32 API to Hash Data/string. The class CHashDataProvider developed to provides simple function HashData(ALG_ID algorithmID, LPCTSTR plainText, LPTSTR hashedText); which takes algorithmID and inputText to convert plainText to hashedText",date:"2012-03-15T00:00:00.000Z",formattedDate:"March 15, 2012",tags:[{label:"win32",permalink:"/blog/tags/win-32"}],readingTime:2.845,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["win32"]},prevItem:{title:"Check whether a given file exists in the given path",permalink:"/blog/2012/03/15/whether-a-given-file-exists-in-the-givenpath"},nextItem:{title:"Creating an SDI/MDI application that is initially maximized",permalink:"/blog/2012/03/14/sdimdi-application-that-is-initially-maximized"}},h={authorsImageUrls:[]},l=[],p={toc:l},c="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Cryptography is the use of codes to convert data so that only a specific recipient will be able to read it. Microsoft provide win32 API to Hash Data/string. The class CHashDataProvider developed to provides simple function HashData(ALG_ID algorithmID, LPCTSTR plainText, LPTSTR hashedText); which takes algorithmID and inputText to convert plainText to hashedText"),(0,r.kt)("p",null,"ALG_ID algorithmID - Algorithm ID to be used LPCTSTR plainText - plainText that to be converted to hashedText LPTSTR hashedText - Hashed Test using the input algorithmID."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CHashDataProvider Code")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"HashDataProvider.h"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"#include <wincrypt.h>;\n#define BUFFER_SIZE 256\n\nclass CHashDataProvider\n{\npublic:\n    CHashDataProvider(void);\n    ~CHashDataProvider(void);\n\nprivate:\n    // Handle to a cryptographic service provider (CSP)\n    HCRYPTPROV  m_hProv;\n\n    // Handle to the hash object needed to create a hash.\n    HCRYPTHASH  m_hHash;\n\n    // Pointer to the hash.\n    PBYTE       m_pbHash;\n\nprivate:\n    void FreeResources();\n    void InitializeData();\n    LPTSTR FormatData(PBYTE pbHash, DWORD dwDataLen, LPTSTR hashedText);\n\npublic:\n    bool HashData(ALG_ID  algorithmID, LPCTSTR plainText, LPTSTR  hashedText);\n};\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"HashDataProvider.cpp"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "HashDataProvider.h"\n\nCHashDataProvider::CHashDataProvider(void)\n{\n    InitializeData();\n}\n\nCHashDataProvider::~CHashDataProvider(void)\n{\n}\n\n//\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\n// des:    Hashes data based on the ALG_ID\n// return: Hashing of the text is sucessful or not\n//\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\\*\nbool\nCHashDataProvider::HashData(ALG_ID  algorithmID, // in | Algorithm ID (Sha1 or MD5 )\n                            LPCTSTR plainText,   // in | Original string to be hashed\n                            LPTSTR  hashedText)    //out | string to store hashed text\n{\n    InitializeData();\n\n    bool        rc          = true;      // Default is success\n    DWORD       dwDataLen   = 0;         // Length, in bytes, of the hash.\n\n    //--------------------------------------------------------------------\n    // Acquire a handle to the default RSA cryptographic service provider.\n    if (!CryptAcquireContext(\n        &amp;m_hProv,                 // handle of the CSP\n        NULL,                     // key container name\n        NULL,                     // CSP name\n        PROV_RSA_FULL,            // provider type\n        CRYPT_VERIFYCONTEXT))     // no key access is requested\n    {\n        AfxMessageBox("Error in AcquireContext 0x%08x n", GetLastError());\n        rc = false;\n        FreeResources();\n    }\n\n    if (!CryptCreateHash(\n        m_hProv,                  // handle of the CSP\n        algorithmID,              // hash algorithm to use\n        0,                        // hash key\n        0,                        // reserved\n        &amp;m_hHash))                // address of hash object handle\n    {\n        AfxMessageBox("Error in CryptCreateHash 0x%08x n", GetLastError());\n        rc = false;\n        FreeResources();\n    }\n\n    if (!CryptHashData(\n        m_hHash,                  // handle of the hash object\n        (const BYTE *) plainText, // text to be hash\n        _tcslen(plainText)*sizeof(TCHAR), // number of bytes of data\n        0))                       // flags\n    {\n        AfxMessageBox("Error in CryptHashData 0x%08x n", GetLastError());\n        rc = false;\n        FreeResources();\n    }\n\n    if (!CryptGetHashParam(\n        m_hHash,                 // handle of the HMAC hash object\n        HP_HASHVAL,              // query on the hash value\n        NULL,                    // pointer to the HMAC hash value\n        &amp;dwDataLen,              // length,in bytes, of the hash\n        0))\n    {\n        AfxMessageBox("Error in CryptGetHashParam 0x%08x n", GetLastError());\n        rc = false;\n        FreeResources();\n    }\n\n    m_pbHash = (BYTE\\*)malloc(dwDataLen);\n    if(NULL == m_pbHash)\n    {\n       AfxMessageBox("unable to allocate memoryn");\n       rc = false;\n       FreeResources();\n    }\n\n    if (!CryptGetHashParam(\n        m_hHash,                   // handle of the HMAC hash object\n        HP_HASHVAL,                // query on the hash value\n        m_pbHash,                  // pointer to the HMAC hash value\n        &amp;dwDataLen,                // length,in bytes, of the hash\n        0))\n    {\n        AfxMessageBox("Error in CryptGetHashParam 0x%08x n", GetLastError());\n        rc = false;\n        FreeResources();\n    }\n\n    hashedText = FormatData(m_pbHash, dwDataLen, hashedText);\n\n    FreeResources();\n\n    return rc;\n}\n\n//Helper functions\nvoid CHashDataProvider::FreeResources()\n{\n    if(m_hHash)\n        CryptDestroyHash(m_hHash);\n    if(m_hProv)\n        CryptReleaseContext(m_hProv, 0);\n    if(m_pbHash)\n       free(m_pbHash);\n}\n\nvoid CHashDataProvider::InitializeData()\n{\n    m_hProv = NULL;\n    m_hHash = NULL;\n    m_pbHash = NULL;\n}\n\nLPTSTR CHashDataProvider::FormatData(PBYTE pbHash, DWORD dwDataLen, LPTSTR hashedText)\n{\n    TCHAR rstData[BUFFER_SIZE]= {0}; // Buffer to receive hashed result\n    TCHAR tmpBuffer[3] = {0};\n    for (DWORD i = 0 ; i &lt; dwDataLen ; i++)\n    {\n        tmpBuffer[0] = 0;\n        tmpBuffer[1] = 0;\n        tmpBuffer[2] = 0;\n        _stprintf_s(tmpBuffer, _T("%2.2x"), pbHash\\[i\\]);\n        _tcscat_s(rstData, tmpBuffer);\n    }\n    _tcscpy(hashedText, rstData);\n\n    return hashedText;\n}\n')))}d.isMDXComponent=!0}}]);