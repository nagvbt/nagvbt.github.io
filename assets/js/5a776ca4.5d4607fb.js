"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[59978],{36322:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var o=t(85893),s=t(11151);const r={tags:["C++"]},a="Why size of an empty C++ class not zero?",l={permalink:"/blog/2011/09/18/why-size-of-an-empty-c-class-not-zero",source:"@site/blog/2011-09-18-why-size-of-an-empty-c-class-not-zero.md",title:"Why size of an empty C++ class not zero?",description:"To ensure that the addresses of two different objects will be different C++ compiler will allocate one byte of memory. The below sample code explains clearly. Because of this behaviour the addresses of class X objects are not equal even though there is no data present in the class X.",date:"2011-09-18T00:00:00.000Z",formattedDate:"September 18, 2011",tags:[{label:"C++",permalink:"/blog/tags/c"}],readingTime:.565,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["C++"]},unlisted:!1,prevItem:{title:"Variable arguments handling in C/C++",permalink:"/blog/2011/09/18/variable-arguments-handling"},nextItem:{title:"Console Application Event Handling",permalink:"/blog/2011/09/03/console-application-event-handling"}},c={authorsImageUrls:[]},i=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"To ensure that the addresses of two different objects will be different C++ compiler will allocate one byte of memory. The below sample code explains clearly. Because of this behaviour the addresses of class X objects are not equal even though there is no data present in the class X."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-cpp",children:'class X {\r\n\r\n};\r\n\r\nclass Y {\r\n\r\n};\r\n\r\nvoid main() { \r\n  X objX1, objX2; Y objY;\r\n\r\ncout<<"size of objX1: "<<sizeof(objX1)<<endl; //Output: 1 \r\ncout<<"size of objY: "<<sizeof(objY)<<endl; //Output: 1\r\n\r\n//Addresses\r\n cout<<"Address of objX1: "<<&objX1<<endl; \r\n cout<<"Address of objX2: "<<&objX2<<endl;\r\n\r\ncout<<"Address of objY: "<<&objY<<endl;\r\n\r\nif(&objX1 == &objX2) { \r\n  cout<<"Never Happens"; \r\n  }\r\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>l,a:()=>a});var o=t(67294);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);