"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["44560"],{30046:function(n,e,t){t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var r=t(56292),a=t(85893),s=t(50065);let i={tags:["CSharp","Design Patterns"]},l="Design Pattern: C# Singleton",o={authorsImageUrls:[]},c=[];function p(n){let e={code:"code",pre:"pre",...(0,s.a)(),...n.components};return(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'using System;\r\n\r\nnamespace CSharp { \r\n  //Singleton: Ensure a class only has one instance, \r\n  //and provide a global point of access to it. \r\n  class Singleton { \r\n    //Member Variable \r\n    private static Singleton instance = null;\r\n    \r\n    //Member Functions\r\n    private Singleton()\r\n    {\r\n    }\r\n\r\n    public static Singleton Instance()\r\n    {\r\n        if(instance == null )\r\n        {\r\n          instance = new Singleton ();\r\n        }\r\n\r\n        return instance;\r\n    }\r\n\r\n    public void print()\r\n    {\r\n      Console.WriteLine("Singleton Class" );\r\n    }\r\n\r\n};\r\n\r\nclass Program { \r\n\r\n  static void Main(string[] args) {\r\n     Singleton n = Singleton .Instance(); \r\n     n.print();\r\n     Singleton p = Singleton .Instance();\r\n     p.print();\r\n  }\r\n\r\n } \r\n\r\n}\r\n\n'})})}function g(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},50065:function(n,e,t){t.d(e,{Z:()=>l,a:()=>i});var r=t(67294);let a={},s=r.createContext(a);function i(n){let e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(s.Provider,{value:e},n.children)}},56292:function(n){n.exports=JSON.parse('{"permalink":"/blog/2012/01/18/design-pattern-c-singleton","source":"@site/blog/2012-01-18-design-pattern-c-singleton.md","title":"Design Pattern: C# Singleton","description":"","date":"2012-01-18T00:00:00.000Z","tags":[{"inline":true,"label":"CSharp","permalink":"/blog/tags/c-sharp"},{"inline":true,"label":"Design Patterns","permalink":"/blog/tags/design-patterns"}],"readingTime":0.35,"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["CSharp","Design Patterns"]},"unlisted":false,"prevItem":{"title":"All About Design Patterns","permalink":"/blog/2012/01/18/all-about-design-patterns"},"nextItem":{"title":"Restore a Database Backup in MS SQL Server 2008","permalink":"/blog/2012/01/18/restore-db-backup-using-bak-file-sql2008"}}')}}]);