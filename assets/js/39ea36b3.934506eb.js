"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[9230],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),o=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=o(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=o(a),y=r,f=c["".concat(p,".").concat(y)]||c[y]||u[y]||i;return a?n.createElement(f,l(l({ref:t},d),{},{components:a})):n.createElement(f,l({ref:t},d))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=y;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var o=2;o<i;o++)l[o]=a[o];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},5471:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>o});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:3},l="Data Types",s={unversionedId:"articles/C/DataTypes",id:"articles/C/DataTypes",title:"Data Types",description:"1.\tWhat is a Data Type?",source:"@site/docs/articles/C/DataTypes.md",sourceDirName:"articles/C",slug:"/articles/C/DataTypes",permalink:"/docs/articles/C/DataTypes",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Declarations and Initializations",permalink:"/docs/articles/C/Declarations"},next:{title:"Storage classes",permalink:"/docs/articles/C/StorageClasses"}},p={},o=[{value:"1.\tWhat is a Data Type?",id:"1what-is-a-data-type",level:3},{value:"2.\tHow many Data Types present in C?",id:"2how-many-data-types-present-in-c",level:3},{value:"3.\tWhat are the Basic Data Types in C?",id:"3what-are-the-basic-data-types-in-c",level:3},{value:"4.\tExplain about data type Qualifiers?",id:"4explain-about-data-type-qualifiers",level:3},{value:"5.\tWhat are the Derived Data Types ?",id:"5what-are-the-derived-data-types-",level:3},{value:"6.\tWhat are the User-defined Data Types ?",id:"6what-are-the-user-defined-data-types-",level:3}],d={toc:o},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"data-types"},"Data Types"),(0,r.kt)("h3",{id:"1what-is-a-data-type"},"1.\tWhat is a Data Type?"),(0,r.kt)("p",null,"Data type  (or just type) determines the possible values that an identifier can have and the valid operations that can be applied on it."),(0,r.kt)("h3",{id:"2how-many-data-types-present-in-c"},"2.\tHow many Data Types present in C?"),(0,r.kt)("p",null,"In C language, data types are broadly classified in to three types: "),(0,r.kt)("p",null,"a.\tBasic data types (primitive data types)\nb.\tDerived data types\nc.\tUser-defined data types"),(0,r.kt)("h3",{id:"3what-are-the-basic-data-types-in-c"},"3.\tWhat are the Basic Data Types in C?"),(0,r.kt)("p",null,"The C programming language provides the user with four basic data types. "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"int\t    -> An integer."),(0,r.kt)("li",{parentName:"ul"},"float\t-> A floating point(real) number."),(0,r.kt)("li",{parentName:"ul"},"char\t-> A single byte of memory, enough to hold a character."),(0,r.kt)("li",{parentName:"ul"},"double  -> double precision floating point number.")),(0,r.kt)("h3",{id:"4explain-about-data-type-qualifiers"},"4.\tExplain about data type Qualifiers?"),(0,r.kt)("p",null,"The C programming language provides the user with three basic data type qualifiers."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"short\t ->  An integer possibly of reduced range."),(0,r.kt)("li",{parentName:"ul"},"long\t -> An integer possibly of increased range."),(0,r.kt)("li",{parentName:"ul"},"unsigned ->  An integer with no negative range, the spare capacity being used to increase the positive range.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>      \nvoid main()\n{\n    char c ;\n    unsigned char d ;\n    int i ;\n    unsigned int j ;\n    short int k ;\n    unsigned short int l ;\n    long int m ;\n    unsigned long int n ;\n    float x ;\n    double y ;\n    long double z ;\n    /* char */\n    scanf ( "%c %c", &c, &d ) ;\n    printf ( "%c %c", c, d ) ;\n    /* int */\n    scanf ( "%d %u", &i, &j ) ;\n    printf ( "%d %u", i, j ) ;\n    /* short int */\n    scanf ( "%d %u", &k, &l ) ;\n    printf ( "%d %u", k, l ) ;\n    /* long int */\n    scanf ( "%ld %lu", &m, &n ) ;\n    printf ( "%ld %lu", m, n ) ;\n    /* float, double, long double */\n    scanf ( "%f %lf %Lf", &x, &y, &z ) ;\n    printf ( "%f %lf %Lf", x, y, z ) ;\n}\n')),(0,r.kt)("h3",{id:"5what-are-the-derived-data-types-"},"5.\tWhat are the Derived Data Types ?"),(0,r.kt)("p",null,"These data types are derived from the basic data types. Derived data types availabe in C are: "),(0,r.kt)("p",null,"a.\tArray type e.g. char","[ ]",",int","[ ]",", etc.\nb.\tPointer type e.g. char",(0,r.kt)("em",{parentName:"p"},", int"),", etc.\nc.\tFunction type e.g.int(int,int), float(int), etc.\nNOTE : Derived Data Types will be explained in next chapters"),(0,r.kt)("h3",{id:"6what-are-the-user-defined-data-types-"},"6.\tWhat are the User-defined Data Types ?"),(0,r.kt)("p",null,"The C language provides flexibility to the user to create new data types. These newly created data types are called user-defined data types. The user-defined data types in C can be created by using:\na.\tStructure\nb.\tUnion\nc.\tEnumeration\nNOTE : Derived Data Types will be explained in next chapters"))}u.isMDXComponent=!0}}]);