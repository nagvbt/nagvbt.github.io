"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["77648"],{68650:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>o,default:()=>g,toc:()=>d,metadata:()=>i,assets:()=>a,contentTitle:()=>l});var i=JSON.parse('{"id":"UIFrameworks/ConditionalRendering","title":"Conditional Rendering","description":"React","source":"@site/docs/UIFrameworks/ConditionalRendering.md","sourceDirName":"UIFrameworks","slug":"/UIFrameworks/ConditionalRendering","permalink":"/docs/UIFrameworks/ConditionalRendering","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Events","permalink":"/docs/UIFrameworks/Events"},"next":{"title":"Lists","permalink":"/docs/UIFrameworks/Lists"}}'),s=r(85893),t=r(50065);let o={sidebar_position:13},l="Conditional Rendering",a={},d=[{value:"<strong>React</strong>",id:"react",level:2},{value:"Definition",id:"definition",level:3},{value:"Syntax",id:"syntax",level:3},{value:"1. if-else",id:"1-if-else",level:4},{value:"2. Ternary Operator",id:"2-ternary-operator",level:4},{value:"3. Logical AND (&amp;&amp;)",id:"3-logical-and-",level:4},{value:"4. Switch Statement",id:"4-switch-statement",level:4},{value:"Example: Simple App using all conditionals",id:"example-simple-app-using-all-conditionals",level:3},{value:"<strong>Svelte</strong>",id:"svelte",level:2},{value:"Definition-Conditional rendering",id:"definition-conditional-rendering",level:3},{value:"Syntax Overview",id:"syntax-overview",level:3},{value:"1.if-else",id:"1if-else",level:4},{value:"2. Ternary Operator (in attributes or expressions only)",id:"2-ternary-operator-in-attributes-or-expressions-only",level:4},{value:"3. Logical AND (only in expressions)",id:"3-logical-and-only-in-expressions",level:4},{value:"4.Switch Statement",id:"4switch-statement",level:4},{value:"Example App using all conditionals",id:"example-app-using-all-conditionals",level:3}];function c(e){let n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"conditional-rendering",children:"Conditional Rendering"})}),"\n",(0,s.jsx)(n.h2,{id:"react",children:(0,s.jsx)(n.strong,{children:"React"})}),"\n",(0,s.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,s.jsx)(n.p,{children:"Conditional rendering in React means showing or hiding UI components based on a condition\r\n(like a boolean or value)."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,s.jsx)(n.h4,{id:"1-if-else",children:"1. if-else"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"if (condition) {\r\n  return <ComponentA />;\r\n} else {\r\n  return <ComponentB />;\r\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"2-ternary-operator",children:"2. Ternary Operator"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"condition ? <ComponentA /> : <ComponentB />;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"3-logical-and-",children:"3. Logical AND (&&)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"condition && <ComponentA />;\n"})}),"\n",(0,s.jsx)(n.h4,{id:"4-switch-statement",children:"4. Switch Statement"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:"switch (value) {\r\n  case 'one':\r\n    return <Component1 />;\r\n  default:\r\n    return <DefaultComponent />;\r\n}\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"example-simple-app-using-all-conditionals",children:"Example: Simple App using all conditionals"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// App.tsx\r\nimport React, { useState } from 'react';\r\nimport Greeting from './Greeting';\r\nimport LoginStatus from './LoginStatus';\r\nimport RoleMessage from './RoleMessage';\r\n\r\nconst App: React.FC = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState<boolean>(false);\r\n  const [role, setRole] = useState<'user' | 'admin' | 'guest'>('user'); // user | admin | guest\r\n\r\n  return (\r\n    <div>\r\n      <h1>React Conditionals Demo</h1>\r\n\r\n      {/* IF-ELSE inside Greeting */}\r\n      <Greeting isLoggedIn={isLoggedIn} />\r\n\r\n      {/* TERNARY inside LoginStatus */}\r\n      <LoginStatus isLoggedIn={isLoggedIn} />\r\n\r\n      {/* SWITCH inside RoleMessage */}\r\n      <RoleMessage role={role} />\r\n\r\n      {/* && condition inside App */}\r\n      {isLoggedIn && <p>Welcome back!</p>}\r\n\r\n      <button onClick={() => setIsLoggedIn(!isLoggedIn)}>\r\n        {isLoggedIn ? 'Logout' : 'Login'}\r\n      </button>\r\n\r\n      <br />\r\n      <select\r\n        onChange={(e) => setRole(e.target.value as 'admin' | 'user' | 'guest')}\r\n        value={role}\r\n      >\r\n        <option value=\"admin\">Admin</option>\r\n        <option value=\"user\">User</option>\r\n        <option value=\"guest\">Guest</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// Greeting.tsx (if-else)\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  isLoggedIn: boolean;\r\n}\r\n\r\nconst Greeting: React.FC<Props> = ({ isLoggedIn }) => {\r\n  if (isLoggedIn) {\r\n    return <h2>Hello, User!</h2>;\r\n  } else {\r\n    return <h2>Please sign in.</h2>;\r\n  }\r\n};\r\n\r\nexport default Greeting;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// LoginStatus.tsx (ternary)\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  isLoggedIn: boolean;\r\n}\r\n\r\nconst LoginStatus: React.FC<Props> = ({ isLoggedIn }) => (\r\n  <p>Status: {isLoggedIn ? 'Logged In \u2705' : 'Logged Out \u274C'}</p>\r\n);\r\n\r\nexport default LoginStatus;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"// RoleMessage.tsx (switch)\r\nimport React from 'react';\r\n\r\ninterface Props {\r\n  role: 'admin' | 'user' | 'guest';\r\n}\r\n\r\nconst RoleMessage: React.FC<Props> = ({ role }) => {\r\n  switch (role) {\r\n    case 'admin':\r\n      return <p>You are an admin \uD83D\uDC51</p>;\r\n    case 'user':\r\n      return <p>Welcome, regular user \uD83D\uDC64</p>;\r\n    case 'guest':\r\n      return <p>Browsing as guest \uD83D\uDC65</p>;\r\n    default:\r\n      return <p>Unknown role</p>;\r\n  }\r\n};\r\n\r\nexport default RoleMessage;\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"svelte",children:(0,s.jsx)(n.strong,{children:"Svelte"})}),"\n",(0,s.jsx)(n.h3,{id:"definition-conditional-rendering",children:"Definition-Conditional rendering"}),"\n",(0,s.jsx)(n.p,{children:"Conditional rendering in Svelte means showing or hiding parts of the UI based on conditions like\r\nbooleans or values using special templating syntax."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"syntax-overview",children:"Syntax Overview"}),"\n",(0,s.jsx)(n.h4,{id:"1if-else",children:"1.if-else"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-svelte",children:"{#if condition}\r\n  <ComponentA />\r\n{:else}\r\n  <ComponentB />\r\n{/if}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"2-ternary-operator-in-attributes-or-expressions-only",children:"2. Ternary Operator (in attributes or expressions only)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-svelte",children:"<p>{condition ? 'Yes' : 'No'}</p>\n"})}),"\n",(0,s.jsx)(n.h4,{id:"3-logical-and-only-in-expressions",children:"3. Logical AND (only in expressions)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-svelte",children:"{condition && <ComponentA />}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"4switch-statement",children:"4.Switch Statement"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-svelte",children:"{#if value === 'one'}\r\n  <Component1 />\r\n{:else}\r\n  <DefaultComponent />\r\n{/if}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["Note: Svelte doesn't have built-in switch syntax; use chained ",(0,s.jsx)(n.code,{children:"if"}),"/",(0,s.jsx)(n.code,{children:"else if"})," blocks."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.h3,{id:"example-app-using-all-conditionals",children:["Example",":Simple"," App using all conditionals"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-svelte",children:"\x3c!-- App.svelte --\x3e\r\n<script lang=\"ts\">\r\n  import Greeting from './Greeting.svelte';\r\n  import LoginStatus from './LoginStatus.svelte';\r\n  import RoleMessage from './RoleMessage.svelte';\r\n\r\n  let isLoggedIn: boolean = false;\r\n  let role: 'user' | 'admin' | 'guest' = 'user';\r\n<\/script>\r\n\r\n<h1>Svelte Conditionals Demo</h1>\r\n\r\n\x3c!-- IF-ELSE inside Greeting --\x3e\r\n<Greeting {isLoggedIn} />\r\n\r\n\x3c!-- TERNARY inside LoginStatus --\x3e\r\n<LoginStatus {isLoggedIn} />\r\n\r\n\x3c!-- SWITCH (if-else chain) inside RoleMessage --\x3e\r\n<RoleMessage {role} />\r\n\r\n\x3c!-- && condition inside App --\x3e\r\n{#if isLoggedIn}\r\n  <p>Welcome back!</p>\r\n{/if}\r\n\r\n<button on:click={() => (isLoggedIn = !isLoggedIn)}>\r\n  {isLoggedIn ? 'Logout' : 'Login'}\r\n</button>\r\n\r\n<br />\r\n\r\n<select bind:value={role}>\r\n  <option value=\"admin\">Admin</option>\r\n  <option value=\"user\">User</option>\r\n  <option value=\"guest\">Guest</option>\r\n</select>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- Greeting.svelte --\x3e\r\n<script lang="ts">\r\n  export let isLoggedIn: boolean;\r\n<\/script>\r\n\r\n{#if isLoggedIn}\r\n  <h2>Hello, User!</h2>\r\n{:else}\r\n  <h2>Please sign in.</h2>\r\n{/if}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-svelte",children:"\x3c!-- LoginStatus.svelte --\x3e\r\n<script lang=\"ts\">\r\n  export let isLoggedIn: boolean;\r\n<\/script>\r\n\r\n<p>Status: {isLoggedIn ? 'Logged In \u2705' : 'Logged Out \u274C'}</p>\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-svelte",children:"\x3c!-- RoleMessage.svelte --\x3e\r\n<script lang=\"ts\">\r\n  export let role: 'admin' | 'user' | 'guest';\r\n<\/script>\r\n\r\n{#if role === 'admin'}\r\n  <p>You are an admin \uD83D\uDC51</p>\r\n{:else if role === 'user'}\r\n  <p>Welcome, regular user \uD83D\uDC64</p>\r\n{:else if role === 'guest'}\r\n  <p>Browsing as guest \uD83D\uDC65</p>\r\n{:else}\r\n  <p>Unknown role</p>\r\n{/if}\n"})}),"\n",(0,s.jsx)(n.hr,{})]})}function g(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},50065:function(e,n,r){r.d(n,{Z:()=>l,a:()=>o});var i=r(67294);let s={},t=i.createContext(s);function o(e){let n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);