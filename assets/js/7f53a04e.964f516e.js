"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["17820"],{46075:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>s,default:()=>h,toc:()=>d,metadata:()=>i,assets:()=>o,contentTitle:()=>a});var i=JSON.parse('{"id":"UIFrameworks/TernaryOperatorRenderHTML","title":"Ternary Operator & RenderHTML","description":"Ternary Operator Definition","source":"@site/docs/UIFrameworks/TernaryOperatorRenderHTML.md","sourceDirName":"UIFrameworks","slug":"/UIFrameworks/TernaryOperatorRenderHTML","permalink":"/docs/UIFrameworks/TernaryOperatorRenderHTML","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Modules","permalink":"/docs/UIFrameworks/Modules"},"next":{"title":"JSX","permalink":"/docs/UIFrameworks/JSX"}}'),t=r(85893),l=r(50065);let s={sidebar_position:9},a="Ternary Operator & RenderHTML",o={},d=[{value:"Ternary Operator Definition",id:"ternary-operator-definition",level:2},{value:"<strong>REACT</strong>",id:"react",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"Usage in <code>App.tsx</code>",id:"usage-in-apptsx",level:3},{value:"Short Explanation",id:"short-explanation",level:3},{value:"<strong>SVELTE</strong>",id:"svelte",level:2},{value:"Syntax of Ternary Operaor in Svelte",id:"syntax-of-ternary-operaor-in-svelte",level:3},{value:"Example of Ternary Operaor in Svelte",id:"example-of-ternary-operaor-in-svelte",level:3},{value:"Explanation",id:"explanation",level:3},{value:"<strong>REACT</strong> - Render HTML",id:"react---render-html",level:2},{value:"Definition of Render HTML",id:"definition-of-render-html",level:3},{value:"Syntax of Render HTML",id:"syntax-of-render-html",level:3},{value:"Example of Render HTML",id:"example-of-render-html",level:3},{value:"Explanation of the above example",id:"explanation-of-the-above-example",level:3},{value:"<strong>SVELTE - Render HTML</strong>",id:"svelte---render-html",level:2},{value:"Definition of Render HTML in Svelte",id:"definition-of-render-html-in-svelte",level:3},{value:"Syntax of Render HTML in Svelte",id:"syntax-of-render-html-in-svelte",level:3},{value:"Example of Render HTML in Svelte",id:"example-of-render-html-in-svelte",level:3},{value:"Explanation of the above Example",id:"explanation-of-the-above-example-1",level:3}];function c(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"ternary-operator--renderhtml",children:"Ternary Operator & RenderHTML"})}),"\n",(0,t.jsx)(n.h2,{id:"ternary-operator-definition",children:"Ternary Operator Definition"}),"\n",(0,t.jsx)(n.h2,{id:"react",children:(0,t.jsx)(n.strong,{children:"REACT"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"Ternary Operator"})," is a short-hand ",(0,t.jsx)(n.code,{children:"if-else"})," statement.\r\nIt evaluates a condition and returns one value if ",(0,t.jsx)(n.code,{children:"true"})," and another if ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"condition ? valueIfTrue : valueIfFalse;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// File: Greeting.tsx\r\nimport React from 'react';\r\n\r\ntype GreetingProps = {\r\n  isLoggedIn: boolean;\r\n  username: string;\r\n};\r\n\r\nconst Greeting= ({ isLoggedIn, username }).GreetingProps => {\r\n  return (\r\n    <div>\r\n      <h2>\r\n        {isLoggedIn ? `Welcome, ${username}!` : \"Please log in.\"}\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Greeting;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"usage-in-apptsx",children:["Usage in ",(0,t.jsx)(n.code,{children:"App.tsx"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// File: App.tsx\r\nimport React from 'react';\r\nimport Greeting from './Greeting';\r\n\r\nconst App = () => {\r\n  const userLoggedIn = true;\r\n  const name = \"NBT\";\r\n\r\n  return (\r\n    <div>\r\n      <Greeting isLoggedIn={userLoggedIn} username={name} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"short-explanation",children:"Short Explanation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"isLoggedIn ? ... : ..."})," is a ",(0,t.jsx)(n.strong,{children:"ternary condition"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"isLoggedIn"})," is ",(0,t.jsx)(n.code,{children:"true"}),", it shows ",(0,t.jsx)(n.code,{children:'"Welcome, NBT!"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["If ",(0,t.jsx)(n.code,{children:"false"}),", it shows ",(0,t.jsx)(n.code,{children:'"Please log in."'}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Ternary is useful for quick decisions inside JSX."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"svelte",children:(0,t.jsx)(n.strong,{children:"SVELTE"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-of-ternary-operaor-in-svelte",children:"Syntax of Ternary Operaor in Svelte"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"condition ? valueIfTrue : valueIfFalse\n"})}),"\n",(0,t.jsx)(n.p,{children:"In Svelte (inside markup):"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-svelte",children:"{condition ? 'Yes' : 'No'}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-of-ternary-operaor-in-svelte",children:"Example of Ternary Operaor in Svelte"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-svelte",children:"\x3c!-- File: Greeting.svelte --\x3e\r\n<script lang=\"ts\">\r\n  export let isLoggedIn: boolean;\r\n  export let username: string;\r\n<\/script>\r\n\r\n<h2>{isLoggedIn ? `Welcome, ${username}!` : 'Please log in.'}</h2>\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- File: App.svelte --\x3e\r\n<script lang="ts">\r\n  import Greeting from \'./Greeting.svelte\';\r\n\r\n  let userLoggedIn = true;\r\n  let name = "NBT";\r\n<\/script>\r\n\r\n<Greeting isLoggedIn={userLoggedIn} username={name} />\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"{isLoggedIn ? ... : ...}"})," works exactly like in React JSX."]}),"\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.strong,{children:"ternary operator"})," checks a condition and chooses which text to display."]}),"\n",(0,t.jsx)(n.li,{children:"Ideal for small conditional logic inside markup."}),"\n"]}),"\n",(0,t.jsxs)(n.h2,{id:"react---render-html",children:[(0,t.jsx)(n.strong,{children:"REACT"})," - Render HTML"]}),"\n",(0,t.jsx)(n.h3,{id:"definition-of-render-html",children:"Definition of Render HTML"}),"\n",(0,t.jsxs)(n.p,{children:["In React, HTML is rendered using ",(0,t.jsx)(n.strong,{children:"JSX (JavaScript XML)"})," \u2014 a syntax that allows us to write\r\nHTML-like code inside JavaScript/TypeScript.\r\nReact components return JSX to display UI on the browser."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"syntax-of-render-html",children:"Syntax of Render HTML"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"// A basic React component rendering HTML\r\nconst ComponentName: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h1>Title</h1>\r\n      <p>Description</p>\r\n    </div>\r\n  );\r\n};\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-of-render-html",children:"Example of Render HTML"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// File: RenderHTMLExample.tsx\r\nimport React from \'react\';\r\n\r\nconst RenderHTMLExample: React.FC = () => {\r\n  const title: string = "Welcome to React!";\r\n  const description: string = "This is rendered using JSX in TypeScript.";\r\n\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1> {/* Rendering a variable inside HTML */}\r\n      <p>{description}</p> {/* You can also insert JS/TS values using {} */}\r\n      <ul>\r\n        <li>Reusable Components</li>\r\n        <li>Typed Props & State</li>\r\n        <li>JSX Syntax</li>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RenderHTMLExample;\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"explanation-of-the-above-example",children:"Explanation of the above example"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["React uses ",(0,t.jsx)(n.strong,{children:"JSX"})," to render HTML inside components."]}),"\n",(0,t.jsxs)(n.li,{children:["You can use ",(0,t.jsx)(n.strong,{children:"TypeScript variables"})," inside ",(0,t.jsx)(n.code,{children:"{}"})," to display dynamic content."]}),"\n",(0,t.jsxs)(n.li,{children:["JSX looks like HTML but compiles to ",(0,t.jsx)(n.code,{children:"React.createElement()"})," under the hood."]}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"return (...)"})," inside a component to show UI."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"svelte---render-html",children:(0,t.jsx)(n.strong,{children:"SVELTE - Render HTML"})}),"\n",(0,t.jsx)(n.h3,{id:"definition-of-render-html-in-svelte",children:"Definition of Render HTML in Svelte"}),"\n",(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.strong,{children:"Svelte"}),", HTML is written ",(0,t.jsxs)(n.strong,{children:["directly inside the ",(0,t.jsx)(n.code,{children:".svelte"})," component"]}),", without JSX.\r\nYou can insert ",(0,t.jsx)(n.strong,{children:"JavaScript or TypeScript variables"})," inside ",(0,t.jsx)(n.code,{children:"{}"})," to display dynamic content \u2014\r\nsimilar to JSX in React."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"syntax-of-render-html-in-svelte",children:"Syntax of Render HTML in Svelte"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- A basic Svelte component rendering HTML --\x3e\r\n<script lang="ts">\r\n  let title: string = "Title";\r\n  let description: string = "Description";\r\n<\/script>\r\n\r\n<div>\r\n  <h1>{title}</h1>\r\n  <p>{description}</p>\r\n</div>\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-of-render-html-in-svelte",children:"Example of Render HTML in Svelte"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- File: RenderHTMLExample.svelte --\x3e\r\n<script lang="ts">\r\n  let title: string = "Welcome to Svelte!";\r\n  let description: string = "This is rendered using native HTML in a Svelte component.";\r\n<\/script>\r\n\r\n<div>\r\n  <h1>{title}</h1> \x3c!-- Rendering a variable --\x3e\r\n  <p>{description}</p>\r\n\r\n  <ul>\r\n    <li>Reactive Statements</li>\r\n    <li>Simple Syntax</li>\r\n    <li>TypeScript Support</li>\r\n  </ul>\r\n</div>\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"explanation-of-the-above-example-1",children:"Explanation of the above Example"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["No JSX is needed \u2014 just regular HTML with embedded ",(0,t.jsx)(n.code,{children:"{}"})," for dynamic values."]}),"\n",(0,t.jsxs)(n.li,{children:["Variables declared in the ",(0,t.jsx)(n.code,{children:"<script>"})," block can be used directly in the markup."]}),"\n",(0,t.jsx)(n.li,{children:"Svelte compiles this to highly optimized vanilla JS at build time."}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,n,r){r.d(n,{Z:()=>a,a:()=>s});var i=r(67294);let t={},l=i.createContext(t);function s(e){let n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);