"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[40770],{12742:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var r=t(45119),s=t(74848),o=t(28453);const i={tags:["C++","Design Patterns"]},a="'Singleton' Design Pattern using simple program",l={authorsImageUrls:[]},c=[];function g(n){const e={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Definition:"})," Ensure a class only has one instance and provide a global point of access to it."]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Program:"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-cpp",children:'#include "iostream"\r\nusing namespace std;\r\n\r\nclass Singleton\r\n{\r\nprivate:\r\n    static Singleton* instance;\r\n    Singleton() {}\r\n\r\npublic:\r\n    static Singleton* Instance()\r\n    {\r\n        if(instance == NULL)\r\n        {\r\n            instance = new Singleton();\r\n        }\r\n        return instance;\r\n    }\r\n\r\n    void Show()\r\n    {\r\n        cout&lt;&lt;"Singleton Class"&lt;&lt;endl;\r\n    }\r\n};\r\n\r\nSingleton* Singleton::instance = NULL;\r\n\r\nint main()\r\n{\r\n    Singleton* obj1 = Singleton::Instance();\r\n    obj1->Show();\r\n\r\n    Singleton* obj2 = Singleton::Instance();\r\n    obj2->Show();\r\n\r\n    getchar();\r\n\r\n    return 0;\r\n}\r\n\r\n/*\r\nOUT PUT\r\n-------\r\nSingleton Class\r\nSingleton Class\r\n*/\n'})})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(g,{...n})}):g(n)}},28453:(n,e,t)=>{t.d(e,{R:()=>i,x:()=>a});var r=t(96540);const s={},o=r.createContext(s);function i(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),r.createElement(o.Provider,{value:e},n.children)}},45119:n=>{n.exports=JSON.parse('{"permalink":"/blog/2012/04/06/singleton-design-pattern-using-simple-program","source":"@site/blog/2012-04-06-singleton-design-pattern-using-simple-program.md","title":"\'Singleton\' Design Pattern using simple program","description":"Definition: Ensure a class only has one instance and provide a global point of access to it.","date":"2012-04-06T00:00:00.000Z","tags":[{"inline":true,"label":"C++","permalink":"/blog/tags/c"},{"inline":true,"label":"Design Patterns","permalink":"/blog/tags/design-patterns"}],"readingTime":0.5,"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["C++","Design Patterns"]},"unlisted":false,"prevItem":{"title":"\'Factory Method\' Design Pattern using simple program","permalink":"/blog/2012/04/06/factorymethod"},"nextItem":{"title":"\u2018AbstractFactory\u2019 Design Pattern using simple program","permalink":"/blog/2012/04/04/abstractfactory-designpatter"}}')}}]);