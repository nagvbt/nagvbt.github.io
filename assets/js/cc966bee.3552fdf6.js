"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[91006],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),u=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),s=u(n),d=a,f=s["".concat(p,".").concat(d)]||s[d]||m[d]||l;return n?r.createElement(f,o(o({ref:t},c),{},{components:n})):r.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[s]="string"==typeof e?e:a,o[1]=i;for(var u=2;u<l;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},39650:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const l={title:"Simple Queue program in C++",date:"2012-04-02",categories:["c-cpp-mfc-vcpp"],tags:["Data Structures"]},o=void 0,i={permalink:"/blog/2012/04/02/queue",source:"@site/blog/2012-04-02-queue.md",title:"Simple Queue program in C++",description:"Definition:",date:"2012-04-02T00:00:00.000Z",formattedDate:"April 2, 2012",tags:[{label:"Data Structures",permalink:"/blog/tags/data-structures"}],readingTime:.885,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Simple Queue program in C++",date:"2012-04-02",categories:["c-cpp-mfc-vcpp"],tags:["Data Structures"]},prevItem:{title:"'Builder' Design Pattern using simple program",permalink:"/blog/2012/04/03/builderdesignpatter"},nextItem:{title:"Simple Stack Program in C++",permalink:"/blog/2012/04/02/stack"}},p={authorsImageUrls:[]},u=[],c={toc:u},s="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition:")),(0,a.kt)("p",null,"A Queue\xa0is a data structure in which addition of new element takes place at the end called ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("strong",{parentName:"em"},"rear"))," of Queue and\xa0deletion of existing element takes place at the other end called ",(0,a.kt)("em",{parentName:"p"},(0,a.kt)("strong",{parentName:"em"},"front"))," of Queue\xa0."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Principle:")),(0,a.kt)("p",null,"Queue\xa0works on the ",(0,a.kt)("strong",{parentName:"p"},"FIFO")," \u2013 ",(0,a.kt)("strong",{parentName:"p"},"F"),"irst\xa0",(0,a.kt)("strong",{parentName:"p"},"I"),"n ",(0,a.kt)("strong",{parentName:"p"},"F"),"irst ",(0,a.kt)("strong",{parentName:"p"},"O"),"ut principle"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include "stdafx.h"\n#include "iostream"\nusing namespace std;\n\n#define MAX 10\n\nclass Queue\n{\nprivate:\n       int arr\\[MAX\\];\n       int front, rear;\n\npublic:\n      Queue()\n      {\n            front = -1;\n            rear  = -1;\n\n      }\n\n       void Add(int item)\n      {\n             if(rear == MAX-1)\n            {\n                  cout&lt;&lt;endl&lt;&lt; "Queue is full";\n                   return;\n            }\n\n            rear++;\n            arr\\[rear\\] = item;\n\n             if( front == -1 )\n                  front = 0;\n      }\n\n       int Delete()\n      {\n             if(front == -1)\n            {\n                  cout&lt;&lt;endl&lt;&lt; "Queue is empty";\n                   return NULL;\n            }\n\n        int data = arr\\[front\\];\n\n             if( front == rear)\n                  front = rear = -1;\n             else\n                  front++;\n\n             return data;\n      }\n};\n\nint main()\n{\n      Queue q;\n\n      q.Add(1);\n      q.Add(2);\n      q.Add(3);\n\n       int i = q.Delete();\n      cout&lt;&lt;endl&lt;&lt; "item="" deleted="&lt;&lt;i&lt;&lt;&lt;span class=" hiddenspellerror"="" pre=""&gt;endl;\n\n      i = q.Delete();\n      cout&lt;&lt;endl&lt;&lt; "Item deleted = "&lt;&lt;i&lt;&lt;endl;\n\n       return 0;\n}\n\n/\\*\nOUTPUT\n----------------\nItem deleted = 1\n\nItem deleted = 2\n\\*/\n')))}m.isMDXComponent=!0}}]);