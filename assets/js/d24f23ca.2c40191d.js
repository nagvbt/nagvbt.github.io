"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[46964],{3905:(n,t,e)=>{e.d(t,{Zo:()=>d,kt:()=>m});var a=e(67294);function o(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function r(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,a)}return e}function l(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?r(Object(e),!0).forEach((function(t){o(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):r(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function p(n,t){if(null==n)return{};var e,a,o=function(n,t){if(null==n)return{};var e,a,o={},r=Object.keys(n);for(a=0;a<r.length;a++)e=r[a],t.indexOf(e)>=0||(o[e]=n[e]);return o}(n,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)e=r[a],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(o[e]=n[e])}return o}var c=a.createContext({}),i=function(n){var t=a.useContext(c),e=t;return n&&(e="function"==typeof n?n(t):l(l({},t),n)),e},d=function(n){var t=i(n.components);return a.createElement(c.Provider,{value:t},n.children)},C="mdxType",s={inlineCode:"code",wrapper:function(n){var t=n.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(n,t){var e=n.components,o=n.mdxType,r=n.originalType,c=n.parentName,d=p(n,["components","mdxType","originalType","parentName"]),C=i(e),g=o,m=C["".concat(c,".").concat(g)]||C[g]||s[g]||r;return e?a.createElement(m,l(l({ref:t},d),{},{components:e})):a.createElement(m,l({ref:t},d))}));function m(n,t){var e=arguments,o=t&&t.mdxType;if("string"==typeof n||o){var r=e.length,l=new Array(r);l[0]=g;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=n,p[C]="string"==typeof n?n:o,l[1]=p;for(var i=2;i<r;i++)l[i]=e[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,e)}g.displayName="MDXCreateElement"},36726:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>s,frontMatter:()=>r,metadata:()=>p,toc:()=>i});var a=e(87462),o=(e(67294),e(3905));const r={tags:["MFC"]},l="How to Expand and Contract a MFC Dialog ?",p={permalink:"/blog/2012/04/01/expand-and-contract-a-mfc-dialog",source:"@site/blog/2012-04-01-expand-and-contract-a-mfc-dialog.md",title:"How to Expand and Contract a MFC Dialog ?",description:"This article gives the ability to make MFC dialogs expand or contract. The\xa0CExpandContractHelper simplifies the process to \xa0expand or contract MFC Dialog.",date:"2012-04-01T00:00:00.000Z",formattedDate:"April 1, 2012",tags:[{label:"MFC",permalink:"/blog/tags/mfc"}],readingTime:2.68,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["MFC"]},prevItem:{title:"Simple Stack Program in C++",permalink:"/blog/2012/04/02/stack"},nextItem:{title:"mfc-activex-control-which-can-be-used-in-html-pages",permalink:"/blog/2012/04/01/mfc-activex-control-which-can-be-used-in-html-pages"}},c={authorsImageUrls:[]},i=[],d={toc:i},C="wrapper";function s(n){let{components:t,...e}=n;return(0,o.kt)(C,(0,a.Z)({},d,e,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This article gives the ability to make MFC dialogs expand or contract. The\xa0CExpandContractHelper simplifies the process to \xa0expand or contract MFC Dialog."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Steps to use CExpandContractHelper\xa0:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create Dialog Based application"),(0,o.kt)("li",{parentName:"ol"},"Place the controls as shown below"),(0,o.kt)("li",{parentName:"ol"},"Add the CExpandContractHelper.cpp & CExpandContractHelper.h files to the project"),(0,o.kt)("li",{parentName:"ol"},"Create the in the Dialog class CExpandContractHelper","*"," m_pECH;")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"CExpandDialogDlg::CExpandDialogDlg(CWnd* pParent =NULL)\n    : CDialog(CExpandDialogDlg::IDD, pParent)\n{\n    m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);\n    //Step - 1 Create CExpandContractHelper\n    m_pECH = new CExpandContractHelper(IDC_PIC_START, IDC_PIC_END, this);\n}\n")),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Call ExpandContract in the OnInitDialog")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"BOOL CExpandDialogDlg::OnInitDialog()\n{\n    CDialog::OnInitDialog();\n    SetIcon(m_hIcon, TRUE);         // Set big icon\n    SetIcon(m_hIcon, FALSE);        // Set small icon\n    //Step - 2 Call ExpandContract\n    m_pECH->ExpandContract((CButton*)GetDlgItem(IDC_BN_EXPAND_CONTRACT));\n    return TRUE;\n}\n")),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Call ExpandContract in the button handler OnBnClickedBnExpandContract")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"void CExpandDialogDlg::OnBnClickedBnExpandContract()\n{\n    //Step - 3 Call ExpandContract\n    m_pECH->ExpandContract((CButton*)GetDlgItem(IDC_BN_EXPAND_CONTRACT));\n}\n")),(0,o.kt)("p",null,"CExpandContractHelper class"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"//////////////////////////////////////////////////\n// Purpose: To exapand or contract a dialog control\n//////////////////////////////////////////////////\nclass CExpandContractHelper\n{\npublic:\n    CExpandContractHelper(UINT nStart, UINT nEnd, CDialog\\* dlg);\n    ~CExpandContractHelper(void);\nprotected:\n    // ID of start picture control\n    UINT m_nStart;\n    // ID of end picture control\n    UINT m_nEnd;\n    CDialog* m_dlg;\n    CButton* m_pButton;\n    CString m_sExpand;\n    CString m_sContract;\npublic:\n    void ExpandContract(CButton* pButton);\nprotected:\n    BOOL IsExpand();\n};\n")),(0,o.kt)("p",null,"CExpandContractHelper.cpp"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "StdAfx.h"\n#include "ExpandContractHelper.h"\nCExpandContractHelper::~CExpandContractHelper(void)\n{\n}\nCExpandContractHelper::CExpandContractHelper(\n    UINT nStart, // Start Picture control ID\n    UINT nEnd,   // End  Picture control ID\n    CDialog *dlg // Dialog pointer\n    )\n{\n    m_nStart = nStart;\n    m_nEnd   = nEnd;\n    m_dlg    = dlg;\n}\nBOOL CExpandContractHelper::IsExpand()\n{\n    // 1 - Load button caption Expand/Contact\n    m_sExpand = "&amp;Expand >>";\n    m_sContract = "&lt;&lt; &amp;Contract";\n    // 2 - Find out if we need to expand or collapse the dialog\n    CString strCaption;\n    m_pButton->GetWindowText( strCaption );\n    BOOL bExpand = ( strCaption == m_sExpand ); // Collapse by default\n    return bExpand;\n}\nvoid CExpandContractHelper::ExpandContract(\n    CButton* pButton  // Expand Contract button pointer\n    )\n{\n    m_pButton = pButton;\n    // 3 - Get current dialog window rectangle\n    CRect rcDialog;\n    m_dlg->GetWindowRect( &amp;rcDialog );\n    int nNewHeight = -1;\n    if( IsExpand() )\n    {\n        // 4a - Change Expand/Contract button caption\n        pButton->SetWindowText( m_sContract );\n        // 4b - Calculate new dialog height\n        CWnd* pWndLarge = m_dlg->GetDlgItem( m_nEnd );\n        ASSERT_VALID( pWndLarge );\n        CRect rcLarge;\n        pWndLarge->GetWindowRect( &amp;rcLarge );\n        nNewHeight = rcLarge.top-rcDialog.top;\n    }\n    else\n    {\n        // 5a - Change Expand/Contract button caption\n        pButton->SetWindowText( m_sExpand );\n        // 5b - Calculate new dialog height\n        CWnd* pWndSmall = m_dlg->GetDlgItem( m_nStart );\n        ASSERT_VALID( pWndSmall );\n        pWndSmall->ShowWindow(FALSE);\n        CRect rcSmall;\n        pWndSmall->GetWindowRect( &amp;rcSmall );\n        nNewHeight = rcSmall.top-rcDialog.top;\n    }\n    // 6 - Set new dialog height\n    ASSERT( nNewHeight > 0 );\n    m_dlg->SetWindowPos( NULL, 0, 0,\n                        rcDialog.Width(), nNewHeight,\n                        SWP_NOMOVE | SWP_NOZORDER );\n    // 7 - Set the enabled state for each control depending on whether\n    // the control is currently visible or not\n    CWnd* pWndControl = m_dlg->GetWindow( GW_CHILD );\n    while( pWndControl != NULL )\n    {\n        CRect rcControl;\n        pWndControl->GetWindowRect( &amp;rcControl );\n        pWndControl->EnableWindow( rcControl.top &lt;= rcDialog.top + nNewHeight );\n        pWndControl = pWndControl->GetWindow( GW_HWNDNEXT );\n    }\n    // 8 - Check if a control still has the focus\n    // (can lose it if the active control becomes disabled)\n    CWnd* pWndActiveControl = CWnd::GetFocus();\n    if( pWndActiveControl == NULL )\n    {\n        // 9 - Set focus to "first" control on dialog\n        CWnd* pWndFirstControl = m_dlg->GetNextDlgTabItem( NULL );\n        ASSERT_VALID( pWndFirstControl );\n        ASSERT( pWndFirstControl->IsWindowEnabled() );\n        pWndFirstControl->SetFocus();\n    }\n}\n')))}s.isMDXComponent=!0}}]);