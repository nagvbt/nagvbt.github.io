"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[88651],{98005:(r,n,e)=>{e.r(n),e.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=e(85893),o=e(11151);const a={tags:["C++","Design Patterns"]},c="'Factory Method' Design Pattern using simple program",s={permalink:"/blog/2012/04/06/factorymethod",source:"@site/blog/2012-04-06-factorymethod.md",title:"'Factory Method' Design Pattern using simple program",description:"Definition:",date:"2012-04-06T00:00:00.000Z",formattedDate:"April 6, 2012",tags:[{label:"C++",permalink:"/blog/tags/c"},{label:"Design Patterns",permalink:"/blog/tags/design-patterns"}],readingTime:.87,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["C++","Design Patterns"]},unlisted:!1,prevItem:{title:"Part-3: C++, C#, Java Syntax Differences",permalink:"/blog/2012/04/12/syntax-3"},nextItem:{title:"'Singleton' Design Pattern using simple program",permalink:"/blog/2012/04/06/singleton-design-pattern-using-simple-program"}},i={authorsImageUrls:[]},l=[];function u(r){const n={code:"code",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Definition:"})}),"\n",(0,t.jsx)(n.p,{children:"Creates an instance of several derived classes. or Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Program:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include "iostream"\r\nusing namespace std;\r\n\r\nclass Product\r\n{\r\npublic:\r\n    virtual void Show() = 0;\r\n};\r\n\r\nclass ConcreteProductA : public Product\r\n{\r\npublic:\r\n    virtual void Show()\r\n    {\r\n      cout<<"ConcreteProductA"<<endl;\r\n    }\r\n};\r\n\r\nclass ConcreteProductB : public Product\r\n{\r\npublic:\r\n    virtual void Show()\r\n    {\r\n      cout<<"ConcreteProductB"<<endl;\r\n    }\r\n};\r\n\r\nclass Creator\r\n{\r\npublic:\r\n    virtual Product* FactoryMethod() = 0;\r\n};\r\n\r\nclass ConcreteCreatorA : public Creator\r\n{\r\npublic:\r\n    ConcreteCreatorA() {}\r\n    virtual Product* FactoryMethod()\r\n    {\r\n      return new ConcreteProductA();\r\n    }\r\n};\r\n\r\nclass ConcreteCreatorB : public Creator\r\n{\r\npublic:\r\n    virtual Product* FactoryMethod()\r\n    {\r\n      return new ConcreteProductB();\r\n    }\r\n};\r\n\r\nvoid main()\r\n{\r\n  Creator* creators[2];\r\n\r\n  creators[0] =  new ConcreteCreatorA();\r\n  creators[1] =  new ConcreteCreatorB();\r\n\r\n  for (int i=0; i < 2; i++)    {     Product* product = creators[i]->FactoryMethod();\r\n    cout<<"Created "<<Show();\r\n  }\r\n\r\n  getchar();\r\n}\r\n\r\n/*\r\nOUT PUT\r\n-------\r\nCreated\r\nConcreteProductA\r\nCreated\r\nConcreteProductB\r\n*/\n'})})]})}function d(r={}){const{wrapper:n}={...(0,o.a)(),...r.components};return n?(0,t.jsx)(n,{...r,children:(0,t.jsx)(u,{...r})}):u(r)}},11151:(r,n,e)=>{e.d(n,{Z:()=>s,a:()=>c});var t=e(67294);const o={},a=t.createContext(o);function c(r){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof r?r(n):{...n,...r}}),[n,r])}function s(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(o):r.components||o:c(r.components),t.createElement(a.Provider,{value:n},r.children)}}}]);