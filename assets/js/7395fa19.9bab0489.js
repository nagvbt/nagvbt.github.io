"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[26615],{3905:(n,e,t)=>{t.d(e,{Zo:()=>p,kt:()=>f});var r=t(67294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},o=Object.keys(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(r=0;r<o.length;r++)t=o[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=r.createContext({}),c=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):i(i({},e),n)),t},p=function(n){var e=c(n.components);return r.createElement(s.Provider,{value:e},n.children)},g="mdxType",u={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,o=n.originalType,s=n.parentName,p=l(n,["components","mdxType","originalType","parentName"]),g=c(t),m=a,f=g["".concat(s,".").concat(m)]||g[m]||u[m]||o;return t?r.createElement(f,i(i({ref:e},p),{},{components:t})):r.createElement(f,i({ref:e},p))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l[g]="string"==typeof n?n:a,i[1]=l;for(var c=2;c<o;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},26023:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const o={title:"'Singleton' Design Pattern using simple program",date:"2012-04-06",categories:["c-cpp-mfc-vcpp"],tags:["cpp","design-patterns"]},i=void 0,l={permalink:"/blog/2012/04/06/singleton-design-pattern-using-simple-program",source:"@site/blog/2012-04-06-singleton-design-pattern-using-simple-program.md",title:"'Singleton' Design Pattern using simple program",description:"Definition: Ensure a class only has one instance and provide a global point of access to it.",date:"2012-04-06T00:00:00.000Z",formattedDate:"April 6, 2012",tags:[{label:"cpp",permalink:"/blog/tags/cpp"},{label:"design-patterns",permalink:"/blog/tags/design-patterns"}],readingTime:.44,hasTruncateMarker:!1,authors:[],frontMatter:{title:"'Singleton' Design Pattern using simple program",date:"2012-04-06",categories:["c-cpp-mfc-vcpp"],tags:["cpp","design-patterns"]},prevItem:{title:"'Factory Method' Design Pattern using simple program",permalink:"/blog/2012/04/06/factorymetho"},nextItem:{title:"\u2018AbstractFactory\u2019 Design Pattern using simple program",permalink:"/blog/2012/04/04/abstractfactory-designpatter"}},s={authorsImageUrls:[]},c=[],p={toc:c},g="wrapper";function u(n){let{components:e,...t}=n;return(0,a.kt)(g,(0,r.Z)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition:")," Ensure a class only has one instance and provide a global point of access to it."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Program:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include "iostream"\nusing namespace std;\n\nclass Singleton\n{\nprivate:\n    static Singleton\\* instance;\n    Singleton() {}\n\npublic:\n    static Singleton\\* Instance()\n    {\n        if(instance == NULL)\n        {\n            instance = new Singleton();\n        }\n        return instance;\n    }\n\n    void Show()\n    {\n        cout&lt;&lt;"Singleton Class"&lt;&lt;endl;\n    }\n};\n\nSingleton\\* Singleton::instance = NULL;\n\nint main()\n{\n    Singleton\\* obj1 = Singleton::Instance();\n    obj1-&gt;Show();\n\n    Singleton\\* obj2 = Singleton::Instance();\n    obj2-&gt;Show();\n\n    getchar();\n\n    return 0;\n}\n\n/\\*\nOUT PUT\n-------\nSingleton Class\nSingleton Class\n\\*/\n')))}u.isMDXComponent=!0}}]);