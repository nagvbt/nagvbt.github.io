"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[31608],{28453:(n,e,r)=>{r.d(e,{R:()=>d,x:()=>l});var t=r(96540);const i={},o=t.createContext(i);function d(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:d(n.components),t.createElement(o.Provider,{value:e},n.children)}},87501:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"Cpp/DataStructures/DoublyLinkedList","title":"Doubly Linked List","description":"","source":"@site/docs/Cpp/DataStructures/DoublyLinkedList.md","sourceDirName":"Cpp/DataStructures","slug":"/Cpp/DataStructures/DoublyLinkedList","permalink":"/docs/Cpp/DataStructures/DoublyLinkedList","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"cpp","previous":{"title":"Data Structures","permalink":"/docs/Cpp/DataStructures/"},"next":{"title":"Linked List","permalink":"/docs/Cpp/DataStructures/LinkedList"}}');var i=r(74848),o=r(28453);const d={},l="Doubly Linked List",s={},a=[];function u(n){const e={code:"code",h1:"h1",header:"header",pre:"pre",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"doubly-linked-list",children:"Doubly Linked List"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'\r\n#include "iostream"\r\nusing namespace std;\r\n\r\nstruct Node\r\n{\r\n    int data;\r\n    struct Node *next;\r\n    struct Node *prev;\r\n}*pHead;\r\n \r\n/*\r\n Class Declaration \r\n */\r\nclass DoublyLinkedList\r\n{\r\n    public:\r\n        void Create_list(int value);\r\n        void Add_atBegin(int value);\r\n        void Add_After(int value, int position);\r\n        void Delete(int value);\r\n        void Search(int value);\r\n        void Print();\r\n        void Count();\r\n        void Reverse();\r\n        DoublyLinkedList()\r\n        {\r\n            pHead = NULL;  \r\n        }\r\n};\r\n \r\n/*\r\n * Main: Conatins Menu\r\n */\r\nint main()\r\n{\r\n    int choice, element, position;\r\n    DoublyLinkedList dl;\r\n    while (1)\r\n    {\r\n        cout<<endl<<"----------------------------"<<endl;\r\n        cout<<endl<<"Operations on Doubly nexted list"<<endl;\r\n        cout<<endl<<"----------------------------"<<endl;         \r\n        cout<<"1.Create Node"<<endl;\r\n        cout<<"2.Add at begining"<<endl;\r\n        cout<<"3.Add after position"<<endl;\r\n        cout<<"4.Delete"<<endl;\r\n        cout<<"5.Display"<<endl;\r\n        cout<<"6.Count"<<endl;\r\n        cout<<"7.Reverse"<<endl;\r\n        cout<<"8.Quit"<<endl;\r\n        cout<<"Enter your choice : ";\r\n        cin>>choice;\r\n        switch ( choice )\r\n        {\r\n        case 1:\r\n            cout<<"Enter the element: ";\r\n            cin>>element;\r\n            dl.Create_list(element);\r\n            cout<<endl;\r\n            break;\r\n        case 2:\r\n            cout<<"Enter the element: ";\r\n            cin>>element;\r\n            dl.Add_atBegin(element);\r\n            cout<<endl;\r\n            break;\r\n        case 3:\r\n            cout<<"Enter the element: ";\r\n            cin>>element;\r\n            cout<<"Insert Element after postion: ";\r\n            cin>>position;\r\n            dl.Add_After(element, position);\r\n            cout<<endl;\r\n            break;\r\n        case 4:\r\n            if (pHead == NULL)\r\n            {                      \r\n                cout<<"List empty,nothing to delete"<<endl;   \r\n                break;\r\n            }\r\n            cout<<"Enter the element for deletion: ";\r\n            cin>>element;\r\n            dl.Delete(element);\r\n            cout<<endl;\r\n            break;\r\n        case 5:\r\n            dl.Print();\r\n            cout<<endl;\r\n            break;\r\n        case 6:\r\n            dl.Count();\r\n            break;    \r\n        case 7:\r\n            if (pHead == NULL)\r\n            {\r\n                cout<<"List empty,nothing to Reverse"<<endl;\r\n                break;\r\n            }\r\n            dl.Reverse();\r\n            cout<<endl;\r\n            break;\r\n        case 8:\r\n            exit(1);\r\n        default:\r\n            cout<<"Wrong choice"<<endl;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n \r\n/*\r\n * Create Double next List\r\n */\r\nvoid DoublyLinkedList::Create_list(int value)\r\n{\r\n    Node *s, *temp;\r\n    temp = new Node; \r\n    temp->data = value;\r\n    temp->next = NULL;\r\n\r\n    if (pHead == NULL)\r\n    {\r\n        temp->prev = NULL;\r\n        pHead = temp;\r\n    }\r\n    else\r\n    {\r\n        s = pHead;\r\n        while (s->next != NULL)\r\n  {\r\n            s = s->next;\r\n  }\r\n        s->next = temp;\r\n        temp->prev = s;\r\n    }\r\n}\r\n \r\n/*\r\n * Insertion at the beginning\r\n */\r\nvoid DoublyLinkedList::Add_atBegin(int value)\r\n{\r\n    if (pHead == NULL)\r\n    {\r\n        cout<<"First Create the list."<<endl;\r\n        return;\r\n    }\r\n    Node *temp = new Node;\r\n temp->prev = NULL;\r\n    temp->data = value;\r\n    temp->next = pHead;\r\n    pHead->prev = temp;\r\n    pHead = temp;\r\n    cout<<"Element Inserted"<<endl;\r\n}\r\n \r\n/*\r\n * Insertion of element at a particular position\r\n */\r\nvoid DoublyLinkedList::Add_After(int value, int pos)\r\n{\r\n    if (pHead == NULL)\r\n    {\r\n        cout<<"First Create the list."<<endl;\r\n        return;\r\n    }\r\n    struct Node *tmp, *q;\r\n    int i;\r\n    q = pHead;\r\n    for (i = 0;i < pos - 1;i++)\r\n    {\r\n        q = q->next;\r\n        if (q == NULL)\r\n        {\r\n            cout<<"There are less than ";\r\n            cout<<pos<<" elements."<<endl;\r\n            return;\r\n        }\r\n    }\r\n    tmp = new(struct Node);\r\n    tmp->data = value;\r\n    if (q->next == NULL)\r\n    {\r\n        q->next = tmp;\r\n        tmp->next = NULL;\r\n        tmp->prev = q;      \r\n    }\r\n    else\r\n    {\r\n        tmp->next = q->next;\r\n        tmp->next->prev = tmp;\r\n        q->next = tmp;\r\n        tmp->prev = q;\r\n    }\r\n    cout<<"Element Inserted"<<endl;\r\n}\r\n \r\n/*\r\n * Deletion of element from the list\r\n */\r\nvoid DoublyLinkedList::Delete(int value)\r\n{\r\n    struct Node *tmp, *q;\r\n     /*first element deletion*/\r\n    if (pHead->data == value)\r\n    {\r\n        tmp = pHead;\r\n        pHead = pHead->next;  \r\n        pHead->prev = NULL;\r\n        cout<<"Element Deleted"<<endl;\r\n        free(tmp);\r\n        return;\r\n    }\r\n    q = pHead;\r\n    while (q->next->next != NULL)\r\n    {   \r\n        /*Element deleted in between*/\r\n        if (q->next->data == value)  \r\n        {\r\n            tmp = q->next;\r\n            q->next = tmp->next;\r\n            tmp->next->prev = q;\r\n            cout<<"Element Deleted"<<endl;\r\n            free(tmp);\r\n            return;\r\n        }\r\n        q = q->next;\r\n    }\r\n     /*last element deleted*/\r\n    if (q->next->data == value)    \r\n    {  \r\n        tmp = q->next;\r\n        free(tmp);\r\n        q->next = NULL;\r\n        cout<<"Element Deleted"<<endl;\r\n        return;\r\n    }\r\n    cout<<"Element "<<value<<" not found"<<endl;\r\n}\r\n \r\n/*\r\n * Display elements of Doubly next List\r\n */\r\nvoid DoublyLinkedList::Print()\r\n{\r\n    struct Node *q;\r\n    if (pHead == NULL)\r\n    {\r\n        cout<<"List empty,nothing to display"<<endl;\r\n        return;\r\n    }\r\n    q = pHead;\r\n    cout<<"The Doubly next List is :"<<endl;\r\n    while (q != NULL)\r\n    {\r\n        cout<<q->data<<" <-> ";\r\n        q = q->next;\r\n    }\r\n    cout<<"NULL"<<endl;\r\n}\r\n \r\n/*\r\n * Number of elements in Doubly next List\r\n */\r\nvoid DoublyLinkedList::Count()\r\n{  \r\n    struct Node *q = pHead;\r\n    int cnt = 0;\r\n    while (q != NULL)\r\n    {\r\n        q = q->next;\r\n        cnt++;\r\n    }\r\n    cout<<"Number of elements are: "<<cnt<<endl;\r\n}\r\n \r\n/*\r\n * Reverse Doubly next List\r\n */\r\nvoid DoublyLinkedList::Reverse()\r\n{\r\n    struct Node *p1, *p2;\r\n    p1 = pHead;\r\n    p2 = p1->next;\r\n    p1->next = NULL;\r\n    p1->prev = p2;\r\n    while (p2 != NULL)arn start\r\n    {\r\n        p2->prev = p2->next;\r\n        p2->next = p1;\r\n        p1 = p2;\r\n        p2 = p2->prev; \r\n    }\r\n    pHead = p1;\r\n    cout<<"List Reversed"<<endl; \r\n}\n'})})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(u,{...n})}):u(n)}}}]);