"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["83705"],{94282:function(e,n,i){i.r(n),i.d(n,{frontMatter:()=>r,default:()=>h,toc:()=>a,metadata:()=>s,assets:()=>o,contentTitle:()=>c});var s=JSON.parse('{"id":"Languages/OOPS","title":"OOP Concepts and Definitions","description":"Core Principles of Object-Oriented Programming","source":"@site/docs/Languages/OOPS.md","sourceDirName":"Languages","slug":"/Languages/OOPS","permalink":"/docs/Languages/OOPS","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"Access Modifiers","permalink":"/docs/Languages/AccessModifiers"},"next":{"title":"Properties","permalink":"/docs/Languages/Properties"}}'),t=i(85893),l=i(50065);let r={sidebar_position:13},c="OOP Concepts and Definitions",o={},a=[{value:"Core Principles of Object-Oriented Programming",id:"core-principles-of-object-oriented-programming",level:2},{value:"1. Encapsulation",id:"1-encapsulation",level:3},{value:"2. Abstraction",id:"2-abstraction",level:3},{value:"3. Inheritance",id:"3-inheritance",level:3},{value:"4. Polymorphism",id:"4-polymorphism",level:3},{value:"Key OOP Terminology",id:"key-oop-terminology",level:2},{value:"Class",id:"class",level:3},{value:"Object",id:"object",level:3},{value:"Method",id:"method",level:3},{value:"Attribute/Property",id:"attributeproperty",level:3},{value:"Constructor",id:"constructor",level:3},{value:"Access Modifiers",id:"access-modifiers",level:3},{value:"Advanced OOP Concepts",id:"advanced-oop-concepts",level:2},{value:"Association",id:"association",level:3},{value:"Interface",id:"interface",level:3},{value:"Abstract Class",id:"abstract-class",level:3},{value:"Coupling &amp; Cohesion",id:"coupling--cohesion",level:3}];function d(e){let n={br:"br",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,l.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"oop-concepts-and-definitions",children:"OOP Concepts and Definitions"})}),"\n",(0,t.jsx)(n.h2,{id:"core-principles-of-object-oriented-programming",children:"Core Principles of Object-Oriented Programming"}),"\n",(0,t.jsx)(n.h3,{id:"1-encapsulation",children:"1. Encapsulation"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": Bundling data (attributes) and methods (functions) that operate on that data into a\r\nsingle unit (class)"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Key Aspects"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Data hiding (restricting direct access to some components)"}),"\n",(0,t.jsx)(n.li,{children:"Exposing only necessary interfaces"}),"\n",(0,t.jsx)(n.li,{children:"Protecting object integrity by controlling access"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-abstraction",children:"2. Abstraction"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": Showing only essential features while hiding implementation details",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Key Aspects"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Simplifying complex reality by modeling classes"}),"\n",(0,t.jsx)(n.li,{children:"Focusing on what an object does rather than how"}),"\n",(0,t.jsx)(n.li,{children:"Creating simple interfaces for complex operations"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-inheritance",children:"3. Inheritance"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": Creating new classes (derived/child) from existing ones (base/parent)",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Key Aspects"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Code reusability"}),"\n",(0,t.jsx)(n.li,{children:'Establishing "is-a" relationships'}),"\n",(0,t.jsx)(n.li,{children:"Single vs. multiple inheritance (language-dependent)"}),"\n",(0,t.jsx)(n.li,{children:"Method overriding (changing inherited behavior)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-polymorphism",children:"4. Polymorphism"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Definition"}),": Ability of objects to take on many forms"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Types"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compile-time/Static"}),": Method overloading (same name, different parameters)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Runtime/Dynamic"}),": Method overriding (same signature, different implementation)",(0,t.jsx)(n.br,{}),"\n",(0,t.jsx)(n.strong,{children:"Key Aspects"}),":"]}),"\n",(0,t.jsx)(n.li,{children:"Interface-based programming"}),"\n",(0,t.jsx)(n.li,{children:'"Single interface, multiple implementations"'}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"key-oop-terminology",children:"Key OOP Terminology"}),"\n",(0,t.jsx)(n.h3,{id:"class",children:"Class"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Blueprint/template for creating objects"}),"\n",(0,t.jsx)(n.li,{children:"Defines attributes (data) and methods (behavior)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"object",children:"Object"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Instance of a class"}),"\n",(0,t.jsx)(n.li,{children:"Has state (current values of attributes), behavior (methods), and identity"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"method",children:"Method"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Function defined within a class"}),"\n",(0,t.jsx)(n.li,{children:"Operates on object's data"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"attributeproperty",children:"Attribute/Property"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Data/characteristics associated with an object"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"constructor",children:"Constructor"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Special method called when object is created"}),"\n",(0,t.jsx)(n.li,{children:"Initializes object's state"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"access-modifiers",children:"Access Modifiers"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Control visibility/accessibility of class members"}),"\n",(0,t.jsxs)(n.li,{children:["Common levels (specifics vary by language):","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Public: Accessible everywhere"}),"\n",(0,t.jsx)(n.li,{children:"Protected: Accessible within class and subclasses"}),"\n",(0,t.jsx)(n.li,{children:"Private: Accessible only within class"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"advanced-oop-concepts",children:"Advanced OOP Concepts"}),"\n",(0,t.jsx)(n.h3,{id:"association",children:"Association"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Relationship between objects where one object uses another"}),"\n",(0,t.jsxs)(n.li,{children:["Can be:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Aggregation"}),': "Has-a" relationship (weak ownership)']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Composition"}),': Strong "part-of" relationship (lifecycle dependency)']}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"interface",children:"Interface"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Contract defining what methods a class must implement"}),"\n",(0,t.jsx)(n.li,{children:"Pure abstraction (no implementation)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"abstract-class",children:"Abstract Class"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Class that cannot be instantiated"}),"\n",(0,t.jsx)(n.li,{children:"Contains abstract methods (no implementation) and/or concrete methods"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"coupling--cohesion",children:"Coupling & Cohesion"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Coupling"}),": Degree of interdependence between classes/modules (low is better)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cohesion"}),": How closely related responsibilities of a class are (high is better)"]}),"\n"]})]})}function h(e={}){let{wrapper:n}={...(0,l.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},50065:function(e,n,i){i.d(n,{Z:()=>c,a:()=>r});var s=i(67294);let t={},l=s.createContext(t);function r(e){let n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);