"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["1425"],{89406:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>i,default:()=>p,toc:()=>o,metadata:()=>s,assets:()=>c,contentTitle:()=>l});var s=JSON.parse('{"id":"Languages/Properties","title":"Properties","description":"Definition :","source":"@site/docs/Languages/Properties.md","sourceDirName":"Languages","slug":"/Languages/Properties","permalink":"/docs/Languages/Properties","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":14,"frontMatter":{"sidebar_position":14},"sidebar":"tutorialSidebar","previous":{"title":"Access Modifiers","permalink":"/docs/Languages/AccessModifiers"},"next":{"title":"Abstraction","permalink":"/docs/Languages/Abstraction"}}'),t=r(85893),a=r(50065);let i={sidebar_position:14},l="Properties",c={},o=[{value:"<strong>Definition :</strong>",id:"definition-",level:2},{value:"Syntax Format",id:"syntax-format",level:2},{value:"C# (Uses built-in <code>get</code>/<code>set</code> keywords)",id:"c-uses-built-in-getset-keywords",level:3},{value:"Java (Uses explicit getter/setter methods)",id:"java-uses-explicit-gettersetter-methods",level:3},{value:"Python (Uses <code>@property</code> decorator)",id:"python-uses-property-decorator",level:3},{value:"JavaScript (Uses <code>get</code>/<code>set</code> in class definition)",id:"javascript-uses-getset-in-class-definition",level:3},{value:"Examples",id:"examples",level:2},{value:"<strong>C# Example</strong>",id:"c-example",level:3},{value:"<strong>Java Example</strong>",id:"java-example",level:3},{value:"<strong>Python Example</strong>",id:"python-example",level:3},{value:"<strong>JavaScript Example</strong>",id:"javascript-example",level:3}];function d(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"properties",children:"Properties"})}),"\n",(0,t.jsx)(n.h2,{id:"definition-",children:(0,t.jsx)(n.strong,{children:"Definition :"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"property"})," is a class member that provides a flexible mechanism to ",(0,t.jsx)(n.strong,{children:"read"}),", ",(0,t.jsx)(n.strong,{children:"write"}),", or\r\n",(0,t.jsx)(n.strong,{children:"compute"})," the value of a private field. Properties encapsulate private data while exposing\r\ncontrolled access through ",(0,t.jsx)(n.strong,{children:"getters and setters"}),"."]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["Properties help implement ",(0,t.jsx)(n.strong,{children:"encapsulation"})," by allowing controlled access to internal data."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"syntax-format",children:"Syntax Format"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"c-uses-built-in-getset-keywords",children:["C# (Uses built-in ",(0,t.jsx)(n.code,{children:"get"}),"/",(0,t.jsx)(n.code,{children:"set"})," keywords)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"class className {\r\n    private string name;\r\n\r\n    public string Name {\r\n        get { return name; }\r\n        set { name = value; }\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"java-uses-explicit-gettersetter-methods",children:"Java (Uses explicit getter/setter methods)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class className {\r\n    private String name;\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    public void setName(String value) {\r\n        name = value;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"python-uses-property-decorator",children:["Python (Uses ",(0,t.jsx)(n.code,{children:"@property"})," decorator)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class className:\r\n    def __init__(self):\r\n        self._name = ""\r\n\r\n    @property\r\n    def name(self):\r\n        return self._name\r\n\r\n    @name.setter\r\n    def name(self, value):\r\n        self._name = value\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"javascript-uses-getset-in-class-definition",children:["JavaScript (Uses ",(0,t.jsx)(n.code,{children:"get"}),"/",(0,t.jsx)(n.code,{children:"set"})," in class definition)"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'class className {\r\n    constructor() {\r\n        this._name = "";\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"c-example",children:(0,t.jsx)(n.strong,{children:"C# Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'class Person {\r\n    private string name;\r\n\r\n    public string Name {\r\n        get { return name; }\r\n        set { name = value; }\r\n    }\r\n\r\n    public void displayName() {\r\n        Console.WriteLine("Name: " + Name);\r\n    }\r\n}\r\n\r\nclass Program {\r\n    static void Main() {\r\n        Person p = new Person();\r\n        p.Name = "Alice";            // using property setter\r\n        p.displayName();             // using property getter inside method\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"java-example",children:(0,t.jsx)(n.strong,{children:"Java Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Person {\r\n    private String name;\r\n\r\n    public String getName() {       // getter\r\n        return name;\r\n    }\r\n\r\n    public void setName(String name) { // setter\r\n        this.name = name;\r\n    }\r\n\r\n    public void displayName() {\r\n        System.out.println("Name: " + getName());\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Person p = new Person();\r\n        p.setName("Alice");         // using setter\r\n        p.displayName();            // using getter inside method\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"python-example",children:(0,t.jsx)(n.strong,{children:"Python Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'class Person:\r\n    def __init__(self):\r\n        self._name = ""\r\n\r\n    @property\r\n    def name(self):                # getter\r\n        return self._name\r\n\r\n    @name.setter\r\n    def name(self, value):        # setter\r\n        self._name = value\r\n\r\n    def display_name(self):\r\n        print("Name:", self.name)\r\n\r\np = Person()\r\np.name = "Alice"                   # using setter\r\np.display_name()                  # using getter\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"javascript-example",children:(0,t.jsx)(n.strong,{children:"JavaScript Example"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'class Person {\r\n    constructor() {\r\n        this._name = "";\r\n    }\r\n\r\n    get name() {                  // getter\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {             // setter\r\n        this._name = value;\r\n    }\r\n\r\n    displayName() {\r\n        console.log("Name:", this.name); // using getter\r\n    }\r\n}\r\n\r\nconst p = new Person();\r\np.name = "Alice";                 // using setter\r\np.displayName();                  // using getter\n'})}),"\n",(0,t.jsx)(n.h1,{id:"c",children:"C++"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"}),"\r\nC++ ",(0,t.jsx)(n.strong,{children:"does not have built-in properties"})," like C# or some other languages. Instead,\r\n",(0,t.jsx)(n.strong,{children:"getter and setter methods"})," are used to control access to private data members, simulating properties."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax in C++ (Using Getter and Setter methods)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class ClassName {\r\nprivate:\r\n    int data;\r\n\r\npublic:\r\n    // Setter\r\n    void setData(int value) {\r\n        data = value;\r\n    }\r\n\r\n    // Getter\r\n    int getData() {\r\n        return data;\r\n    }\r\n};\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example in C++"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\r\nusing namespace std;\r\n\r\nclass Account {\r\nprivate:\r\n    double balance;\r\n\r\npublic:\r\n    // Setter method (simulating a property)\r\n    void setBalance(double amount) {\r\n        if (amount >= 0)\r\n            balance = amount;\r\n        else\r\n            cout << "Invalid balance amount." << endl;\r\n    }\r\n\r\n    // Getter method\r\n    double getBalance() {\r\n        return balance;\r\n    }\r\n};\r\n\r\nint main() {\r\n    Account acc;\r\n    acc.setBalance(1000.50);\r\n    cout << "Balance: " << acc.getBalance() << endl;\r\n\r\n    acc.setBalance(-500);  // Invalid\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(n.h1,{id:"typescript",children:"TypeScript"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Note:"}),"\r\nTypeScript ",(0,t.jsx)(n.strong,{children:"supports getter and setter methods"})," using the ",(0,t.jsx)(n.code,{children:"get"})," and ",(0,t.jsx)(n.code,{children:"set"})," keywords, which\r\nallow safe and controlled access to class properties\u2014similar to C# and more elegant than C++."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax in TypeScript (Using Getter and Setter methods)"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"class ClassName {\r\n    private _data: number;\r\n\r\n    // Setter\r\n    set data(value: number) {\r\n        this._data = value;\r\n    }\r\n\r\n    // Getter\r\n    get data(): number {\r\n        return this._data;\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Example in TypeScript"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'class Account {\r\n    private _balance: number = 0;\r\n\r\n    // Setter method (simulating a property)\r\n    set balance(amount: number) {\r\n        if (amount >= 0) {\r\n            this._balance = amount;\r\n        } else {\r\n            console.log("Invalid balance amount.");\r\n        }\r\n    }\r\n\r\n    // Getter method\r\n    get balance(): number {\r\n        return this._balance;\r\n    }\r\n}\r\n\r\nconst acc = new Account();\r\nacc.balance = 1000.50;  // Setter called\r\nconsole.log("Balance: " + acc.balance);  // Getter called\r\n\r\nacc.balance = -500;  // Invalid\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"#properties",children:"Back to top"})})]})}function p(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},50065:function(e,n,r){r.d(n,{Z:()=>l,a:()=>i});var s=r(67294);let t={},a=s.createContext(t);function i(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);