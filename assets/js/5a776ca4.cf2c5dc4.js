"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[59978],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),i=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},b=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(r),b=o,m=u["".concat(c,".").concat(b)]||u[b]||f[b]||a;return r?n.createElement(m,s(s({ref:t},p),{},{components:r})):n.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=b;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:o,s[1]=l;for(var i=2;i<a;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}b.displayName="MDXCreateElement"},39909:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var n=r(87462),o=(r(67294),r(3905));const a={title:"Why size of an empty C++ class not zero?",date:"2011-09-18",categories:["c-cpp-mfc-vcpp"],tags:["cpp"]},s=void 0,l={permalink:"/blog/2011/09/18/why-size-of-an-empty-c-class-not-zero",source:"@site/blog/2011-09-18-why-size-of-an-empty-c-class-not-zero.md",title:"Why size of an empty C++ class not zero?",description:"To ensure that the addresses of two different objects will be different C++ compiler will allocate one byte of memory. The below sample code explains clearly. Because of this behaviour the addresses of class X objects are not equal even though there is no data present in the class X.",date:"2011-09-18T00:00:00.000Z",formattedDate:"September 18, 2011",tags:[{label:"cpp",permalink:"/blog/tags/cpp"}],readingTime:.505,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Why size of an empty C++ class not zero?",date:"2011-09-18",categories:["c-cpp-mfc-vcpp"],tags:["cpp"]},prevItem:{title:"Variable arguments handling in C/C++",permalink:"/blog/2011/09/18/variable-arguments-handling"},nextItem:{title:"COM Tutorial Step by Step",permalink:"/blog/2011/09/12/com-tutorial"}},c={authorsImageUrls:[]},i=[],p={toc:i},u="wrapper";function f(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To ensure that the addresses of two different objects will be different C++ compiler will allocate one byte of memory. The below sample code explains clearly. Because of this behaviour the addresses of class X objects are not equal even though there is no data present in the class X."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp true",metastring:"class X {",X:!0,"{":!0},'\n};\n\nclass Y {\n\n};\n\nvoid main() { X objX1, objX2; Y objY;\n\ncout<<"size of objX1: "<<sizeof(objX1)<<endl; //Output: 1 cout<<"size of objY: "<<sizeof(objY)<<endl; //Output: 1\n\n//Addresses cout<<"Address of objX1: "<<&objX1<<endl; cout<<"Address of objX2: "<<&objX2<<endl;\n\ncout<<"Address of objY: "<<&objY<<endl;\n\nif(&objX1 == &objX2) { cout<<"Never Happens"; } } \\[/source\\]\n')))}f.isMDXComponent=!0}}]);