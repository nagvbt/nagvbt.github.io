"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["47272"],{22100:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>l,default:()=>h,toc:()=>o,metadata:()=>s,assets:()=>c,contentTitle:()=>a});var s=JSON.parse('{"id":"UIFrameworks/Variables","title":"ES6 Variables","description":"REACT","source":"@site/docs/UIFrameworks/Variables.md","sourceDirName":"UIFrameworks","slug":"/UIFrameworks/Variables","permalink":"/docs/UIFrameworks/Variables","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Arrow Functions","permalink":"/docs/UIFrameworks/ArrowFunctions"},"next":{"title":"Array Methods","permalink":"/docs/UIFrameworks/ArrayMethods"}}'),t=r(85893),i=r(50065);let l={sidebar_position:4},a="ES6 Variables",c={},o=[{value:"<strong>REACT</strong>",id:"react",level:2},{value:"Definition",id:"definition",level:3},{value:"<code>let</code> vs <code>const</code> vs <code>var</code>",id:"let-vs-const-vs-var",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"Example Explanation",id:"example-explanation",level:3},{value:"<strong>SVELTE</strong>",id:"svelte",level:2},{value:"Definition of Svelte Variables",id:"definition-of-svelte-variables",level:3},{value:"Syntax of Variables in Svelte",id:"syntax-of-variables-in-svelte",level:3},{value:"Example of Variables in Svelte",id:"example-of-variables-in-svelte",level:3},{value:"Explanation",id:"explanation",level:3}];function d(e){let n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"es6-variables",children:"ES6 Variables"})}),"\n",(0,t.jsx)(n.h2,{id:"react",children:(0,t.jsx)(n.strong,{children:"REACT"})}),"\n",(0,t.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,t.jsxs)(n.p,{children:["In ES6, we use ",(0,t.jsx)(n.code,{children:"let"})," and ",(0,t.jsx)(n.code,{children:"const"})," instead of ",(0,t.jsx)(n.code,{children:"var"})," to declare variables.\r\nThese keywords provide ",(0,t.jsx)(n.strong,{children:"block-scoping"})," and avoid issues like ",(0,t.jsx)(n.strong,{children:"hoisting bugs"})," seen with ",(0,t.jsx)(n.code,{children:"var"}),"."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.h3,{id:"let-vs-const-vs-var",children:[(0,t.jsx)(n.code,{children:"let"})," vs ",(0,t.jsx)(n.code,{children:"const"})," vs ",(0,t.jsx)(n.code,{children:"var"})]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Keyword"}),(0,t.jsx)(n.th,{children:"Scope"}),(0,t.jsx)(n.th,{children:"Reassignable"}),(0,t.jsx)(n.th,{children:"Best For"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"var"})}),(0,t.jsx)(n.td,{children:"Function"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Avoid in modern code (function-scoped)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"let"})}),(0,t.jsx)(n.td,{children:"Block"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Variables that will change"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"const"})}),(0,t.jsx)(n.td,{children:"Block"}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Fixed values (can't be reassigned)"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// Using let (reassignable within block scope)\r\nlet counter: number = 1;\r\ncounter = 2; // allowed\r\n\r\n// Using const (cannot be reassigned after declaration)\r\nconst appName: string = "MyReactApp";\r\n// appName = "NewApp";  Error: const cannot be reassigned\r\n\r\n// Using var (not recommended \u2014 function-scoped, not block-scoped)\r\nvar status: string = "active";\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// File: VariableExample.tsx\r\nimport React from \'react\';\r\n\r\nconst VariableExample = () => {\r\n  // const: used for values that do not change\r\n  const title: string = "React ES6 Variables";\r\n\r\n  // let: used inside function scope \u2014 can be updated\r\n  let count: number = 0;\r\n\r\n  // Arrow function to simulate a click counter\r\n  const handleClick = (): void => {\r\n    count++; // Only works within this function call (does not persist across renders)\r\n    console.log("Clicked:", count);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {/* Button uses the handleClick function */}\r\n      <button onClick={handleClick}>Click Me</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VariableExample;\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-explanation",children:"Example Explanation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"const title"}),": Title never changes during the component's lifecycle."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"let count"}),": Mutable inside the ",(0,t.jsx)(n.code,{children:"handleClick"})," function, but ",(0,t.jsx)(n.strong,{children:"not tracked in React state"})," \u2014 won\u2019t\r\npersist across renders."]}),"\n",(0,t.jsxs)(n.li,{children:["The example demonstrates the use of ",(0,t.jsx)(n.code,{children:"let"})," and ",(0,t.jsx)(n.code,{children:"const"}),", but in real-world React apps,\r\n",(0,t.jsxs)(n.strong,{children:["use ",(0,t.jsx)(n.code,{children:"useState"})]})," to persist ",(0,t.jsx)(n.code,{children:"count"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"svelte",children:(0,t.jsx)(n.strong,{children:"SVELTE"})}),"\n",(0,t.jsx)(n.h3,{id:"definition-of-svelte-variables",children:"Definition of Svelte Variables"}),"\n",(0,t.jsxs)(n.p,{children:["In Svelte (just like in modern JavaScript/TypeScript), you use ",(0,t.jsx)(n.code,{children:"let"})," and ",(0,t.jsx)(n.code,{children:"const"})," instead of ",(0,t.jsx)(n.code,{children:"var"}),".\r\nThese give better ",(0,t.jsx)(n.strong,{children:"scoping rules"})," and help avoid unexpected bugs."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"syntax-of-variables-in-svelte",children:"Syntax of Variables in Svelte"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'// Block-scoped & reassignable\r\nlet counter: number = 1;\r\ncounter = 2; // OK\r\n\r\n// Block-scoped & constant\r\nconst appName: string = "MySvelteApp";\r\n// appName = "NewApp";  Error\r\n\r\n// Function-scoped (Avoid in modern Svelte)\r\nvar status: string = "active";\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-of-variables-in-svelte",children:"Example of Variables in Svelte"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- File: VariableExample.svelte --\x3e\r\n<script lang="ts">\r\n  const title: string = "Svelte ES6 Variables";\r\n  let count: number = 0;\r\n\r\n  // Updates count locally\r\n  const handleClick = (): void => {\r\n    count += 1;\r\n    console.log("Clicked:", count);\r\n  };\r\n<\/script>\r\n\r\n\x3c!-- UI --\x3e\r\n<h2>{title}</h2>\r\n<button on:click={handleClick}>Click Me</button>\r\n<p>Open console to see count updates</p>\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"explanation",children:"Explanation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"const title"})," is fixed and doesn\u2019t change."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"let count"})," is mutable and reactive in Svelte \u2014 UI updates automatically."]}),"\n",(0,t.jsxs)(n.li,{children:["Unlike React, no need for ",(0,t.jsx)(n.code,{children:"useState"})," \u2014 reactivity is automatic in Svelte."]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},50065:function(e,n,r){r.d(n,{Z:()=>a,a:()=>l});var s=r(67294);let t={},i=s.createContext(t);function l(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);