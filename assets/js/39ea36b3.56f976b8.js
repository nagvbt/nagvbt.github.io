"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[49230],{70071:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var t=a(85893),i=a(11151);const r={sidebar_position:3},s="Data Types",d={id:"articles/C/DataTypes",title:"Data Types",description:"1. What is a Data Type?",source:"@site/docs/articles/C/DataTypes.md",sourceDirName:"articles/C",slug:"/articles/C/DataTypes",permalink:"/docs/articles/C/DataTypes",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Declarations and Initializations",permalink:"/docs/articles/C/Declarations"},next:{title:"Storage classes",permalink:"/docs/articles/C/StorageClasses"}},l={},c=[{value:"1. What is a Data Type?",id:"1-what-is-a-data-type",level:3},{value:"2. How many Data Types present in C?",id:"2-how-many-data-types-present-in-c",level:3},{value:"3. What are the Basic Data Types in C?",id:"3-what-are-the-basic-data-types-in-c",level:3},{value:"4. Explain about data type Qualifiers?",id:"4-explain-about-data-type-qualifiers",level:3},{value:"5. What are the Derived Data Types ?",id:"5-what-are-the-derived-data-types-",level:3},{value:"6. What are the User-defined Data Types ?",id:"6-what-are-the-user-defined-data-types-",level:3}];function o(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"data-types",children:"Data Types"}),"\n",(0,t.jsx)(n.h3,{id:"1-what-is-a-data-type",children:"1. What is a Data Type?"}),"\n",(0,t.jsx)(n.p,{children:"Data type  (or just type) determines the possible values that an identifier can have and the valid operations that can be applied on it."}),"\n",(0,t.jsx)(n.h3,{id:"2-how-many-data-types-present-in-c",children:"2. How many Data Types present in C?"}),"\n",(0,t.jsx)(n.p,{children:"In C language, data types are broadly classified in to three types:"}),"\n",(0,t.jsx)(n.p,{children:"a. Basic data types (primitive data types)\r\nb. Derived data types\r\nc. User-defined data types"}),"\n",(0,t.jsx)(n.h3,{id:"3-what-are-the-basic-data-types-in-c",children:"3. What are the Basic Data Types in C?"}),"\n",(0,t.jsx)(n.p,{children:"The C programming language provides the user with four basic data types."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"int     -> An integer."}),"\n",(0,t.jsx)(n.li,{children:"float -> A floating point(real) number."}),"\n",(0,t.jsx)(n.li,{children:"char -> A single byte of memory, enough to hold a character."}),"\n",(0,t.jsx)(n.li,{children:"double  -> double precision floating point number."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-explain-about-data-type-qualifiers",children:"4. Explain about data type Qualifiers?"}),"\n",(0,t.jsx)(n.p,{children:"The C programming language provides the user with three basic data type qualifiers."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"short  ->  An integer possibly of reduced range."}),"\n",(0,t.jsx)(n.li,{children:"long  -> An integer possibly of increased range."}),"\n",(0,t.jsx)(n.li,{children:"unsigned ->  An integer with no negative range, the spare capacity being used to increase the positive range."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.em,{children:(0,t.jsx)(n.strong,{children:"Example:"})})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>  \r\nvoid main()\r\n{\r\n char c ;\r\n unsigned char d ;\r\n int i ;\r\n unsigned int j ;\r\n short int k ;\r\n unsigned short int l ;\r\n long int m ;\r\n unsigned long int n ;\r\n float x ;\r\n double y ;\r\n long double z ;\r\n /* char */\r\n scanf ( "%c %c", &c, &d ) ;\r\n printf ( "%c %c", c, d ) ;\r\n /* int */\r\n scanf ( "%d %u", &i, &j ) ;\r\n printf ( "%d %u", i, j ) ;\r\n /* short int */\r\n scanf ( "%d %u", &k, &l ) ;\r\n printf ( "%d %u", k, l ) ;\r\n /* long int */\r\n scanf ( "%ld %lu", &m, &n ) ;\r\n printf ( "%ld %lu", m, n ) ;\r\n /* float, double, long double */\r\n scanf ( "%f %lf %Lf", &x, &y, &z ) ;\r\n printf ( "%f %lf %Lf", x, y, z ) ;\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"5-what-are-the-derived-data-types-",children:"5. What are the Derived Data Types ?"}),"\n",(0,t.jsx)(n.p,{children:"These data types are derived from the basic data types. Derived data types availabe in C are:"}),"\n",(0,t.jsx)(n.p,{children:"a. Array type e.g. char[ ],int[ ], etc.\r\nb. Pointer type e.g. char*, int*, etc.\r\nc. Function type e.g.int(int,int), float(int), etc.\r\nNOTE : Derived Data Types will be explained in next chapters"}),"\n",(0,t.jsx)(n.h3,{id:"6-what-are-the-user-defined-data-types-",children:"6. What are the User-defined Data Types ?"}),"\n",(0,t.jsx)(n.p,{children:"The C language provides flexibility to the user to create new data types. These newly created data types are called user-defined data types. The user-defined data types in C can be created by using:\r\na. Structure\r\nb. Union\r\nc. Enumeration\r\nNOTE : Derived Data Types will be explained in next chapters"})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},11151:(e,n,a)=>{a.d(n,{Z:()=>d,a:()=>s});var t=a(67294);const i={},r=t.createContext(i);function s(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);