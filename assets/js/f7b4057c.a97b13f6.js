"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["46892"],{17573:function(n,r,e){e.r(r),e.d(r,{frontMatter:()=>a,default:()=>x,toc:()=>c,metadata:()=>s,assets:()=>d,contentTitle:()=>t});var s=JSON.parse('{"id":"Languages/Arrays","title":"Arrays","description":"---","source":"@site/docs/Languages/Arrays.md","sourceDirName":"Languages","slug":"/Languages/Arrays","permalink":"/docs/Languages/Arrays","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Loops","permalink":"/docs/Languages/Loops"},"next":{"title":"Methods and Overloading","permalink":"/docs/Languages/Methods"}}'),i=e(85893),l=e(50065);let a={sidebar_position:8},t="Arrays",d={},c=[{value:"<strong>Definition of Arrays</strong>",id:"definition-of-arrays",level:2},{value:"<strong>C++</strong>",id:"c",level:2},{value:"<strong>Syntax:</strong>",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"<strong>C#</strong>",id:"c-1",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"<strong>Java</strong>",id:"java",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-2",level:3},{value:"Example",id:"example-2",level:3},{value:"<strong>Python</strong>",id:"python",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-3",level:3},{value:"Example",id:"example-3",level:3},{value:"<strong>JavaScript</strong>",id:"javascript",level:2},{value:"Syntax:",id:"syntax-4",level:3},{value:"Example",id:"example-4",level:3},{value:"<strong>TypeScript</strong>",id:"typescript",level:2},{value:"Syntax",id:"syntax-5",level:3},{value:"Example",id:"example-5",level:3},{value:"<strong>Array Feature Summary Table</strong>",id:"array-feature-summary-table",level:2}];function o(n){let r={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"arrays",children:"Arrays"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"definition-of-arrays",children:(0,i.jsx)(r.strong,{children:"Definition of Arrays"})}),"\n",(0,i.jsxs)(r.p,{children:["An ",(0,i.jsx)(r.strong,{children:"array"})," is a collection of elements (like numbers or strings) stored under one variable name."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Single-dimensional arrays"})," store data in a simple list format."]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Multi-dimensional arrays"})," store data in table or grid format (like rows and columns)."]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"c",children:(0,i.jsx)(r.strong,{children:"C++"})}),"\n",(0,i.jsx)(r.h3,{id:"syntax",children:(0,i.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"// Single-dimensional\r\nint nums[3];               // Empty array of size 3\r\nint nums2[] = {1, 2, 3};   // Pre-filled\r\n\r\n// Multi-dimensional\r\nint grid[2][3];            // 2 rows, 3 columns\r\nint matrix[2][2] = { {1, 2}, {3, 4} };\n"})}),"\n",(0,i.jsx)(r.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-cpp",children:"#include <iostream>\r\n\r\nint main() {\r\n    // Single-dimensional array\r\n    int scores[] = { 90, 80, 70 };\r\n    std::cout << scores[0] << std::endl; // Output: 90\r\n\r\n    // Multi-dimensional array\r\n    int matrix[2][2] = { {1, 2}, {3, 4} };\r\n    std::cout << matrix[1][0] << std::endl; // Output: 3 (2nd row, 1st column)\r\n\r\n    return 0;\r\n}\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"c-1",children:(0,i.jsx)(r.strong,{children:"C#"})}),"\n",(0,i.jsx)(r.h3,{id:"syntax-1",children:(0,i.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"// Single-dimensional\r\nint[] nums = new int[3]; // Empty array of size 3\r\nint[] nums2 = {1, 2, 3}; // Pre-filled\r\n\r\n// Multi-dimensional\r\nint[,] grid = new int[2, 3]; // 2 rows, 3 columns\r\nint[,] matrix = { {1, 2}, {3, 4} };\n"})}),"\n",(0,i.jsx)(r.h3,{id:"example-1",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-csharp",children:"// Single-dimensional array\r\nint[] scores = { 90, 80, 70 };\r\nConsole.WriteLine(scores[0]); // Output: 90\r\n\r\n// Multi-dimensional array\r\nint[,] matrix = { {1, 2}, {3, 4} };\r\nConsole.WriteLine(matrix[1, 0]); // Output: 3 (2nd row, 1st column)\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"java",children:(0,i.jsx)(r.strong,{children:"Java"})}),"\n",(0,i.jsx)(r.h3,{id:"syntax-2",children:(0,i.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"// Single-dimensional\r\nint[] nums = new int[3];\r\nint[] nums2 = {1, 2, 3};\r\n\r\n// Multi-dimensional\r\nint[][] matrix = new int[2][3]; // 2 rows, 3 columns\r\nint[][] matrix2 = { {1, 2}, {3, 4} };\n"})}),"\n",(0,i.jsx)(r.h3,{id:"example-2",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"// Single-dimensional\r\nint[] scores = { 90, 80, 70 };\r\nSystem.out.println(scores[0]); // Output: 90\r\n\r\n// Multi-dimensional\r\nint[][] matrix = {\r\n    {1, 2},\r\n    {3, 4}\r\n};\r\nSystem.out.println(matrix[1][0]); // Output: 3\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"python",children:(0,i.jsx)(r.strong,{children:"Python"})}),"\n",(0,i.jsx)(r.h3,{id:"syntax-3",children:(0,i.jsx)(r.strong,{children:"Syntax:"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"# Single-dimensional\r\narr = [1, 2, 3]\r\n\r\n# Multi-dimensional (list of lists)\r\nmatrix = [\r\n    [1, 2],\r\n    [3, 4]\r\n]\n"})}),"\n",(0,i.jsx)(r.h3,{id:"example-3",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",children:"# Single-dimensional array (list)\r\nscores = [90, 80, 70]\r\nprint(scores[0])  # Output: 90\r\n\r\n# Multi-dimensional array (2D list)\r\nmatrix = [[1, 2], [3, 4]]\r\nprint(matrix[1][0])  # Output: 3 (2nd row, 1st element)\n"})}),"\n",(0,i.jsxs)(r.blockquote,{children:["\n",(0,i.jsxs)(r.p,{children:["For real numerical multi-dimensional arrays, use NumPy: ",(0,i.jsx)(r.code,{children:"import numpy as np"})]}),"\n"]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"javascript",children:(0,i.jsx)(r.strong,{children:"JavaScript"})}),"\n",(0,i.jsx)(r.h3,{id:"syntax-4",children:"Syntax:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"// Single-dimensional\r\nlet nums = [1, 2, 3];\r\n\r\n// Multi-dimensional (array of arrays)\r\nlet matrix = [\r\n    [1, 2],\r\n    [3, 4]\r\n];\n"})}),"\n",(0,i.jsx)(r.h3,{id:"example-4",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-javascript",children:"// Single-dimensional\r\nlet scores = [90, 80, 70];\r\nconsole.log(scores[0]); // Output: 90\r\n\r\n// Multi-dimensional\r\nlet matrix = [[1, 2], [3, 4]];\r\nconsole.log(matrix[1][0]); // Output: 3\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"typescript",children:(0,i.jsx)(r.strong,{children:"TypeScript"})}),"\n",(0,i.jsx)(r.h3,{id:"syntax-5",children:"Syntax"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Single-dimensional array\r\nlet arr: number[] = [value1, value2, value3];\r\n\r\n// Multi-dimensional array (array of arrays)\r\nlet arr: number[][] = [\r\n  [row1col1, row1col2],\r\n  [row2col1, row2col2]\r\n];\r\n\r\n// Accessing elements\r\narr[index]              // Single-dimensional\r\narr[rowIndex][colIndex] // Multi-dimensional\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h3,{id:"example-5",children:"Example"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-typescript",children:"// Single-dimensional array\r\nlet scores: number[] = [90, 80, 70];\r\nconsole.log(scores[0]); // Output: 90\r\n\r\n// Multi-dimensional array\r\nlet matrix: number[][] = [\r\n  [1, 2],\r\n  [3, 4]\r\n];\r\nconsole.log(matrix[1][0]); // Output: 3 (2nd row, 1st column)\n"})}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.h2,{id:"array-feature-summary-table",children:(0,i.jsx)(r.strong,{children:"Array Feature Summary Table"})}),"\n",(0,i.jsxs)(r.table,{children:[(0,i.jsx)(r.thead,{children:(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.th,{children:"Feature"}),(0,i.jsx)(r.th,{children:(0,i.jsx)(r.strong,{children:"C++"})}),(0,i.jsx)(r.th,{children:"C#"}),(0,i.jsx)(r.th,{children:"Java"}),(0,i.jsx)(r.th,{children:"Python"}),(0,i.jsx)(r.th,{children:"JavaScript"}),(0,i.jsx)(r.th,{children:(0,i.jsx)(r.strong,{children:"TypeScript"})})]})}),(0,i.jsxs)(r.tbody,{children:[(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Single-dimensional array"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"int arr[] = {1, 2, 3};"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"int[] arr = {1,2,3}"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"int[] arr = {1,2,3}"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"arr = [1,2,3]"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"let arr = [1,2,3]"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"let arr: number[] = [1,2,3]"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Multi-dimensional array"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"int arr[2][2] = {{1,2},{3,4}};"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"int[,] arr = {{1,2},{3,4}}"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"int[][] arr = {{1,2},{3,4}}"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"arr = [[1,2],[3,4]]"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"let arr = [[1,2],[3,4]]"})}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"let arr: number[][] = [[1,2],[3,4]]"})})]}),(0,i.jsxs)(r.tr,{children:[(0,i.jsx)(r.td,{children:"Access element"}),(0,i.jsx)(r.td,{children:(0,i.jsx)(r.code,{children:"arr[0][1]"})}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"arr[0]"}),", ",(0,i.jsx)(r.code,{children:"arr[1,0]"})]}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"arr[0]"}),", ",(0,i.jsx)(r.code,{children:"arr[1][0]"})]}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"arr[0]"}),", ",(0,i.jsx)(r.code,{children:"arr[1][0]"})]}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"arr[0]"}),", ",(0,i.jsx)(r.code,{children:"arr[1][0]"})]}),(0,i.jsxs)(r.td,{children:[(0,i.jsx)(r.code,{children:"arr[0]"}),", ",(0,i.jsx)(r.code,{children:"arr[1][0]"})]})]})]})]}),"\n",(0,i.jsx)(r.hr,{}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.a,{href:"#arrays",children:"Back to Top"})})]})}function x(n={}){let{wrapper:r}={...(0,l.a)(),...n.components};return r?(0,i.jsx)(r,{...n,children:(0,i.jsx)(o,{...n})}):o(n)}},50065:function(n,r,e){e.d(r,{Z:()=>t,a:()=>a});var s=e(67294);let i={},l=s.createContext(i);function a(n){let r=s.useContext(l);return s.useMemo(function(){return"function"==typeof n?n(r):{...r,...n}},[r,n])}function t(n){let r;return r=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),s.createElement(l.Provider,{value:r},n.children)}}}]);