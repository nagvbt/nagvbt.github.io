"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[41526],{88903:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=n(85893),i=n(11151);const a={title:"All About Design Patterns",date:"2012-01-18",categories:["Design Patterns"],tags:["Design Patterns"]},r="All About Design Patterns",o={permalink:"/blog/2012/01/18/all-about-design-patterns",source:"@site/blog/2012-01-18-all-about-design-patterns.md",title:"All About Design Patterns",description:"Definition",date:"2012-01-18T00:00:00.000Z",formattedDate:"January 18, 2012",tags:[{label:"Design Patterns",permalink:"/blog/tags/design-patterns"}],readingTime:.615,hasTruncateMarker:!1,authors:[],frontMatter:{title:"All About Design Patterns",date:"2012-01-18",categories:["Design Patterns"],tags:["Design Patterns"]},unlisted:!1,prevItem:{title:"Write a code to Outputs its own code",permalink:"/blog/2012/01/19/c-faq-how-to-write-a-code-to-outputs-its-own-code"},nextItem:{title:"Design Pattern: C# Singleton",permalink:"/blog/2012/01/18/design-pattern-c-singleton"}},l={authorsImageUrls:[]},c=[{value:"Definition",id:"definition",level:2},{value:"Types of Design\xa0Patterns",id:"types-of-designpatterns",level:2}];function d(e){const t={h2:"h2",li:"li",ol:"ol",p:"p",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"definition",children:"Definition"}),"\n",(0,s.jsx)(t.p,{children:"Design Patterns represent solutions to problems that arise when developing software within a particular context.\r\nPatterns help you learn from other's successes, instead of your own failures. Mark Johnson (cited by Bruce Eckel)"}),"\n",(0,s.jsx)(t.h2,{id:"types-of-designpatterns",children:"Types of Design\xa0Patterns"}),"\n",(0,s.jsx)(t.p,{children:"There are three types of design patterns"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Creational Patterns: Creational Patterns deals with initializing and configuring classes and objects"}),"\n",(0,s.jsx)(t.li,{children:"Structural Patterns: Structural Patterns deals with decoupling the interface and implementation of classes and objects"}),"\n",(0,s.jsx)(t.li,{children:"Behavioral Patterns: Behavioral Patterns deals with dynamic interactions among societies of classes and objects"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"These three design patters are divided in to 22 different kinds of patterns as shown below."})]})}function u(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},11151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>r});var s=n(67294);const i={},a=s.createContext(i);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);