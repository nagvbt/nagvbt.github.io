"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[98780],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},31605:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={sidebar_position:10},i="Pointers",l={unversionedId:"articles/C/Pointers",id:"articles/C/Pointers",title:"Pointers",description:"1. Define Pointer ?",source:"@site/docs/articles/C/Pointers.md",sourceDirName:"articles/C",slug:"/articles/C/Pointers",permalink:"/docs/articles/C/Pointers",draft:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Structures Unions Enumerations",permalink:"/docs/articles/C/Structures"},next:{title:"Data Structures",permalink:"/docs/articles/C/DataStructures"}},s={},p=[{value:"1. Define Pointer ?",id:"1-define-pointer-",level:3},{value:"2. Explain about pointer Notation ?",id:"2-explain-about-pointer-notation-",level:3},{value:"3. What is the difference between  Address of (&amp;) and Value at address (*) operators in pointers?",id:"3-what-is-the-difference-between--address-of--and-value-at-address--operators-in-pointers",level:3},{value:"3. Write a program to return more than one value from a function ?",id:"3-write-a-program-to-return-more-than-one-value-from-a-function-",level:3},{value:"4. What is the difference between <em>p++ and ++</em>p expressions ?",id:"4-what-is-the-difference-between-p-and-p-expressions-",level:3},{value:"5. What would be the equivalent pointer expression for referring the same element arrik ?",id:"5-what-would-be-the-equivalent-pointer-expression-for-referring-the-same-element-arrik-",level:3},{value:"6. Where we can use pointers ?",id:"6-where-we-can-use-pointers-",level:3},{value:"7. Declare an array of three function pointers where each function receives two ints and returns a float ?",id:"7-declare-an-array-of-three-function-pointers-where-each-function-receives-two-ints-and-returns-a-float-",level:3},{value:"8. Explain about Dynamic Memory allocation ?",id:"8-explain-about-dynamic-memory-allocation-",level:3},{value:"9. What are dynamic memory  management  functions in C?",id:"9-what-are-dynamic-memory--management--functions-in-c",level:3},{value:"10. Explain about malloc ?",id:"10-explain-about-malloc-",level:3},{value:"11. Explain about calloc ?",id:"11-explain-about-calloc-",level:3},{value:"12. Explain about realloc?",id:"12-explain-about-realloc",level:3},{value:"13. Explain about free?",id:"13-explain-about-free",level:3}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pointers"},"Pointers"),(0,r.kt)("h3",{id:"1-define-pointer-"},"1. Define Pointer ?"),(0,r.kt)("p",null,"Definition: A pointer is a variable which stores the address of another variable."),(0,r.kt)("h3",{id:"2-explain-about-pointer-notation-"},"2. Explain about pointer Notation ?"),(0,r.kt)("p",null,"Consider the declaration,"),(0,r.kt)("p",null,"int i = 3 ;"),(0,r.kt)("p",null,"This declaration tells the C compiler to:\n(a) Reserve space in memory to hold the integer value.\n(b) Associate the name i with this memory location.\n(c) Store the value 3 at this location."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\nint main( )\n{\n int i = 3 ;\n \n printf ( "\\nAddress of i = %u", &i ) ;\n printf ( "\\nValue of i = %d", i ) ;\n printf ( "\\nValue of i = %d", *(&i) ) ;\n\n return 0;\n}\n\n* OUTPUT: *\nAddress of i = 4652484\nValue of i = 3\nValue of i = 3\n')),(0,r.kt)("p",null,"We may represent i\u2019s location in memory by the following memory map."),(0,r.kt)("h3",{id:"3-what-is-the-difference-between--address-of--and-value-at-address--operators-in-pointers"},"3. What is the difference between  Address of (&) and Value at address (*) operators in pointers?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Address of  (&) operator : *\nAddress of -> &\nThe &variable  which is  &i in the above program returns the address of variable i. so the output shows\nAddress of i = 4652484")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Value at address (",(0,r.kt)("em",{parentName:"p"},") operator"),"\nValue at address -> ",(0,r.kt)("em",{parentName:"p"},"\nThe \u2018value at address\u2019 operator is also called as \u2018indirection\u2019 operator."),"(&variable) which is *(&i) in the above program returns the value stored at a particular address.\nValue of i = 3"))),(0,r.kt)("h3",{id:"3-write-a-program-to-return-more-than-one-value-from-a-function-"},"3. Write a program to return more than one value from a function ?"),(0,r.kt)("p",null,"void Calc(int a,int b,int ",(0,r.kt)("em",{parentName:"p"},"add, int"),"sub);"),(0,r.kt)("p",null,'void main()\n{\nint add, sub;\nCalc(4,3, &add, &sub);\ncout<<"4+3="<<add<<endl;\ncout<<"4-3="<<sub;\ngetchar();\n}'),(0,r.kt)("p",null,"void Calc(int a,int b,int ",(0,r.kt)("em",{parentName:"p"},"add, int"),"sub)\n{\n",(0,r.kt)("em",{parentName:"p"},"add = a+b;\n"),"sub = a-b;\n}"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"OUTPUT: *\n4+3=7\n4-3=1")),(0,r.kt)("h3",{id:"4-what-is-the-difference-between-p-and-p-expressions-"},"4. What is the difference between ",(0,r.kt)("em",{parentName:"h3"},"p++ and ++"),"p expressions ?"),(0,r.kt)("p",null,"Both expressional are not one and the same.\n",(0,r.kt)("em",{parentName:"p"},"p++ increments the pointer and not the value pointed by it. Where as ++"),"p increments the value being pointed to by p."),(0,r.kt)("h3",{id:"5-what-would-be-the-equivalent-pointer-expression-for-referring-the-same-element-arrik-"},"5. What would be the equivalent pointer expression for referring the same element arr","[i][j]","[k][l]"," ?"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"("),"(",(0,r.kt)("em",{parentName:"p"},"("),"(arr+i)+j)+k)+l)"),(0,r.kt)("h3",{id:"6-where-we-can-use-pointers-"},"6. Where we can use pointers ?"),(0,r.kt)("p",null,"a. Accessing array or string elements ?\nb. Call by refertence\nc. Dynamic memory allocation\nd. Implementing linked lists, trees, graphs and many other data structures"),(0,r.kt)("h3",{id:"7-declare-an-array-of-three-function-pointers-where-each-function-receives-two-ints-and-returns-a-float-"},"7. Declare an array of three function pointers where each function receives two ints and returns a float ?"),(0,r.kt)("p",null,"float (*arr","[3]",")(int, int);"),(0,r.kt)("h3",{id:"8-explain-about-dynamic-memory-allocation-"},"8. Explain about Dynamic Memory allocation ?"),(0,r.kt)("p",null,"If we need a variable amount of memory that can only be determined during runtime in that case  we need some user input to determine the necessary amount of memory space."),(0,r.kt)("h3",{id:"9-what-are-dynamic-memory--management--functions-in-c"},"9. What are dynamic memory  management  functions in C?"),(0,r.kt)("p",null,"malloc, calloc, free, realloc"),(0,r.kt)("h3",{id:"10-explain-about-malloc-"},"10. Explain about malloc ?"),(0,r.kt)("p",null,"malloc allocates a block of size of memory, returning a pointer to the beginning of the block.\n",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example:")),"\nchar ",(0,r.kt)("em",{parentName:"p"},"arr;\nint i;\narr = (char"),") malloc(i+1);"),(0,r.kt)("p",null,"Since malloc() returns a void pointer it is necessary to explicitly typecast it into an appropriate type of pointer."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Example:")),"\nint ",(0,r.kt)("em",{parentName:"p"},"p1 = (int"),")malloc(sizeof(int));"),(0,r.kt)("h3",{id:"11-explain-about-calloc-"},"11. Explain about calloc ?"),(0,r.kt)("p",null,"Allocate space for array in memory. calloc allocates a block of memory for an array of num elements each of them size bytes long and initializes all its bits to zero. The effective result of an zero-initialized memory block of (num * size) bytes."),(0,r.kt)("p",null,"void* calloc(size_t num, size_t size);"),(0,r.kt)("p",null,"num - No. of elements to be allocated\nsize - size of elements"),(0,r.kt)("p",null,"NOTE: In calloc and malloc if the function failed to allocate the requested block of memory a NULL pointer is returned."),(0,r.kt)("h3",{id:"12-explain-about-realloc"},"12. Explain about realloc?"),(0,r.kt)("p",null,"void",(0,r.kt)("em",{parentName:"p"},"realloc(void")," ptr, size_t size);\nptr - pointer to a memory block previously allocated with malloc, calloc or realloc to be reallocated. If this is NULL a new block is allocated and a pointer to it is returned by the function."),(0,r.kt)("h3",{id:"13-explain-about-free"},"13. Explain about free?"),(0,r.kt)("p",null,"free deallocate space in memory.\nvoid free(void* ptr);\nptr \u2013 pointer to a memory block previously allocated with malloc,calloc or realloc to be deal located."))}m.isMDXComponent=!0}}]);