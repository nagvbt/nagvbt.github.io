"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["32170"],{76943:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>a,default:()=>p,toc:()=>l,metadata:()=>s,assets:()=>i,contentTitle:()=>d});var s=JSON.parse('{"id":"UIFrameworks/SpreadOperator","title":"Spread Operator","description":"REACT","source":"@site/docs/UIFrameworks/SpreadOperator.md","sourceDirName":"UIFrameworks","slug":"/UIFrameworks/SpreadOperator","permalink":"/docs/UIFrameworks/SpreadOperator","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"Destructuring","permalink":"/docs/UIFrameworks/Destructuring"},"next":{"title":"Modules","permalink":"/docs/UIFrameworks/Modules"}}'),t=r(85893),o=r(50065);let a={sidebar_position:7},d="Spread Operator",i={},l=[{value:"<strong>REACT</strong>",id:"react",level:2},{value:"Definition",id:"definition",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Spread in Arrays",id:"spread-in-arrays",level:3},{value:"Spread in Objects",id:"spread-in-objects",level:3},{value:"Example Using Spread Operator",id:"example-using-spread-operator",level:3},{value:"Example Explanation",id:"example-explanation",level:3},{value:"<strong>SVELTE</strong>",id:"svelte",level:2},{value:"Definition of Spread Operator in Svelte",id:"definition-of-spread-operator-in-svelte",level:3},{value:"Syntax of Spread Operator in Svelte",id:"syntax-of-spread-operator-in-svelte",level:3},{value:"Spread operator in Arrays",id:"spread-operator-in-arrays",level:3},{value:"Spread operator in Objects",id:"spread-operator-in-objects",level:3},{value:"Svelte Example Using Spread Operator",id:"svelte-example-using-spread-operator",level:3},{value:"Short Explanation of the above example",id:"short-explanation-of-the-above-example",level:3},{value:"Key Notes in Svelte",id:"key-notes-in-svelte",level:3},{value:"Spread Attributes (HTML)",id:"spread-attributes-html",level:3},{value:"Summary",id:"summary",level:3}];function c(e){let n={blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"spread-operator",children:"Spread Operator"})}),"\n",(0,t.jsx)(n.h2,{id:"react",children:(0,t.jsx)(n.strong,{children:"REACT"})}),"\n",(0,t.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsxs)(n.strong,{children:["spread operator (",(0,t.jsx)(n.code,{children:"..."}),")"]}),' allows you to "spread" or copy the contents of an array or object\r\ninto a new one.']}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"It's useful for copying, merging, or updating arrays/objects without mutating the original."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.h3,{id:"spread-in-arrays",children:"Spread in Arrays"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const nums1: number[] = [1, 2, 3];\r\nconst nums2: number[] = [4, 5];\r\n\r\n// Combine arrays\r\nconst allNums = [...nums1, ...nums2]; // [1, 2, 3, 4, 5]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"spread-in-objects",children:"Spread in Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const user = { name: "Alice", age: 25 };\r\n\r\n// Clone and update object\r\nconst updatedUser = { ...user, age: 26 }; // { name: "Alice", age: 26 }\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-using-spread-operator",children:"Example Using Spread Operator"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'// File: TodoList.tsx\r\nimport React, { useState } from \'react\';\r\n\r\ntype Todo = {\r\n  id: number;\r\n  task: string;\r\n};\r\n\r\nconst TodoList  = () => {\r\n  const [todos, setTodos] = useState<Todo[]>([\r\n    { id: 1, task: "Learn React" },\r\n    { id: 2, task: "Practice TypeScript" }\r\n  ]);\r\n\r\n  // Add a new todo using spread\r\n  const addTodo = () => {\r\n    const newTodo: Todo = { id: 3, task: "Build a project" };\r\n    setTodos([...todos, newTodo]); // Keep old todos and add new one\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Todo List</h2>\r\n      <ul>\r\n        {todos.map(todo => (\r\n          <li key={todo.id}>{todo.task}</li>\r\n        ))}\r\n      </ul>\r\n      <button onClick={addTodo}>Add Todo</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoList;\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example-explanation",children:"Example Explanation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"setTodos([...todos, newTodo])"}),":\r\nCreates a ",(0,t.jsx)(n.strong,{children:"new array"})," that includes all old todos (",(0,t.jsx)(n.code,{children:"...todos"}),") plus the new one."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["This is a ",(0,t.jsx)(n.strong,{children:"non-mutating"})," way to update state in React."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"svelte",children:(0,t.jsx)(n.strong,{children:"SVELTE"})}),"\n",(0,t.jsx)(n.h3,{id:"definition-of-spread-operator-in-svelte",children:"Definition of Spread Operator in Svelte"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.strong,{children:"spread operator"})," is used in ",(0,t.jsx)(n.strong,{children:"JavaScript"})," and works the same in Svelte.\r\nIt helps you ",(0,t.jsx)(n.strong,{children:"copy"}),", ",(0,t.jsx)(n.strong,{children:"merge"}),", or ",(0,t.jsx)(n.strong,{children:"update"})," arrays and objects without changing the original."]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"syntax-of-spread-operator-in-svelte",children:"Syntax of Spread Operator in Svelte"}),"\n",(0,t.jsx)(n.h3,{id:"spread-operator-in-arrays",children:"Spread operator in Arrays"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"const nums1 = [1, 2, 3];\r\nconst nums2 = [4, 5];\r\n\r\nconst allNums = [...nums1, ...nums2]; // [1, 2, 3, 4, 5]\n"})}),"\n",(0,t.jsx)(n.h3,{id:"spread-operator-in-objects",children:"Spread operator in Objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:'const user = { name: "Alice", age: 25 };\r\nconst updatedUser = { ...user, age: 26 }; // { name: "Alice", age: 26 }\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"svelte-example-using-spread-operator",children:"Svelte Example Using Spread Operator"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- File: TodoList.svelte --\x3e\r\n<script lang="ts">\r\n  type Todo = {\r\n    id: number;\r\n    task: string;\r\n  };\r\n\r\n  let todos: Todo[] = [\r\n    { id: 1, task: "Learn Svelte" },\r\n    { id: 2, task: "Practice TypeScript" }\r\n  ];\r\n\r\n  function addTodo() {\r\n    const newTodo: Todo = { id: 3, task: "Build a Svelte App" };\r\n    todos = [...todos, newTodo]; // Use spread to add new item\r\n  }\r\n<\/script>\r\n\r\n<h2>Todo List</h2>\r\n<ul>\r\n  {#each todos as todo (todo.id)}\r\n    <li>{todo.task}</li>\r\n  {/each}\r\n</ul>\r\n<button on:click={addTodo}>Add Todo</button>\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"short-explanation-of-the-above-example",children:"Short Explanation of the above example"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"todos = [...todos, newTodo]"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Creates a ",(0,t.jsx)(n.strong,{children:"new array"})," with all previous todos plus the new one."]}),"\n",(0,t.jsxs)(n.li,{children:["This is ",(0,t.jsx)(n.strong,{children:"reactive in Svelte"})," \u2014 the UI updates automatically."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"key-notes-in-svelte",children:"Key Notes in Svelte"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"React"}),(0,t.jsx)(n.th,{children:"Svelte"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"State update"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"useState()"})," with ",(0,t.jsx)(n.code,{children:"setState"})]}),(0,t.jsx)(n.td,{children:"Just reassign the variable"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Spread in array"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"setTodos([...todos, newTodo])"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"todos = [...todos, newTodo]"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Spread in object"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"{ ...obj, key: newValue }"})}),(0,t.jsxs)(n.td,{children:["Same \u2014 ",(0,t.jsx)(n.code,{children:"{ ...obj, key: newValue }"})]})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"spread-attributes-html",children:"Spread Attributes (HTML)"}),"\n",(0,t.jsxs)(n.p,{children:["Svelte ",(0,t.jsx)(n.strong,{children:"also supports spread attributes"})," in HTML (like in React):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-svelte",children:"<script>\r\n  let props = { id: 'btn1', class: 'primary', disabled: false };\r\n<\/script>\r\n\r\n<button {...props}>Click Me</button>\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["The ",(0,t.jsx)(n.strong,{children:"spread operator"})," works ",(0,t.jsx)(n.strong,{children:"identically"})," in Svelte as in JavaScript/React."]}),"\n",(0,t.jsxs)(n.li,{children:["Useful for ",(0,t.jsx)(n.strong,{children:"non-mutating updates"})," to arrays/objects."]}),"\n",(0,t.jsxs)(n.li,{children:["Works seamlessly with ",(0,t.jsx)(n.strong,{children:"Svelte reactivity"}),"."]}),"\n"]})]})}function p(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,n,r){r.d(n,{Z:()=>d,a:()=>a});var s=r(67294);let t={},o=s.createContext(t);function a(e){let n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);