"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[7236],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),h=i,m=d["".concat(o,".").concat(h)]||d[h]||u[h]||r;return n?a.createElement(m,l(l({ref:t},p),{},{components:n})):a.createElement(m,l({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=h;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c[d]="string"==typeof e?e:i,l[1]=c;for(var s=2;s<r;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3446:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:5},l="Templates and Exception Handling",c={unversionedId:"articles/Cpp/Templates",id:"articles/Cpp/Templates",title:"Templates and Exception Handling",description:"Templates",source:"@site/docs/articles/Cpp/Templates.md",sourceDirName:"articles/Cpp",slug:"/articles/Cpp/Templates",permalink:"/docs/articles/Cpp/Templates",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Data Structures",permalink:"/docs/articles/Cpp/Data-Structures"},next:{title:"Type Casting and others",permalink:"/docs/articles/Cpp/Type Casting and Others"}},o={},s=[{value:"Templates",id:"templates",level:2},{value:"1.What is a Function Template ?",id:"1what-is-a-function-template-",level:3},{value:"2.What is a class Template  ?",id:"2what-is-a-class-template--",level:3},{value:"3.What is Explicitly over loading /explicit specialization ?",id:"3what-is-explicitly-over-loading-explicit-specialization-",level:3},{value:"Exception Handling",id:"exception-handling",level:2},{value:"1.What is Exception handling?",id:"1what-is-exception-handling",level:3},{value:"2.Define Try, Throw, Catch ?",id:"2define-try-throw-catch-",level:3},{value:"3.What is the order of placing base and derived class Expections in try catch blocks ?",id:"3what-is-the-order-of-placing-base-and-derived-class-expections-in-try-catch-blocks-",level:3}],p={toc:s},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"templates-and-exception-handling"},"Templates and Exception Handling"),(0,i.kt)("h2",{id:"templates"},"Templates"),(0,i.kt)("h3",{id:"1what-is-a-function-template-"},"1.What is a Function Template ?"),(0,i.kt)("p",null,"Using templates we can create generic functions. We can use one function with several different types of data without having to explicitly recode specific versions for each data type."),(0,i.kt)("p",null,"Syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Type1, class Type2>\nreturn_type funName(param_list)\n{\n    // Function Body\n}\n")),(0,i.kt)("h3",{id:"2what-is-a-class-template--"},"2.What is a class Template  ?"),(0,i.kt)("p",null,"Using templates we can create generic classes. We can use one class with several different types of data without having to explicitly recode specific versions for each data type."),(0,i.kt)("p",null,"Syntax:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"template <class Type1, class Type2>\nclass className\n{\n    //Code\n}\nclassName <Type1, Type2>obj;\n")),(0,i.kt)("h3",{id:"3what-is-explicitly-over-loading-explicit-specialization-"},"3.What is Explicitly over loading /explicit specialization ?"),(0,i.kt)("p",null,"Even through a generic function/class overloads itself needed we can explicitly over loaded one too. This is formally called as explicit specialization."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"template<>")," construct to indicate specialization."),(0,i.kt)("h2",{id:"exception-handling"},"Exception Handling"),(0,i.kt)("h3",{id:"1what-is-exception-handling"},"1.What is Exception handling?"),(0,i.kt)("p",null,"Exception handling allows to manage runtime errors in an orderly fashion.\nException handling build upon 3 keywords: Try, Throw, Catch."),(0,i.kt)("h3",{id:"2define-try-throw-catch-"},"2.Define Try, Throw, Catch ?"),(0,i.kt)("p",null,"Try: Program statements that we want to monitor for exceptions are contained in try block."),(0,i.kt)("p",null,"Throw: If an exception i.e. error occurs within the try block, it is thrown using throw."),(0,i.kt)("p",null,"Catch: The exception is caught using catch and processed."),(0,i.kt)("h3",{id:"3what-is-the-order-of-placing-base-and-derived-class-expections-in-try-catch-blocks-"},"3.What is the order of placing base and derived class Expections in try catch blocks ?"),(0,i.kt)("p",null,"To catch base class exception put always derived class object first in the catch blocks."))}u.isMDXComponent=!0}}]);