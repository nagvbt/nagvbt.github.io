"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["55901"],{94464:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>l,default:()=>h,toc:()=>c,metadata:()=>i,assets:()=>o,contentTitle:()=>a});var i=JSON.parse('{"id":"Languages/Exceptions","title":"Exceptions","description":"Handling exceptions is essential for building robust programs. Exceptions represent unexpected","source":"@site/docs/Languages/Exceptions.md","sourceDirName":"Languages","slug":"/Languages/Exceptions","permalink":"/docs/Languages/Exceptions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":18,"frontMatter":{"sidebar_position":18},"sidebar":"tutorialSidebar","previous":{"title":"Files","permalink":"/docs/Languages/Files"},"next":{"title":"UI Frameworks","permalink":"/docs/category/ui-frameworks"}}'),t=r(85893),s=r(50065);let l={sidebar_position:18},a="Exceptions",o={},c=[{value:"Common Example:",id:"common-example",level:3},{value:"<strong>C++</strong>",id:"c",level:2},{value:"Definition",id:"definition",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"<strong>C#</strong>",id:"c-1",level:2},{value:"Definition:",id:"definition-1",level:3},{value:"Syntax:",id:"syntax-1",level:3},{value:"Example:",id:"example-1",level:3},{value:"<strong>Java</strong>",id:"java",level:2},{value:"Definition:",id:"definition-2",level:3},{value:"Syntax:",id:"syntax-2",level:3},{value:"Example:",id:"example-2",level:3},{value:"<strong>Python</strong>",id:"python",level:2},{value:"Definition:",id:"definition-3",level:3},{value:"Syntax:",id:"syntax-3",level:3},{value:"Example:",id:"example-3",level:3},{value:"<strong>JavaScript</strong>",id:"javascript",level:2},{value:"Definition:",id:"definition-4",level:3},{value:"Syntax:",id:"syntax-4",level:3},{value:"Example:",id:"example-4",level:3},{value:"<strong>TypeScript</strong>",id:"typescript",level:2},{value:"Definition:",id:"definition-5",level:3},{value:"Syntax:",id:"syntax-5",level:3}];function d(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"exceptions",children:"Exceptions"})}),"\n",(0,t.jsxs)(n.p,{children:["Handling ",(0,t.jsx)(n.strong,{children:"exceptions"})," is essential for building robust programs. Exceptions represent unexpected\r\nsituations or errors that occur during the execution of a program. Instead of crashing, programs\r\ncan catch these exceptions and respond gracefully."]}),"\n",(0,t.jsx)(n.h3,{id:"common-example",children:"Common Example:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Attempt to divide a number by zero and handle the exception."})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c",children:(0,t.jsx)(n.strong,{children:"C++"})}),"\n",(0,t.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Exception handling"})," in C++ is a mechanism to handle ",(0,t.jsx)(n.strong,{children:"runtime errors"})," or ",(0,t.jsx)(n.strong,{children:"unexpected events"})," that may disrupt program execution. It allows separating ",(0,t.jsx)(n.strong,{children:"error handling"})," code from ",(0,t.jsx)(n.strong,{children:"regular code"})," using three keywords:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"try"})," \u2013 defines a block of code to monitor for exceptions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"throw"})," \u2013 signals the occurrence of an exception"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"catch"})," \u2013 defines a block of code to handle the exception"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"This helps write robust, maintainable, and safe applications."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"try {\r\n    // Code that might throw an exception\r\n    if (someErrorCondition) {\r\n        throw exceptionType;\r\n    }\r\n}\r\ncatch (exceptionType variableName) {\r\n    // Code to handle the exception\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"You can also use the standard exception class:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <stdexcept>\r\n\r\ntry {\r\n    throw std::runtime_error("Something went wrong");\r\n}\r\ncatch (std::exception& e) {\r\n    std::cout << e.what();\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\r\nusing namespace std;\r\n\r\nint divide(int a, int b) {\r\n    if (b == 0) {\r\n        throw "Division by zero error!";\r\n    }\r\n    return a / b;\r\n}\r\n\r\nint main() {\r\n    int x = 10, y = 0;\r\n\r\n    try {\r\n        int result = divide(x, y);\r\n        cout << "Result: " << result << endl;\r\n    } catch (const char* msg) {\r\n        cout << "Exception caught: " << msg << endl;\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c-1",children:(0,t.jsx)(n.strong,{children:"C#"})}),"\n",(0,t.jsx)(n.h3,{id:"definition-1",children:"Definition:"}),"\n",(0,t.jsxs)(n.p,{children:["In C#, exceptions are managed using the ",(0,t.jsx)(n.code,{children:"try"}),", ",(0,t.jsx)(n.code,{children:"catch"}),", and optionally ",(0,t.jsx)(n.code,{children:"finally"})," blocks. When an\r\nerror occurs inside the ",(0,t.jsx)(n.code,{children:"try"})," block, control jumps to the matching ",(0,t.jsx)(n.code,{children:"catch"})," block."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax-1",children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"try {\r\n    // Code that may throw an exception\r\n} catch (ExceptionType e) {\r\n    // Handle exception\r\n} finally {\r\n    // Code that always executes (optional)\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\r\n\r\nclass Program {\r\n    static void Main() {\r\n        try {\r\n            int result = 10 / 0;\r\n            Console.WriteLine(result);\r\n        } catch (DivideByZeroException e) {\r\n            Console.WriteLine("Error: Division by zero is not allowed.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"java",children:(0,t.jsx)(n.strong,{children:"Java"})}),"\n",(0,t.jsx)(n.h3,{id:"definition-2",children:"Definition:"}),"\n",(0,t.jsxs)(n.p,{children:["Java uses ",(0,t.jsx)(n.code,{children:"try"}),", ",(0,t.jsx)(n.code,{children:"catch"}),", and ",(0,t.jsx)(n.code,{children:"finally"})," blocks for exception handling. Exceptions can be checked or unchecked, and developers must handle checked exceptions explicitly."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax-2",children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"try {\r\n    // Risky code\r\n} catch (ExceptionType e) {\r\n    // Handle the exception\r\n} finally {\r\n    // Optional cleanup code\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-2",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Main {\r\n    public static void main(String[] args) {\r\n        try {\r\n            int result = 10 / 0;\r\n            System.out.println(result);\r\n        } catch (ArithmeticException e) {\r\n            System.out.println("Error: Division by zero is not allowed.");\r\n        }\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"python",children:(0,t.jsx)(n.strong,{children:"Python"})}),"\n",(0,t.jsx)(n.h3,{id:"definition-3",children:"Definition:"}),"\n",(0,t.jsxs)(n.p,{children:["Python uses ",(0,t.jsx)(n.code,{children:"try"}),", ",(0,t.jsx)(n.code,{children:"except"}),", and optionally ",(0,t.jsx)(n.code,{children:"finally"})," blocks to catch and handle exceptions. Python exceptions are dynamically typed and easy to use."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax-3",children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"try:\r\n    # Code that may cause an error\r\nexcept ExceptionType as e:\r\n    # Handle the error\r\nfinally:\r\n    # Optional cleanup\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-3",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'try:\r\n    result = 10 / 0\r\n    print(result)\r\nexcept ZeroDivisionError as e:\r\n    print("Error: Division by zero is not allowed.")\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"javascript",children:(0,t.jsx)(n.strong,{children:"JavaScript"})}),"\n",(0,t.jsx)(n.h3,{id:"definition-4",children:"Definition:"}),"\n",(0,t.jsxs)(n.p,{children:["JavaScript handles exceptions using ",(0,t.jsx)(n.code,{children:"try"}),", ",(0,t.jsx)(n.code,{children:"catch"}),", and ",(0,t.jsx)(n.code,{children:"finally"})," blocks. Exceptions can be any value, but typically they are ",(0,t.jsx)(n.code,{children:"Error"})," objects."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax-4",children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"try {\r\n    // Code that may throw an error\r\n} catch (e) {\r\n    // Handle the error\r\n} finally {\r\n    // Optional cleanup code\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-4",children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'try {\r\n    let result = 10 / 0;\r\n    if (!isFinite(result)) throw new Error("Division by zero");\r\n    console.log(result);\r\n} catch (e) {\r\n    console.log("Error: Division by zero is not allowed.");\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:(0,t.jsx)(n.strong,{children:"TypeScript"})}),"\n",(0,t.jsx)(n.h3,{id:"definition-5",children:"Definition:"}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript handles exceptions similarly to JavaScript using ",(0,t.jsx)(n.code,{children:"try"}),", ",(0,t.jsx)(n.code,{children:"catch"}),", and ",(0,t.jsx)(n.code,{children:"finally"})," blocks. Since TypeScript is a superset of JavaScript, it uses the same syntax and behavior for exceptions, but you can also specify error types if needed."]}),"\n",(0,t.jsx)(n.h3,{id:"syntax-5",children:"Syntax:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"try {\r\n    // Code that may throw an error\r\n} catch (e: unknown) {\r\n    // Handle the error with proper type checking\r\n} finally {\r\n    // Optional cleanup code\r\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'try {\r\n    let result = 10 / 0;\r\n    if (!isFinite(result)) throw new Error("Division by zero");\r\n    console.log(result);\r\n} catch (e: unknown) {\r\n    if (e instanceof Error) {\r\n        console.log("Error:", e.message);\r\n    } else {\r\n        console.log("Unknown error");\r\n    }\r\n}\r\n\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"#list-of-topics",children:"Back to top"})})]})}function h(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},50065:function(e,n,r){r.d(n,{Z:()=>a,a:()=>l});var i=r(67294);let t={},s=i.createContext(t);function l(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);