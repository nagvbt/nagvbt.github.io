"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[4951],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),m=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(c.Provider,{value:t},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),s=m(n),u=i,d=s["".concat(c,".").concat(u)]||s[u]||f[u]||a;return n?r.createElement(d,o(o({ref:t},p),{},{components:n})):r.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[s]="string"==typeof e?e:i,o[1]=l;for(var m=2;m<a;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},20622:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>l,toc:()=>m});var r=n(87462),i=(n(67294),n(3905));const a={tags:["MFC"]},o="Limiting the maximum and minimum sizing  of a Frame Window",l={permalink:"/blog/2012/03/17/limiting-maximum-minimum-sizing-of-a-window",source:"@site/blog/2012-03-17-limiting-maximum-minimum-sizing-of-a-window.md",title:"Limiting the maximum and minimum sizing  of a Frame Window",description:"To limit the maximum and minimum size of a Frame Window.",date:"2012-03-17T00:00:00.000Z",formattedDate:"March 17, 2012",tags:[{label:"MFC",permalink:"/blog/tags/mfc"}],readingTime:.615,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["MFC"]},prevItem:{title:"Reading Books",permalink:"/blog/2012/03/25/reading-books"},nextItem:{title:"Centering an Application Frame Window to desktop",permalink:"/blog/2012/03/16/centering-an-application-frame-window-to-desktop"}},c={authorsImageUrls:[]},m=[],p={toc:m},s="wrapper";function f(e){let{components:t,...n}=e;return(0,i.kt)(s,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"To limit the maximum and minimum size of a Frame Window."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Define Min and Mix size in pixels"),(0,i.kt)("li",{parentName:"ol"},"Handle the ",(0,i.kt)("strong",{parentName:"li"},"WM_GETMINMAXINFO")," message in a CFrameWnd derived class. \xa0The MINMAXINFO struct sets limits on the entire window, we need to take into account scroll bars,\xa0toolbars, \xa0etc")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"}," // Min and Mix size in pixels\n# define MINX 500\n# define MINY 300\n# define MAXX 600\n# define MAXY 400\n\nvoid CMainFrame::OnGetMinMaxInfo(MINMAXINFO* lpMMI) { \n  CRect rectWnd; CRect rectClient;\n  GetWindowRect(&rectWnd); \n  GetClientRect(&rectClient);\n\n  // get offset of toolbars, scrollbars, etc. \n  int nWidthOffset = rectWnd.Width() - rectClient.Width(); \n  int nHeightOffset = rectWnd.Height() - rectClient.Height();\n\n  lpMMI->ptMinTrackSize.x = MINX + nWidthOffset; \n  lpMMI->ptMinTrackSize.y = MINY + nHeightOffset;\n  lpMMI->ptMaxTrackSize.x = MAXX + nWidthOffset;\n  lpMMI->ptMaxTrackSize.y = MAXY + nHeightOffset;\n\n  CFrameWnd::OnGetMinMaxInfo(lpMMI);\n\n}\n")))}f.isMDXComponent=!0}}]);