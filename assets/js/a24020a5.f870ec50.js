"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[63818],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},C=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(n),C=r,h=u["".concat(p,".").concat(C)]||u[C]||d[C]||i;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=C;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}C.displayName="MDXCreateElement"},63767:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={sidebar_position:6},o="ATL Tutorial",l={unversionedId:"Tutorials/ATL",id:"Tutorials/ATL",title:"ATL Tutorial",description:"If you are new to ATL ( Active Template Library ) please refer the below items.",source:"@site/docs/Tutorials/ATL.md",sourceDirName:"Tutorials",slug:"/Tutorials/ATL",permalink:"/docs/Tutorials/ATL",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"ActiveX Control Tutorial",permalink:"/docs/Tutorials/ActiveX"},next:{title:"COM Step by Step Tutorial",permalink:"/docs/Tutorials/COM"}},p={},s=[],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"atl-tutorial"},"ATL Tutorial"),(0,r.kt)("p",null,"If you are new to ATL ( Active Template Library ) please refer the below items."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/blog/2012/07/08/basics-of-atl"},"1. Basics of ATL")),(0,r.kt)("p",null,"In this tutorial we will be creating"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"MathComp which is a DLL or Inproc server and exposes the Add and Sub functions.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"An MFC Dialog Based Application which acts like a Client for MathComp"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Steps for creating MathComp")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Open VS 2008"),(0,r.kt)("li",{parentName:"ol"},"File->NewProject Click OK -> Click Next ",(0,r.kt)("strong",{parentName:"li"},"Select Server type:")," as DLL ",(0,r.kt)("strong",{parentName:"li"},"Select Addition options:")," as 'Allow merging of proxy/stub code' and click Finish"),(0,r.kt)("li",{parentName:"ol"},"Add Component Class")),(0,r.kt)("p",null,"Select ",(0,r.kt)("inlineCode",{parentName:"p"},"ATL simple Object")),(0,r.kt)("p",null,"Enter Short name: \"CMath\" to add the component class -> Click 'Finish'"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Add a Method to ICMath Interface")),(0,r.kt)("p",null,"The classes created are shown below in the class diagram."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"CCMath")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// CCMath\nclass ATL_NO_VTABLE CCMath :\n       public CComObjectRootEx<CComSingleThreadModel>,\n       public CComCoClass<CCMath, &CLSID_CMath>,\n       public IDispatchImpl<ICMath, &IID_ICMath, &LIBID_MathCompLib, /*wMajor =*/ 1, /*wMinor =*/ 0>\n{\npublic :\n      CCMath()\n      {\n      }\n\nDECLARE_REGISTRY_RESOURCEID(IDR_CMATH)\n\nBEGIN_COM_MAP(CCMath)\n      COM_INTERFACE_ENTRY(ICMath)\n      COM_INTERFACE_ENTRY(IDispatch)\nEND_COM_MAP()\n\nDECLARE_PROTECT_FINAL_CONSTRUCT()\n\n      HRESULT FinalConstruct()\n      {\n             return S_OK;\n      }\n\n       void FinalRelease()\n      {\n      }\n\npublic :\n\n      STDMETHOD(Add)(DOUBLE i, DOUBLE j, DOUBLE* result);\n      STDMETHOD(Sub)(DOUBLE i, DOUBLE j, DOUBLE* result);\n};\n\nOBJECT_ENTRY_AUTO( __uuidof(CMath), CCMath)\n\nCMath.h\n// CCMath\nSTDMETHODIMP CCMath::Add(DOUBLE i, DOUBLE j, DOUBLE* result)\n{\n      *result = i + j;\n       return S_OK;\n}\n\nSTDMETHODIMP CCMath::Sub(DOUBLE i, DOUBLE j, DOUBLE* result)\n{\n      *result = i - j;\n       return S_OK;\n}\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"MathComp.idl")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// MathComp.idl : IDL source for MathComp\n// This file will be processed by the MIDL tool to\n// produce the type library (MathComp.tlb) and marshalling code.\n\nimport "oaidl.idl" ;\nimport "ocidl.idl" ;\n\n[\n       object ,\n       uuid (F3BDE3CF-884A-461A-A377-1F96A72239B0),\n       dual ,\n       nonextensible ,\n       helpstring ("ICMath Interface" ),\n       pointer_default (unique )\n]\ninterface ICMath : IDispatch{\n      [ id (1), helpstring ( "method Add")] HRESULT Add([ in ] DOUBLE i, [in ] DOUBLE j, [out ] DOUBLE* result);\n      [ id (2), helpstring ( "method Sub")] HRESULT Sub([ in ] DOUBLE i, [in ] DOUBLE j, [out ] DOUBLE* result);\n};\n[\n       uuid (44FF4D78-6AAD-4D2B-9150-DEBCCE79D8E0),\n       version (1.0),\n       helpstring ("MathComp 1.0 Type Library" )\n]\nlibrary MathCompLib\n{\n       importlib ("stdole2.tlb" );\n      [\n             uuid (4A8C8314-6C03-4AF7-96A1-9D6052A89363),\n             helpstring ("CMath Class" )\n      ]\n       coclass CMath\n      {\n            [ default ] interface ICMath;\n      };\n};\n')),(0,r.kt)("p",null,"NOTE: Other classes are not shown here please Download the source for complete code."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Steps for creating MFC Client")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create an MFC Dialog based application")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Design the Dialog as shown below")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add a Add button Handler (OnBnClickedButtonAdd) 4. Inside Add button handler add the below code"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'//Step1: import include .tlb file\n#import "..MathCompMathComp.tlb" no_namespace\n\nvoid CCMathClientDlg::OnBnClickedButtonAdd()\n{\n      //Step2/////////////// Initialize the COM libraries ///////////////////////////////\n     CoInitialize(NULL);\n\n      //Step3/////////////////////////Retriving CLSID from ProgID///////////////////////\n      CLSID clsid;\n      CLSIDFromProgID(OLESTR("MathComp.CMath.1"),&clsid); // will be in CMath.rgs file\n\n      //Step4/////////////////////////////Creating instance of server///////////////////\n      ICMath *pICMath;\n\n      HRESULT hr = CoCreateInstance(\n                     clsid,             //The CLSID associated with the data and code that will be used to create the object.\n                     NULL,              //If NULL, indicates that the object is not being created as part of an aggregate\n                     CLSCTX_LOCAL_SERVER|CLSCTX_INPROC_SERVER, //ontext in which the code that manages the newly created object will run\n                     __uuidof(ICMath),  //riid: A reference to the identifier of the interface to be used to communicate with the object.\n                     (LPVOID*)&pICMath); //*ppv: Address of pointer variable that receives the interface pointer requested in riid.\n                                       //Upon successful return, *ppv contains the requested interface pointer. Upon failure, *ppv contains NULL.\n\n      if (FAILED(hr))\n      {\n            AfxMessageBox(_T("ICMath Failed"));\n      }\n\n      //Step5/////////////////////////////Using COM Component//////////////////////////\n      UpdateData(TRUE);\n\n      double res =0;\n      pICMath->Add(m_i, m_j, &res);\n      m_Result = res;\n\n      pICMath->Release(); // To avoid memory leak\n      pICMath = NULL;\n\n      //Step6////////////////////////////Uninit\'ializing the COM libraries//////////////\n      CoUninitialize();\n\n      UpdateData(FALSE);\n}\n')))}d.isMDXComponent=!0}}]);