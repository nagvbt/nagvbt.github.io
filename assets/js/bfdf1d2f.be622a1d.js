"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["90975"],{30043:function(e,t,n){n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var a=n(8120),i=n(85893),o=n(50065);let r={tags:["ATL","MFC","Tutorial"]},s="Tutorial to create MFC ActiveX Control which can be used in HTML Pages",c={authorsImageUrls:[]},l=[];function u(e){let t={a:"a",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.strong,{children:"Definition:"}),"\xa0ActiveX controls are COM components which are self-registering and Implements standard interfaces that deal specifically with GUI-based tasks such as rendering, sizing, activation, and property persistence."]}),"\n",(0,i.jsx)(t.p,{children:"An ActiveX control is anything you might see in the Toolbox of Visual studio (i.e. EditBox, combobox e.t.c) we can even use the Activex controls in web pages using and handling events with Javascript."}),"\n",(0,i.jsxs)(t.p,{children:["For complete tutorial Refer ",(0,i.jsx)(t.a,{href:"/docs/Tutorials/ActiveX",children:"ActiveX Control Tutorial"})]})]})}function d(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},50065:function(e,t,n){n.d(t,{Z:()=>s,a:()=>r});var a=n(67294);let i={},o=a.createContext(i);function r(e){let t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:t},e.children)}},8120:function(e){e.exports=JSON.parse('{"permalink":"/blog/2012/04/01/mfc-activex-control-which-can-be-used-in-html-pages","source":"@site/blog/2012-04-01-mfc-activex-control-which-can-be-used-in-html-pages.md","title":"Tutorial to create MFC ActiveX Control which can be used in HTML Pages","description":"Definition:\xa0ActiveX controls are COM components which are self-registering and Implements standard interfaces that deal specifically with GUI-based tasks such as rendering, sizing, activation, and property persistence.","date":"2012-04-01T00:00:00.000Z","tags":[{"inline":true,"label":"ATL","permalink":"/blog/tags/atl"},{"inline":true,"label":"MFC","permalink":"/blog/tags/mfc"},{"inline":true,"label":"Tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":0.43,"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["ATL","MFC","Tutorial"]},"unlisted":false,"prevItem":{"title":"How to Expand and Contract a MFC Dialog ?","permalink":"/blog/2012/04/01/expand-and-contract-a-mfc-dialog"},"nextItem":{"title":"Invoke Native C++ DLL from .NET Code","permalink":"/blog/2012/03/30/invoke-native-c-dll-from-net-code"}}')}}]);