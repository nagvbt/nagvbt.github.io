"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[59978],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},b=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=i(n),b=o,d=u["".concat(c,".").concat(b)]||u[b]||f[b]||a;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var i=2;i<a;i++)l[i]=n[i];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}b.displayName="MDXCreateElement"},39909:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>f,frontMatter:()=>a,metadata:()=>s,toc:()=>i});var r=n(87462),o=(n(67294),n(3905));const a={tags:["C++"]},l="Why size of an empty C++ class not zero?",s={permalink:"/blog/2011/09/18/why-size-of-an-empty-c-class-not-zero",source:"@site/blog/2011-09-18-why-size-of-an-empty-c-class-not-zero.md",title:"Why size of an empty C++ class not zero?",description:"To ensure that the addresses of two different objects will be different C++ compiler will allocate one byte of memory. The below sample code explains clearly. Because of this behaviour the addresses of class X objects are not equal even though there is no data present in the class X.",date:"2011-09-18T00:00:00.000Z",formattedDate:"September 18, 2011",tags:[{label:"C++",permalink:"/blog/tags/c"}],readingTime:.565,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["C++"]},prevItem:{title:"Variable arguments handling in C/C++",permalink:"/blog/2011/09/18/variable-arguments-handling"},nextItem:{title:"Console Application Event Handling",permalink:"/blog/2011/09/03/console-application-event-handling"}},c={authorsImageUrls:[]},i=[],p={toc:i},u="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"To ensure that the addresses of two different objects will be different C++ compiler will allocate one byte of memory. The below sample code explains clearly. Because of this behaviour the addresses of class X objects are not equal even though there is no data present in the class X."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'class X {\n\n};\n\nclass Y {\n\n};\n\nvoid main() { \n  X objX1, objX2; Y objY;\n\ncout<<"size of objX1: "<<sizeof(objX1)<<endl; //Output: 1 \ncout<<"size of objY: "<<sizeof(objY)<<endl; //Output: 1\n\n//Addresses\n cout<<"Address of objX1: "<<&objX1<<endl; \n cout<<"Address of objX2: "<<&objX2<<endl;\n\ncout<<"Address of objY: "<<&objY<<endl;\n\nif(&objX1 == &objX2) { \n  cout<<"Never Happens"; \n  }\n}\n')))}f.isMDXComponent=!0}}]);