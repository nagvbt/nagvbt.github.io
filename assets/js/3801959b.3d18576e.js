"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[38091],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(n),g=o,m=p["".concat(l,".").concat(g)]||p[g]||d[g]||a;return n?r.createElement(m,c(c({ref:t},u),{},{components:n})):r.createElement(m,c({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=g;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[p]="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},46218:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const a={tags:["C++","Design Patterns"]},c="'Factory Method' Design Pattern using simple program",i={permalink:"/blog/2012/04/06/factorymethod",source:"@site/blog/2012-04-06-factorymethod.md",title:"'Factory Method' Design Pattern using simple program",description:"Definition:",date:"2012-04-06T00:00:00.000Z",formattedDate:"April 6, 2012",tags:[{label:"C++",permalink:"/blog/tags/c"},{label:"Design Patterns",permalink:"/blog/tags/design-patterns"}],readingTime:.87,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["C++","Design Patterns"]},prevItem:{title:"Part-3: C++, C#, Java Syntax Differences",permalink:"/blog/2012/04/12/syntax-3"},nextItem:{title:"'Singleton' Design Pattern using simple program",permalink:"/blog/2012/04/06/singleton-design-pattern-using-simple-program"}},l={authorsImageUrls:[]},s=[],u={toc:s},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Definition:")),(0,o.kt)("p",null,"Creates an instance of several derived classes. or Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Program:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'#include "iostream"\nusing namespace std;\n\nclass Product\n{\npublic:\n    virtual void Show() = 0;\n};\n\nclass ConcreteProductA : public Product\n{\npublic:\n    virtual void Show()\n    {\n      cout<<"ConcreteProductA"<<endl;\n    }\n};\n\nclass ConcreteProductB : public Product\n{\npublic:\n    virtual void Show()\n    {\n      cout<<"ConcreteProductB"<<endl;\n    }\n};\n\nclass Creator\n{\npublic:\n    virtual Product* FactoryMethod() = 0;\n};\n\nclass ConcreteCreatorA : public Creator\n{\npublic:\n    ConcreteCreatorA() {}\n    virtual Product* FactoryMethod()\n    {\n      return new ConcreteProductA();\n    }\n};\n\nclass ConcreteCreatorB : public Creator\n{\npublic:\n    virtual Product* FactoryMethod()\n    {\n      return new ConcreteProductB();\n    }\n};\n\nvoid main()\n{\n  Creator* creators[2];\n\n  creators[0] =  new ConcreteCreatorA();\n  creators[1] =  new ConcreteCreatorB();\n\n  for (int i=0; i < 2; i++)    {     Product* product = creators[i]->FactoryMethod();\n    cout<<"Created "<<Show();\n  }\n\n  getchar();\n}\n\n/*\nOUT PUT\n-------\nCreated\nConcreteProductA\nCreated\nConcreteProductB\n*/\n')))}d.isMDXComponent=!0}}]);