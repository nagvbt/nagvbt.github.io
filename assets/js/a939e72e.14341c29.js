"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["72326"],{35688:function(e,n,t){t.r(n),t.d(n,{frontMatter:()=>l,default:()=>h,toc:()=>d,metadata:()=>s,assets:()=>o,contentTitle:()=>i});var s=JSON.parse('{"id":"UIFrameworks/Props","title":"Props","description":"REACT","source":"@site/docs/UIFrameworks/Props.md","sourceDirName":"UIFrameworks","slug":"/UIFrameworks/Props","permalink":"/docs/UIFrameworks/Props","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":11,"frontMatter":{"sidebar_position":11},"sidebar":"tutorialSidebar","previous":{"title":"JSX","permalink":"/docs/UIFrameworks/JSX"},"next":{"title":"Events","permalink":"/docs/UIFrameworks/Events"}}'),r=t(85893),a=t(50065);let l={sidebar_position:11},i="Props",o={},d=[{value:"<strong>REACT</strong>",id:"react",level:2},{value:"What are React Props?",id:"what-are-react-props",level:3},{value:"Props and State",id:"props-and-state",level:2},{value:"Definition",id:"definition",level:3},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"Passing Data with Props",id:"passing-data-with-props",level:2},{value:"Syntax of passing data with props",id:"syntax-of-passing-data-with-props",level:3},{value:"Example of passing data with props",id:"example-of-passing-data-with-props",level:3},{value:"Managing Local Component State",id:"managing-local-component-state",level:2},{value:"Syntax for managing local component state",id:"syntax-for-managing-local-component-state",level:3},{value:"Example for managing local component state",id:"example-for-managing-local-component-state",level:3},{value:"useState Hook (Functional Components)",id:"usestate-hook-functional-components",level:2},{value:"Syntax of useState Hook",id:"syntax-of-usestate-hook",level:3},{value:"Example of useState Hook",id:"example-of-usestate-hook",level:3},{value:"Summary",id:"summary",level:3},{value:"<strong>SVELTE</strong>",id:"svelte",level:2},{value:"Props &amp; State in Svelte",id:"props--state-in-svelte",level:2},{value:"What are Props?",id:"what-are-props",level:2},{value:"Definition of Svelte Props",id:"definition-of-svelte-props",level:3},{value:"Props and State (Reactivity)",id:"props-and-state-reactivity",level:2},{value:"Props \u2192 passed from parent",id:"props--passed-from-parent",level:3},{value:"State \u2192 declared as variables and are <strong>reactive by default</strong> in Svelte",id:"state--declared-as-variables-and-are-reactive-by-default-in-svelte",level:3},{value:"Syntax (Props)",id:"syntax-props",level:3},{value:"Example(Props + State)",id:"exampleprops--state",level:3},{value:"Passing Data with Props in Svelte",id:"passing-data-with-props-in-svelte",level:2},{value:"Syntax (Passing to Child)",id:"syntax-passing-to-child",level:3},{value:"Managing Local Component State in Svelte",id:"managing-local-component-state-in-svelte",level:2},{value:"Syntax for managing local component state in svelte",id:"syntax-for-managing-local-component-state-in-svelte",level:3},{value:"Example of managing local componenet state in svelte",id:"example-of-managing-local-componenet-state-in-svelte",level:3},{value:"Local State (Input Handling)",id:"local-state-input-handling",level:2},{value:"Syntax of local state input handling",id:"syntax-of-local-state-input-handling",level:3},{value:"Example of local state input handling",id:"example-of-local-state-input-handling",level:3},{value:"React vs Svelte (Hooks vs Reactivity)",id:"react-vs-svelte-hooks-vs-reactivity",level:3},{value:"Summary of props in React and Svelte",id:"summary-of-props-in-react-and-svelte",level:3}];function c(e){let n={blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"props",children:"Props"})}),"\n",(0,r.jsx)(n.h2,{id:"react",children:(0,r.jsx)(n.strong,{children:"REACT"})}),"\n",(0,r.jsx)(n.h3,{id:"what-are-react-props",children:"What are React Props?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Props (short for properties)"})," are used to pass ",(0,r.jsx)(n.strong,{children:"data from one component (parent)"})," to ",(0,r.jsx)(n.strong,{children:"another (child)"}),".\r\nThey are ",(0,r.jsx)(n.strong,{children:"read-only"}),", meaning the child component cannot change them."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"Think of props as function arguments, but for components."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"props-and-state",children:"Props and State"}),"\n",(0,r.jsx)(n.h3,{id:"definition",children:"Definition"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Props"})," are used to pass data ",(0,r.jsx)(n.em,{children:"into"})," a component."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"State"})," is used to manage ",(0,r.jsx)(n.em,{children:"internal"})," data ",(0,r.jsx)(n.em,{children:"within"})," a component."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"syntax",children:"Syntax"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"type MyProps = {\r\n  title: string;\r\n};\r\n\r\nconst MyComponent: React.FC<MyProps> = ({ title }) => {\r\n  return <h2>{title}</h2>;\r\n};\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\r\n\r\ntype MyProps = {\r\n  name: string;\r\n};\r\n\r\nconst Greeting: React.FC<MyProps> = ({ name }) => {\r\n  const [count, setCount] = useState<number>(0); // state\r\n\r\n  return (\r\n    <div>\r\n      <h2>Hello, {name}!</h2> {/* Using props */}\r\n      <p>You clicked {count} times.</p>\r\n      <button onClick={() => setCount(count + 1)}>Click Me</button> {/* Updating state */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Greeting;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"passing-data-with-props",children:"Passing Data with Props"}),"\n",(0,r.jsx)(n.p,{children:"You can pass values to a child component as attributes."}),"\n",(0,r.jsx)(n.h3,{id:"syntax-of-passing-data-with-props",children:"Syntax of passing data with props"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'<ChildComponent title="Welcome" />\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"example-of-passing-data-with-props",children:"Example of passing data with props"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"// ParentComponent.tsx\r\nimport React from 'react';\r\nimport Child from './Child';\r\n\r\nconst Parent: React.FC = () => {\r\n  return <Child title=\"React Props Example\" />;\r\n};\r\n\r\n// Child.tsx\r\ntype Props = {\r\n  title: string;\r\n};\r\n\r\nconst Child: React.FC<Props> = ({ title }) => {\r\n  return <h1>{title}</h1>; // Displaying prop from parent\r\n};\r\n\r\nexport default Parent;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"managing-local-component-state",children:"Managing Local Component State"}),"\n",(0,r.jsx)(n.p,{children:"State is local data in a component that can change over time (like user input, count, etc.)"}),"\n",(0,r.jsx)(n.h3,{id:"syntax-for-managing-local-component-state",children:"Syntax for managing local component state"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const [value, setValue] = useState<type>(initialValue);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"example-for-managing-local-component-state",children:"Example for managing local component state"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"import React, { useState } from 'react';\r\n\r\nconst Counter: React.FC = () => {\r\n  const [count, setCount] = useState<number>(0); // Local state\r\n\r\n  return (\r\n    <div>\r\n      <p>Count: {count}</p>\r\n      <button onClick={() => setCount(count + 1)}>Add +1</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"usestate-hook-functional-components",children:"useState Hook (Functional Components)"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"useState"})," hook lets functional components hold and update internal state."]}),"\n",(0,r.jsx)(n.h3,{id:"syntax-of-usestate-hook",children:"Syntax of useState Hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"const [state, setState] = useState<type>(initialValue);\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"example-of-usestate-hook",children:"Example of useState Hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'import React, { useState } from \'react\';\r\n\r\nconst NameInput: React.FC = () => {\r\n  const [name, setName] = useState<string>("");\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)} // update state on input\r\n        placeholder="Enter your name"\r\n      />\r\n      <p>Your name is: {name}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NameInput;\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Concept"}),(0,r.jsx)(n.th,{children:"Purpose"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Props"})}),(0,r.jsx)(n.td,{children:"Pass data into components"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"State"})}),(0,r.jsx)(n.td,{children:"Manage dynamic/local data"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Passing with Props"})}),(0,r.jsx)(n.td,{children:"Use props to configure child behavior"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"useState"})}),(0,r.jsx)(n.td,{children:"React Hook to manage state in functions"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"svelte",children:(0,r.jsx)(n.strong,{children:"SVELTE"})}),"\n",(0,r.jsx)(n.h2,{id:"props--state-in-svelte",children:"Props & State in Svelte"}),"\n",(0,r.jsx)(n.h2,{id:"what-are-props",children:"What are Props?"}),"\n",(0,r.jsx)(n.h3,{id:"definition-of-svelte-props",children:"Definition of Svelte Props"}),"\n",(0,r.jsxs)(n.p,{children:["In ",(0,r.jsx)(n.strong,{children:"Svelte"}),", ",(0,r.jsx)(n.strong,{children:"props"})," are ",(0,r.jsx)(n.strong,{children:"component parameters"})," \u2014 values passed from a ",(0,r.jsx)(n.strong,{children:"parent"})," to a\r\n",(0,r.jsx)(n.strong,{children:"child component"}),"."]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Like function arguments for components.\r\nProps are ",(0,r.jsx)(n.strong,{children:"read-only"})," in the child component."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"props-and-state-reactivity",children:"Props and State (Reactivity)"}),"\n",(0,r.jsx)(n.h3,{id:"props--passed-from-parent",children:"Props \u2192 passed from parent"}),"\n",(0,r.jsxs)(n.h3,{id:"state--declared-as-variables-and-are-reactive-by-default-in-svelte",children:["State \u2192 declared as variables and are ",(0,r.jsx)(n.strong,{children:"reactive by default"})," in Svelte"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"syntax-props",children:"Syntax (Props)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- ChildComponent.svelte --\x3e\r\n<script lang="ts">\r\n  export let title: string; // Declare props using `export let`\r\n<\/script>\r\n\r\n<h2>{title}</h2>\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"exampleprops--state",children:"Example(Props + State)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- Greeting.svelte --\x3e\r\n<script lang="ts">\r\n  export let name: string; // prop\r\n  let count: number = 0;   // state (reactive)\r\n<\/script>\r\n\r\n<div>\r\n  <h2>Hello, {name}!</h2>\r\n  <p>You clicked {count} times.</p>\r\n  <button on:click={() => count += 1}>Click Me</button>\r\n</div>\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"passing-data-with-props-in-svelte",children:"Passing Data with Props in Svelte"}),"\n",(0,r.jsx)(n.h3,{id:"syntax-passing-to-child",children:"Syntax (Passing to Child)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- ParentComponent.svelte --\x3e\r\n<script lang="ts">\r\n  import Child from \'./ChildComponent.svelte\';\r\n<\/script>\r\n\r\n<Child title="Svelte Props Example" />\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- ChildComponent.svelte --\x3e\r\n<script lang="ts">\r\n  export let title: string;\r\n<\/script>\r\n\r\n<h1>{title}</h1>\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"managing-local-component-state-in-svelte",children:"Managing Local Component State in Svelte"}),"\n",(0,r.jsxs)(n.p,{children:["In Svelte, any variable declared in ",(0,r.jsx)(n.code,{children:"<script>"})," is ",(0,r.jsx)(n.strong,{children:"reactive by default"})," and acts as ",(0,r.jsx)(n.strong,{children:"state"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"syntax-for-managing-local-component-state-in-svelte",children:"Syntax for managing local component state in svelte"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-svelte",children:'<script lang="ts">\r\n  let count: number = 0;\r\n<\/script>\r\n\r\n<p>{count}</p>\r\n<button on:click={() => count++}>Add +1</button>\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"example-of-managing-local-componenet-state-in-svelte",children:"Example of managing local componenet state in svelte"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- Counter.svelte --\x3e\r\n<script lang="ts">\r\n  let count: number = 0;\r\n<\/script>\r\n\r\n<div>\r\n  <p>Count: {count}</p>\r\n  <button on:click={() => count++}>Add +1</button>\r\n</div>\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"local-state-input-handling",children:"Local State (Input Handling)"}),"\n",(0,r.jsx)(n.h3,{id:"syntax-of-local-state-input-handling",children:"Syntax of local state input handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-svelte",children:'<script lang="ts">\r\n  let variableName: string = "";\r\n<\/script>\r\n\r\n<input bind:value={variableName} />\r\n<p>{variableName}</p>\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"bind:value={...}"})," for two-way data binding in Svelte."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"example-of-local-state-input-handling",children:"Example of local state input handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-svelte",children:'\x3c!-- NameInput.svelte --\x3e\r\n<script lang="ts">\r\n  let name: string = "";\r\n<\/script>\r\n\r\n<input bind:value={name} placeholder="Enter your name" />\r\n<p>Your name is: {name}</p>\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"bind:value={name}"})," keeps the input field and ",(0,r.jsx)(n.code,{children:"name"})," variable in sync automatically."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"react-vs-svelte-hooks-vs-reactivity",children:"React vs Svelte (Hooks vs Reactivity)"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Concept"}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"React"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.strong,{children:"Svelte"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Local state"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"useState()"})," hook"]}),(0,r.jsxs)(n.td,{children:["Reactive variables (",(0,r.jsx)(n.code,{children:"let count = 0"}),")"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Side effects"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"useEffect()"})," hook"]}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"onMount()"}),", reactive statements"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Derived/computed data"}),(0,r.jsx)(n.td,{children:"Custom hooks or logic"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"$:"})," reactive statements"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Input binding"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"value"}),", ",(0,r.jsx)(n.code,{children:"onChange"})," with state"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bind:value={name}"})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"summary-of-props-in-react-and-svelte",children:"Summary of props in React and Svelte"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Concept"}),(0,r.jsx)(n.th,{children:"React"}),(0,r.jsx)(n.th,{children:"Svelte"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Props"})}),(0,r.jsxs)(n.td,{children:["Passed using ",(0,r.jsx)(n.code,{children:"props"})]}),(0,r.jsxs)(n.td,{children:["Declared with ",(0,r.jsx)(n.code,{children:"export let"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"State"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"useState"})," for local state"]}),(0,r.jsxs)(n.td,{children:["Reactive variables (",(0,r.jsx)(n.code,{children:"let"}),")"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Update State"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"setState(value)"})}),(0,r.jsxs)(n.td,{children:["Direct assignment (",(0,r.jsx)(n.code,{children:"count++"}),")"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Input Handling"})}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"onChange"}),", setState"]}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"bind:value={name}"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Pass Props"})}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'<Comp prop="value" />'})}),(0,r.jsxs)(n.td,{children:["Same: ",(0,r.jsx)(n.code,{children:'<Child title="Hello" />'})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Use Props in Child"})}),(0,r.jsx)(n.td,{children:"Destructure in function parameters"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"export let title;"})})]})]})]}),"\n",(0,r.jsx)(n.hr,{})]})}function h(e={}){let{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,n,t){t.d(n,{Z:()=>i,a:()=>l});var s=t(67294);let r={},a=s.createContext(r);function l(e){let n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);