"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[86661],{3905:(t,n,e)=>{e.d(n,{Zo:()=>s,kt:()=>f});var r=e(67294);function a(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function c(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,r)}return e}function o(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?c(Object(e),!0).forEach((function(n){a(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):c(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function i(t,n){if(null==t)return{};var e,r,a=function(t,n){if(null==t)return{};var e,r,a={},c=Object.keys(t);for(r=0;r<c.length;r++)e=c[r],n.indexOf(e)>=0||(a[e]=t[e]);return a}(t,n);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(t);for(r=0;r<c.length;r++)e=c[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(a[e]=t[e])}return a}var l=r.createContext({}),u=function(t){var n=r.useContext(l),e=n;return t&&(e="function"==typeof t?t(n):o(o({},n),t)),e},s=function(t){var n=u(t.components);return r.createElement(l.Provider,{value:n},t.children)},p="mdxType",d={inlineCode:"code",wrapper:function(t){var n=t.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(t,n){var e=t.components,a=t.mdxType,c=t.originalType,l=t.parentName,s=i(t,["components","mdxType","originalType","parentName"]),p=u(e),b=a,f=p["".concat(l,".").concat(b)]||p[b]||d[b]||c;return e?r.createElement(f,o(o({ref:n},s),{},{components:e})):r.createElement(f,o({ref:n},s))}));function f(t,n){var e=arguments,a=n&&n.mdxType;if("string"==typeof t||a){var c=e.length,o=new Array(c);o[0]=b;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=t,i[p]="string"==typeof t?t:a,o[1]=i;for(var u=2;u<c;u++)o[u]=e[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}b.displayName="MDXCreateElement"},1747:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var r=e(87462),a=(e(67294),e(3905));const c={tags:["C++","Design Patterns"]},o="\u2018AbstractFactory\u2019 Design Pattern using simple program",i={permalink:"/blog/2012/04/04/abstractfactory-designpatter",source:"@site/blog/2012-04-04-abstractfactory-designpatter.md",title:"\u2018AbstractFactory\u2019 Design Pattern using simple program",description:"Definition: Provide an interface for creating families of related or dependent objects without specifying their concrete classes.",date:"2012-04-04T00:00:00.000Z",formattedDate:"April 4, 2012",tags:[{label:"C++",permalink:"/blog/tags/c"},{label:"Design Patterns",permalink:"/blog/tags/design-patterns"}],readingTime:1.35,hasTruncateMarker:!1,authors:[],frontMatter:{tags:["C++","Design Patterns"]},prevItem:{title:"'Singleton' Design Pattern using simple program",permalink:"/blog/2012/04/06/singleton-design-pattern-using-simple-program"},nextItem:{title:"Simple LinkedList program in C++",permalink:"/blog/2012/04/04/linkedlist"}},l={authorsImageUrls:[]},u=[],s={toc:u},p="wrapper";function d(t){let{components:n,...e}=t;return(0,a.kt)(p,(0,r.Z)({},s,e,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition:")," Provide an interface for creating families of related or dependent objects without specifying their concrete classes."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Program:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'\n#include "iostream"\nusing namespace std;\n\n// Abstract Factory pattern\nclass AbstractProductA\n{\npublic:\n  virtual void Show() = 0;\n};\n\nclass AbstractProductB\n{\npublic:\n  virtual void Show() = 0;\n};\n\nclass AbstractFactory\n{\npublic:\n virtual AbstractProductA* CreateProductA() = 0;\n virtual AbstractProductB* CreateProductB() = 0;\n};\n\nclass ProductA1 : public AbstractProductA\n{\npublic:\n  virtual void Show()\n  {\n    cout<<"ProductA1 Show"<<endl;>\n  }\n};\n\nclass ProductB1 : public AbstractProductB\n{\npublic:\n  virtual void Show()\n  {\n    cout<<"ProductB1 Show"<<endl;>\n  }\n};\n\nclass ProductA2 : public AbstractProductA\n{\npublic:\n  virtual void Show()\n  {\n    cout<<"ProductA2 Show"<<endl;\n  }\n};\n\nclass ProductB2 : public AbstractProductB\n{\npublic:\n  virtual void Show()\n  {\n    cout<<"ProductB2 Show"<<endl;\n  }\n};\n\nclass ConcreteFactory1 : public AbstractFactory\n{\npublic:\n    virtual AbstractProductA* CreateProductA()\n    {\n      return new ProductA1();\n    }\n\n    virtual AbstractProductB* CreateProductB()\n    {\n      return new ProductB1();\n    }\n};\n\nclass ConcreteFactory2 : public AbstractFactory\n{\npublic:\n    virtual AbstractProductA* CreateProductA()\n    {\n      return new ProductA2();\n    }\n\n    virtual AbstractProductB* CreateProductB()\n    {\n      return new ProductB2();\n    }\n};\n\nclass Client\n{\nprivate:\n  AbstractProductA* _abstractProductA;\n  AbstractProductB* _abstractProductB;\n\npublic:\n    Client(AbstractFactory\\* factory)\n    {\n      _abstractProductB = factory->CreateProductB();\n      _abstractProductA = factory->CreateProductA();\n    }\n\n    void Run()\n    {\n      _abstractProductA->Show();\n      _abstractProductB->Show();\n\n      delete _abstractProductA;\n      delete _abstractProductB;\n    }\n};\n\nvoid main()\n{\n  // Abstract factory #1\n  AbstractFactory* factory1 = new ConcreteFactory1();\n  Client* client1 = new Client(factory1);\n  client1->Run();\n\n  delete factory1;\n  delete client1;\n\n  // Abstract factory #2\n  AbstractFactory* factory2 = new ConcreteFactory2();\n  Client* client2 = new Client(factory2);\n  client2->Run();\n\n  delete factory2;\n  delete client2;\n\n  getchar();\n}\n\n/*\nOUT PUT\n-------\n\\[ProductA1\\] Show\n\\[ProductB1\\] Show\n\\[ProductA2\\] Show\n\\[ProductB2\\] Show\n\\*/\n\n')))}d.isMDXComponent=!0}}]);