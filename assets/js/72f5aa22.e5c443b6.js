"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[51337],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",w={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},C=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),C=i,u=d["".concat(p,".").concat(C)]||d[C]||w[C]||a;return n?r.createElement(u,l(l({ref:t},c),{},{components:n})):r.createElement(u,l({ref:t},c))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=C;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:i,l[1]=o;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}C.displayName="MDXCreateElement"},39024:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>w,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={},l="Splitter Window",o={unversionedId:"articles/MFC/SplitterWindow",id:"articles/MFC/SplitterWindow",title:"Splitter Window",description:"Definition: A splitter window resides within the frame window. It is divided into several panes, each pane canhave a different size. Splitter window provides the user with several different views for monitoring",source:"@site/docs/articles/MFC/SplitterWindow.md",sourceDirName:"articles/MFC",slug:"/articles/MFC/SplitterWindow",permalink:"/docs/articles/MFC/SplitterWindow",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Random FAQ (MFC)",permalink:"/docs/articles/MFC/RadomFaq"},next:{title:"VC6.0ToVC 8.0",permalink:"/docs/articles/MFC/VC6.0ToVC 8.0"}},p={},s=[{value:"Static Splitter",id:"static-splitter",level:2},{value:"ExampleCode for MDI :",id:"examplecode-for-mdi-",level:3},{value:"Dynamic Splitter",id:"dynamic-splitter",level:2},{value:"Creating Different Views",id:"creating-different-views",level:4}],c={toc:s},d="wrapper";function w(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"splitter-window"},"Splitter Window"),(0,i.kt)("p",null,"Definition: A splitter window resides within the frame window. It is divided into several panes, each pane canhave a different size. Splitter window provides the user with several different views for monitoring\ndata contained in the document at the same time."),(0,i.kt)("h2",{id:"static-splitter"},"Static Splitter"),(0,i.kt)("p",null,"Steps:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Declare CSplitterWnd type variable(s) in the frame window class"),(0,i.kt)("li",{parentName:"ol"},"In frame window\u2019s OnCreateClient(\u2026) member function, call functions\n2.1. CSplitterWnd::CreateStatic(\u2026)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BOOL CSplitterWnd::CreateStatic\n(\n  CWnd *pParentWnd, int nRows, int nCols,\n  DWORD dwStyle=WS_CHILD | WS_VISIBLE,\n  UINT nID=AFX_IDW_PANE_FIRST\n);\n")),(0,i.kt)("p",null,"The fifth parameter, nID, identifies which splitter window is being created. This is necessary because\nwithin one frame window, we can create several nested splitter windows."),(0,i.kt)("p",null,"For the root splitter window (The splitter window whose parent window is the frame window), this ID must be AFX_IDW_PANE_FIRST."),(0,i.kt)("p",null,"For other nested splitter windows, this ID need to be obtained from the parent splitter windows by calling\nfunction CSplitterWnd::IdFromRowCol(\u2026), and passing appropriate column and row coordinates to it. The\nfollowing is the format of this function:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"}," int CSplitterWnd::IdFromRowCol(int row, int col);\n")),(0,i.kt)("p",null,"2.2 CSplitterWnd::CreateView(\u2026)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"    BOOL CSplitter.CreateView\n    (\n    int row, int col,\n    CRuntimeClass *pViewClass, SIZE sizeInit, CCreateContext *pContext\n    );\n")),(0,i.kt)("h3",{id:"examplecode-for-mdi-"},"ExampleCode for MDI :"),(0,i.kt)("p",null,"Step -1"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"class CChildFrame : public CMDIChildWnd\n{\n    DECLARE_DYNCREATE(CChildFrame)\npublic:\n  //Balaji: s_1 Create Splitter\n    CSplitterWnd m_wndSpMain;\n:\n}\n")),(0,i.kt)("p",null,"Step \u2013 2.1 & 2.2"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BOOL CChildFrame::OnCreateClient(LPCREATESTRUCT lpcs, CCreateContext* pContext)\n{\n  //Balaji: s_2.1 Create Splitter\n    m_wndSpMain.CreateStatic(this, 1, 2, WS_CHILD|WS_VISIBLE, AFX_IDW_PANE_FIRST);\n    //Balaji: s_2.2 Create View\n    m_wndSpMain.CreateView(0, 0, RUNTIME_CLASS(CMDISampleView), CSize(100, 100), pContext);\n    m_wndSpMain.CreateView(0, 1, RUNTIME_CLASS(CColorView), CSize(100, 100), pContext);\n \n    //return CMDIChildWnd::OnCreateClient(lpcs, pContext);\n    return TRUE;\n}\n")),(0,i.kt)("h2",{id:"dynamic-splitter"},"Dynamic Splitter"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Declare CSplitterWnd type variable(s) in the frame window class"),(0,i.kt)("li",{parentName:"ol"},"In frame window\u2019s OnCreateClient(\u2026) member function, call functions CSplitterWnd::Create(\u2026) to create dynamic splitter window",(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre",className:"language-cpp"},"BOOL CSplitterWnd::Create\n(\n CWnd* pParentWnd,\n int nMaxRows, int nMaxCols,\n SIZE sizeMin,\n CCreateContext* pContext,\n DWORD dwStyle=WS_CHILD | WS_VISIBLE |WS_HSCROLL | WS_VSCROLL | SPLS_DYNAMIC_SPLIT,\n UINT nID=AFX_IDW_PANE_FIRST\n);\n")))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"The difference between function CSplitterWnd::CreateStatic(\u2026) and CSplitterWnd::Create(\u2026)\nis that when creating dynamic splitter window, we need to specify the maximum number of rows and columns.\n \nExample code:\n```cpp\nm_wndSplitter.Create(this, 2, 2, CSize(10, 10), pContext))\n")),(0,i.kt)("h4",{id:"creating-different-views"},"Creating Different Views"),(0,i.kt)("p",null,"If you want to create a different type of view in the new pane when the user splits the window, you can do so, but you first have to create your own class based on CSplitterWnd. In your new class, you have to provide an override for the CreateView() function"))}w.isMDXComponent=!0}}]);