"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["73893"],{73863:function(r,n,e){e.r(n),e.d(n,{frontMatter:()=>c,default:()=>u,toc:()=>o,metadata:()=>s,assets:()=>l,contentTitle:()=>a});var s=JSON.parse('{"id":"Cpp/Inheritance/Samples","title":"Inheritance Samples","description":"1. Virtual Base Classes / Diamond Problem","source":"@site/docs/Cpp/Inheritance/Samples.md","sourceDirName":"Cpp/Inheritance","slug":"/Cpp/Inheritance/Samples","permalink":"/docs/Cpp/Inheritance/Samples","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"Cpp","previous":{"title":"FAQ","permalink":"/docs/Cpp/Inheritance/FAQ"},"next":{"title":"Loops","permalink":"/docs/Cpp/Loops"}}'),t=e(85893),i=e(50065);let c={sidebar_position:8},a="Inheritance Samples",l={},o=[{value:"1. Virtual Base Classes / Diamond Problem",id:"1-virtual-base-classes--diamond-problem",level:2},{value:"2. Virtual Destructors",id:"2-virtual-destructors",level:2},{value:"3. Base-class Access Control",id:"3-base-class-access-control",level:2},{value:"4. Constructors and Destructors Execution Order",id:"4-constructors-and-destructors-execution-order",level:2},{value:"5. Granting Access",id:"5-granting-access",level:2},{value:"6. Passing Parameters to Base-class Constructors",id:"6-passing-parameters-to-base-class-constructors",level:2}];function d(r){let n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"inheritance-samples",children:"Inheritance Samples"})}),"\n",(0,t.jsx)(n.h2,{id:"1-virtual-base-classes--diamond-problem",children:"1. Virtual Base Classes / Diamond Problem"}),"\n",(0,t.jsx)(n.p,{children:"Virtual Inheritance: Solves the diamond problem by ensuring a single instance of the base class."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class B {\r\npublic:\r\n    int i;\r\n    B() { i = 10; }\r\n};\r\n\r\nclass D1: virtual public B { };\r\nclass D2: virtual public B { };\r\nclass C: public D1, public D2 { };\r\n\r\nvoid main() {\r\n    C obj;\r\n    cout << obj.i; // Without virtual, this would be ambiguous\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Diamond Problem Diagram:"})}),"\n",(0,t.jsx)(n.mermaid,{value:"graph TD\r\n    B[B]\r\n    D1[D1]\r\n    D2[D2]\r\n    C[C]\r\n    B --\x3e|virtual| D1\r\n    B --\x3e|virtual| D2\r\n    D1 --\x3e C\r\n    D2 --\x3e C"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Without virtual inheritance, class C would inherit two copies of B (one through D1 and one through\r\nD2)"}),"\n",(0,t.jsx)(n.li,{children:"This would make obj.i ambiguous - which copy of B's i should it refer to?"}),"\n",(0,t.jsx)(n.li,{children:"Using virtual inheritance ensures only one copy of B exists in C"}),"\n",(0,t.jsx)(n.li,{children:"This resolves the ambiguity, allowing direct access to i through C objects"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Output:"}),"\r\n10"]}),"\n",(0,t.jsx)(n.h2,{id:"2-virtual-destructors",children:"2. Virtual Destructors"}),"\n",(0,t.jsx)(n.p,{children:"Virtual Destructors: Ensures proper calling order for destructors in class hierarchies.  Essential\r\nwhen deleting derived objects through base class pointers to ensure proper cleanup."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'class B {\r\npublic:\r\n    virtual ~B() { cout << "destructor B" << endl; }\r\n};\r\n\r\nclass D: public B {\r\npublic:\r\n    int *p;\r\n    D() {\r\n        p = new int;\r\n        *p = 10;\r\n    }\r\n    ~D() {\r\n        cout << "destructor D" << endl;\r\n        delete p;\r\n    }\r\n};\r\n\r\nvoid main() {\r\n    int z;\r\n    B *pobjB;\r\n    D *pobjD = new D();\r\n    pobjB = pobjD;\r\n    delete pobjB;\r\n    cin >> z;\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Virtual Destructor Diagram:"})}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\r\n    participant Main\r\n    participant B_ptr as B*\r\n    participant D_obj as D object\r\n    Main->>D_obj: Create D object\r\n    D_obj--\x3e>Main: Allocate memory for p\r\n    Main->>B_ptr: pobjB = pobjD (upcast)\r\n    Main->>B_ptr: delete pobjB\r\n    B_ptr->>D_obj: Call D::~D() (virtual)\r\n    D_obj->>D_obj: Free memory for p\r\n    D_obj->>B_ptr: Call B::~B()"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When a derived class object is deleted through a base class pointer, the base class destructor\r\nmust be virtual"}),"\n",(0,t.jsx)(n.li,{children:"Without virtual, only the base class destructor would be called, causing a memory leak (p would\r\nnot be deleted)"}),"\n",(0,t.jsx)(n.li,{children:"With virtual, the correct derived class destructor is called first, then the base class destructor"}),"\n",(0,t.jsx)(n.li,{children:"This ensures proper cleanup of resources allocated by the derived class"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Output:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"destructor D\r\ndestructor B\n"})}),"\n",(0,t.jsx)(n.h2,{id:"3-base-class-access-control",children:"3. Base-class Access Control"}),"\n",(0,t.jsx)(n.p,{children:"Access Control: Public, private, and protected members have different visibility in derived classes."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Base {\r\npublic:\r\n    int m_i;\r\n    Base() {\r\n        m_i = 0;\r\n        m_j = 1;\r\n        m_k = 2;\r\n    }\r\nprivate:\r\n    int m_j;\r\nprotected:\r\n    int m_k;\r\n};\r\n\r\nclass D1: public Base { };\r\n\r\nvoid main() {\r\n    D1 obj;\r\n    cout << obj.m_i;  // Accessible\r\n    //cout << obj.m_j; // Not accessible - private in Base\r\n    //cout << obj.m_k; // Not accessible - protected in Base\r\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Access Control Diagram:"})}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\r\n    Base <|-- D1\r\n    class Base {\r\n        +int m_i\r\n        -int m_j\r\n        #int m_k\r\n        +Base()\r\n    }\r\n    class D1 {\r\n    }   \r\n    note for D1 "Can access:- m_i (public), Cannot access:- m_j (private) and  m_k (protected)"'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"public members (m_i) are accessible from anywhere"}),"\n",(0,t.jsx)(n.li,{children:"private members (m_j) are only accessible within the Base class"}),"\n",(0,t.jsx)(n.li,{children:"protected members (m_k) are accessible within Base and derived classes, but not from outside"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Output:"}),"\r\n0"]}),"\n",(0,t.jsx)(n.h2,{id:"4-constructors-and-destructors-execution-order",children:"4. Constructors and Destructors Execution Order"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Constructors execute from base to derived"}),"\n",(0,t.jsx)(n.li,{children:"Destructors execute from derived to base"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'class B {\r\npublic:\r\n    B() { cout << "constructor B" << endl; }\r\n    ~B() { cout << "Destructor B" << endl; }\r\n};\r\n\r\nclass D1: public B {\r\npublic:\r\n    D1() { cout << "constructor D1" << endl; }\r\n    ~D1() { cout << "Destructor D1" << endl; }\r\n};\r\n\r\nclass D2: public D1 {\r\npublic:\r\n    D2() { cout << "constructor D2" << endl; }\r\n    ~D2() { cout << "Destructor D2" << endl; }\r\n};\r\n\r\nvoid main() {\r\n    D2 obj;\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constructor/Destructor Order Diagram:"})}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\r\n    participant Main\r\n    participant D2\r\n    participant D1\r\n    participant B\r\n    Main->>D2: Create D2 object\r\n    D2->>D1: Call D1 constructor\r\n    D1->>B: Call B constructor\r\n    B--\x3e>D1: B constructor completes\r\n    D1--\x3e>D2: D1 constructor completes\r\n    D2--\x3e>Main: D2 constructor completes\r\n    Main->>D2: Destroy D2 object\r\n    D2->>D2: Call D2 destructor\r\n    D2->>D1: Call D1 destructor\r\n    D1->>B: Call B destructor"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,t.jsx)(n.p,{children:"Constructors are called from base to derived (B \u2192 D1 \u2192 D2)\r\nDestructors are called in reverse order, from derived to base (D2 \u2192 D1 \u2192 B)"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Output:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"constructor B\r\nconstructor D1\r\nconstructor D2\r\nDestructor D2\r\nDestructor D1\r\nDestructor B\n"})}),"\n",(0,t.jsx)(n.h2,{id:"5-granting-access",children:"5. Granting Access"}),"\n",(0,t.jsx)(n.p,{children:"We can change the access level of inherited members."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class B {\r\npublic:\r\n    int i; // public in base\r\n    B() { i = 10; }\r\n};\r\n\r\n// Inherit base as private\r\nclass D: private B {\r\npublic:\r\n    // here is access declaration\r\n    B::i; // make i public again\r\n};\r\n\r\nvoid main() {\r\n    D obj;\r\n    cout << obj.i;\r\n    int z;\r\n    cin >> z;\r\n}\r\n\n"})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Access Declaration Diagram:"})}),"\n",(0,t.jsx)(n.mermaid,{value:'classDiagram\r\n    B <|-- D\r\n    class B {\r\n        +int i\r\n        +B()\r\n    }\r\n    class D {\r\n        +B::i\r\n    }\r\n    note for D "Inherits B privately, but makes i public again through access declaration"'}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"When inheriting privately, all public members of the base class become private in the derived class"}),"\n",(0,t.jsx)(n.li,{children:"The access declaration B::i; in the public section of D makes i public again"}),"\n",(0,t.jsx)(n.li,{children:"This allows direct access to i through D objects"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Output:"}),"\r\n10"]}),"\n",(0,t.jsx)(n.h2,{id:"6-passing-parameters-to-base-class-constructors",children:"6. Passing Parameters to Base-class Constructors"}),"\n",(0,t.jsx)(n.p,{children:"Use initializer lists to pass parameters to base class constructors."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'class B {\r\n    int m;\r\nprotected:\r\n    int i;\r\npublic:\r\n    B(int x) {\r\n        i = x;\r\n        cout << "Constructing base : B\\n";\r\n    }\r\n    ~B() {\r\n        cout << "Destructing base : B\\n";\r\n    }\r\n};\r\n\r\nclass D: public B {\r\n    int j;\r\npublic:\r\n    // derived uses x; y is passed along to base\r\n    D(int x, int y): B(y) {\r\n        j = x;\r\n        cout << "Constructing derived : D\\n";\r\n    }\r\n    ~D() {\r\n        cout << "Destructing derived : D\\n";\r\n    }\r\n    void show() {\r\n        cout << i << " " << j << "\\n";\r\n    }\r\n};\r\n\r\nint main() {\r\n    D obj(1, 2);\r\n    obj.show(); // displays 2 1\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Constructor Parameter Passing Diagram:"})}),"\n",(0,t.jsx)(n.mermaid,{value:"sequenceDiagram\r\n    participant Main\r\n    participant D\r\n    participant B\r\n    Main->>D: Create D(1, 2)\r\n    D->>B: Initialize B with y=2\r\n    B--\x3e>D: B constructor completes\r\n    D--\x3e>Main: D constructor completes\r\n    Main->>D: Call show()\r\n    D--\x3e>Main: Display i=2, j=1"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Explanation:"})}),"\n",(0,t.jsx)(n.p,{children:"The derived class constructor uses an initializer list (D(int x, int y): B(y)) to pass parameters to\r\nthe base class constructor The parameter y is passed to the base class constructor, while x is used\r\nin the derived class In the show() method, i (from base) is 2 and j (from derived) is 1"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Output:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"Constructing base : B\r\nConstructing derived : D\r\n2 1\r\nDestructing derived : D\r\nDestructing base : B\n"})})]})}function u(r={}){let{wrapper:n}={...(0,i.a)(),...r.components};return n?(0,t.jsx)(n,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}},50065:function(r,n,e){e.d(n,{Z:()=>a,a:()=>c});var s=e(67294);let t={},i=s.createContext(t);function c(r){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof r?r(n):{...n,...r}},[n,r])}function a(r){let n;return n=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:c(r.components),s.createElement(i.Provider,{value:n},r.children)}}}]);