"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["58688"],{74819:function(e,n,r){r.r(n),r.d(n,{frontMatter:()=>a,default:()=>h,toc:()=>o,metadata:()=>s,assets:()=>d,contentTitle:()=>l});var s=JSON.parse('{"id":"Languages/Methods","title":"Methods and Overloading","description":"Table of Contents","source":"@site/docs/Languages/Methods.md","sourceDirName":"Languages","slug":"/Languages/Methods","permalink":"/docs/Languages/Methods","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Arrays","permalink":"/docs/Languages/Arrays"},"next":{"title":"Functions","permalink":"/docs/Languages/Functions"}}'),t=r(85893),i=r(50065);let a={sidebar_position:8},l="Methods and Overloading",d={},o=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"<strong>Methods</strong>",id:"methods",level:2},{value:"<strong>Definition (in simple words):</strong>",id:"definition-in-simple-words",level:3},{value:"<strong>C#</strong>",id:"c",level:2},{value:"<strong>Syntax:</strong>",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"<strong>Java</strong>",id:"java",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"<strong>Python</strong>",id:"python",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-2",level:3},{value:"Example",id:"example-2",level:3},{value:"<strong>JavaScript</strong>",id:"javascript",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-3",level:3},{value:"Example",id:"example-3",level:3},{value:"<strong>C++</strong>",id:"c-1",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-4",level:3},{value:"Example",id:"example-4",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Summary Table",id:"summary-table",level:3},{value:"<strong>Definition (in simple words):</strong>",id:"definition-in-simple-words-1",level:3},{value:"<strong>C#</strong>",id:"c-2",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-5",level:3},{value:"Example",id:"example-5",level:3},{value:"<strong>Java</strong>",id:"java-1",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-6",level:3},{value:"Example",id:"example-6",level:3},{value:"<strong>Python</strong>",id:"python-1",level:2},{value:"<strong>Example using default and variable arguments:</strong>",id:"example-using-default-and-variable-arguments",level:3},{value:"<strong>JavaScript</strong>",id:"javascript-1",level:2},{value:"Example",id:"example-7",level:3},{value:"<strong>C++</strong>",id:"c-3",level:2},{value:"<strong>Syntax:</strong>",id:"syntax-7",level:3},{value:"Example",id:"example-8",level:3},{value:"TypeScript",id:"typescript-1",level:2},{value:"Summary Table",id:"summary-table-1",level:3}];function c(e){let n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"methods-and-overloading",children:"Methods and Overloading"})}),"\n",(0,t.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"No."}),(0,t.jsx)(n.th,{children:"Topic"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"12"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#methods",children:"Methods"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"13"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"#method-overloading",children:"Method Overloading"})})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"methods",children:(0,t.jsx)(n.strong,{children:"Methods"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"definition-in-simple-words",children:(0,t.jsx)(n.strong,{children:"Definition (in simple words):"})}),"\n",(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.strong,{children:"method"}),' (or function) is a block of code that performs a specific task. Instead of writing the\r\nsame code again and again, you write it once as a method and "call" it when needed.']}),"\n",(0,t.jsx)(n.p,{children:"Methods can:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Take ",(0,t.jsx)(n.strong,{children:"inputs (parameters)"})]}),"\n",(0,t.jsxs)(n.li,{children:["Return ",(0,t.jsx)(n.strong,{children:"outputs (values)"})]}),"\n",(0,t.jsx)(n.li,{children:"Or simply perform an action"}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c",children:(0,t.jsx)(n.strong,{children:"C#"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"returnType MethodName(parameterType parameterName)\r\n{\r\n    // code\r\n    return value; // if not void\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'using System;\r\n\r\nclass Program\r\n{\r\n    // Method that adds two numbers and returns result\r\n    static int Add(int a, int b)\r\n    {\r\n        return a + b;\r\n    }\r\n\r\n    static void Main()\r\n    {\r\n        int result = Add(5, 3);\r\n        Console.WriteLine("Sum: " + result);  // Output: Sum: 8\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"java",children:(0,t.jsx)(n.strong,{children:"Java"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-1",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"returnType methodName(parameterType parameterName) {\r\n    // code\r\n    return value;\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-1",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Main {\r\n    // Method to multiply two numbers\r\n    static int multiply(int x, int y) {\r\n        return x * y;\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        int result = multiply(4, 5);\r\n        System.out.println("Product: " + result);  // Output: Product: 20\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"python",children:(0,t.jsx)(n.strong,{children:"Python"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-2",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"def function_name(parameter1, parameter2):\r\n    # code\r\n    return value\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-2",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# Function to divide two numbers\r\ndef divide(a, b):\r\n    return a / b\r\n\r\nresult = divide(10, 2)\r\nprint("Result:", result)  # Output: Result: 5.0\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"javascript",children:(0,t.jsx)(n.strong,{children:"JavaScript"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-3",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"function functionName(parameter1, parameter2) {\r\n    // code\r\n    return value;\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-3",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Function to subtract two numbers\r\nfunction subtract(x, y) {\r\n    return x - y;\r\n}\r\n\r\nlet result = subtract(10, 4);\r\nconsole.log("Difference:", result);  // Output: Difference: 6\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c-1",children:(0,t.jsx)(n.strong,{children:"C++"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-4",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"returnType MethodName(parameterType parameterName) {\r\n    // code\r\n    return value; // if not void\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-4",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\r\nusing namespace std;\r\n\r\n// Function that adds two numbers and returns the result\r\nint Add(int a, int b) {\r\n    return a + b;\r\n}\r\n\r\nint main() {\r\n    int result = Add(5, 3);\r\n    cout << "Sum: " << result << endl;  // Output: Sum: 8\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Definition:"})," Functions defined inside a class."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'class Car {\r\n  startEngine(): void {\r\n    console.log("Engine started");\r\n  }\r\n}\r\n\r\nconst myCar = new Car();\r\nmyCar.startEngine();\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"summary-table",children:"Summary Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Language"}),(0,t.jsx)(n.th,{children:"Define Method"}),(0,t.jsx)(n.th,{children:"Call Method"}),(0,t.jsx)(n.th,{children:"Return Value"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"C#"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"int Add(int a, int b)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Add(5, 3)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"return a + b;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Java"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"int multiply(int x, int y)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"multiply(4, 5)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"return x * y;"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Python"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"def divide(a, b)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"divide(10, 2)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"return a / b"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"JavaScript"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"function subtract(x, y)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"subtract(10, 4)"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"return x - y;"})})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"#table-of-contents",children:"Back to Top"})}),"\n",(0,t.jsx)(n.h1,{id:"method-overloading",children:(0,t.jsx)(n.strong,{children:"Method Overloading"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"definition-in-simple-words-1",children:(0,t.jsx)(n.strong,{children:"Definition (in simple words):"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Method Overloading"})," means having ",(0,t.jsx)(n.strong,{children:"multiple methods with the same name"})," but ",(0,t.jsx)(n.strong,{children:"different parameters"}),"\r\n(number or type) in the ",(0,t.jsx)(n.strong,{children:"same class"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"It allows methods to perform similar tasks in different ways depending on the arguments passed."}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:"Note: Not all languages support method overloading natively (e.g., Python and JavaScript simulate\r\nit differently)."}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c-2",children:(0,t.jsx)(n.strong,{children:"C#"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-5",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"class Example {\r\n    void Show() { ... }\r\n    void Show(string name) { ... }\r\n    void Show(int number, string name) { ... }\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-5",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:'class Program {\r\n    static void Show() {\r\n        Console.WriteLine("No parameters");\r\n    }\r\n\r\n    static void Show(string name) {\r\n        Console.WriteLine("Name: " + name);\r\n    }\r\n\r\n    static void Show(int age, string name) {\r\n        Console.WriteLine("Name: " + name + ", Age: " + age);\r\n    }\r\n\r\n    static void Main() {\r\n        Show();                      // Output: No parameters\r\n        Show("Alice");               // Output: Name: Alice\r\n        Show(25, "Bob");             // Output: Name: Bob, Age: 25\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Supported?"})," Yes"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"java-1",children:(0,t.jsx)(n.strong,{children:"Java"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-6",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"class Example {\r\n    void display() { ... }\r\n    void display(String name) { ... }\r\n    void display(int age, String name) { ... }\r\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-6",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public class Main {\r\n    static void display() {\r\n        System.out.println("No parameters");\r\n    }\r\n\r\n    static void display(String name) {\r\n        System.out.println("Name: " + name);\r\n    }\r\n\r\n    static void display(int age, String name) {\r\n        System.out.println("Name: " + name + ", Age: " + age);\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        display();                         // Output: No parameters\r\n        display("Alice");                  // Output: Name: Alice\r\n        display(30, "Bob");                // Output: Name: Bob, Age: 30\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Supported?"})," Yes"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"python-1",children:(0,t.jsx)(n.strong,{children:"Python"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"No native method overloading"}),", but it can be ",(0,t.jsx)(n.strong,{children:"simulated"})," using default arguments or variable\r\narguments (",(0,t.jsx)(n.code,{children:"*args"}),")."]}),"\n",(0,t.jsx)(n.h3,{id:"example-using-default-and-variable-arguments",children:(0,t.jsx)(n.strong,{children:"Example using default and variable arguments:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def greet(name=None, age=None):\r\n    if name and age:\r\n        print(f"Name: {name}, Age: {age}")\r\n    elif name:\r\n        print(f"Name: {name}")\r\n    else:\r\n        print("Hello!")\r\n\r\ngreet()                     # Output: Hello!\r\ngreet("Alice")              # Output: Name: Alice\r\ngreet("Bob", 25)            # Output: Name: Bob, Age: 25\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Supported?"}),"  Not directly,  Yes via ",(0,t.jsx)(n.strong,{children:"workarounds"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"javascript-1",children:(0,t.jsx)(n.strong,{children:"JavaScript"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"No method overloading"})," like in C#/Java. You simulate it using ",(0,t.jsx)(n.strong,{children:"default parameters"})," or\r\n",(0,t.jsxs)(n.strong,{children:[(0,t.jsx)(n.code,{children:"arguments"})," object"]}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"example-7",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'function show(name, age) {\r\n    if (name && age) {\r\n        console.log(`Name: ${name}, Age: ${age}`);\r\n    } else if (name) {\r\n        console.log(`Name: ${name}`);\r\n    } else {\r\n        console.log("No parameters");\r\n    }\r\n}\r\n\r\nshow();                     // Output: No parameters\r\nshow("Alice");              // Output: Name: Alice\r\nshow("Bob", 22);            // Output: Name: Bob, Age: 22\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Supported?"}),"  Not directly,  Yes via ",(0,t.jsx)(n.strong,{children:"flexible parameters"})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"c-3",children:(0,t.jsx)(n.strong,{children:"C++"})}),"\n",(0,t.jsx)(n.h3,{id:"syntax-7",children:(0,t.jsx)(n.strong,{children:"Syntax:"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"class Example {\r\npublic:\r\n    void Show();\r\n    void Show(string name);\r\n    void Show(int number, string name);\r\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"example-8",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:'#include <iostream>\r\n#include <string>\r\nusing namespace std;\r\n\r\nclass Program {\r\npublic:\r\n    static void Show() {\r\n        cout << "No parameters" << endl;\r\n    }\r\n\r\n    static void Show(string name) {\r\n        cout << "Name: " << name << endl;\r\n    }\r\n\r\n    static void Show(int age, string name) {\r\n        cout << "Name: " << name << ", Age: " << age << endl;\r\n    }\r\n};\r\n\r\nint main() {\r\n    Program::Show();                  // Output: No parameters\r\n    Program::Show("Alice");           // Output: Name: Alice\r\n    Program::Show(25, "Bob");         // Output: Name: Bob, Age: 25\r\n    return 0;\r\n}\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"typescript-1",children:"TypeScript"}),"\n",(0,t.jsxs)(n.p,{children:["TypeScript ",(0,t.jsx)(n.strong,{children:"does not support true method overloading"})," like Java or C++."]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Alternative (Function Overloads using signatures):"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'function greet(person: string): string;\r\nfunction greet(persons: string[]): string;\r\n\r\nfunction greet(person: any): string {\r\n  if (typeof person === "string") {\r\n    return `Hello, ${person}`;\r\n  } else {\r\n    return `Hello, ${person.join(" and ")}`;\r\n  }\r\n}\r\n\r\nconsole.log(greet("Alice"));\r\nconsole.log(greet(["Alice", "Bob"]));\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"summary-table-1",children:"Summary Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"C#"}),(0,t.jsx)(n.th,{children:"Java"}),(0,t.jsx)(n.th,{children:"Python"}),(0,t.jsx)(n.th,{children:"JavaScript"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Native Overloading"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"No (simulate)"}),(0,t.jsx)(n.td,{children:"No (simulate)"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Method Name Reuse"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"Workarounds"}),(0,t.jsx)(n.td,{children:"Workarounds"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Technique (if no native)"}),(0,t.jsx)(n.td,{children:"\u2014"}),(0,t.jsx)(n.td,{children:"\u2014"}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"*args"}),", ",(0,t.jsx)(n.code,{children:"if"})]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"arguments"}),", ",(0,t.jsx)(n.code,{children:"if"})]})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"#table-of-contents",children:"Back to Top"})})]})}function h(e={}){let{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},50065:function(e,n,r){r.d(n,{Z:()=>l,a:()=>a});var s=r(67294);let t={},i=s.createContext(t);function a(e){let n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);