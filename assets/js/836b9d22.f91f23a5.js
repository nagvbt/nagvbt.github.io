"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["66212"],{70471:function(n,e,t){t.r(e),t.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var r=t(21963),a=t(85893),s=t(50065);let i={tags:["C++"]},l="Size Matters (C++)",o={authorsImageUrls:[]},c=[{value:"Data Members",id:"data-members",level:2},{value:"Members Functions",id:"members-functions",level:2}];function u(n){let e={a:"a",code:"code",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"C++ class have"}),"\n",(0,a.jsx)(e.p,{children:"A. Data Members\r\nB. Members Functions"}),"\n",(0,a.jsx)(e.h2,{id:"data-members",children:"Data Members"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["Static Data Member The size of a class object with only Static data members irrespective of Data Type (say float, long e.tc.) is\xa0equal to ",(0,a.jsx)(e.a,{href:"/blog/2011/09/18/why-size-of-an-empty-c-class-not-zero",children:"one Byte (~ size of Empty class)"})]}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"    class CStaticDataMemberCls\r\n    {\r\n    public:\r\n    static int i;\r\n    static float f;\r\n    };\r\n\r\n\r\nvoid main() {\r\n    CStaticDataMemberCls objSDMC;\r\n    cout<<objSDMC;\r\n    }\n"})}),"\n",(0,a.jsxs)(e.ol,{start:"2",children:["\n",(0,a.jsx)(e.li,{children:"Non Static Data Member The size of a class with non static data members is equal to sum of the data type size i.e. size of int = 4 size of float = 4 so total = 8"}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"    class CNonStaticDataMemberCls\r\n    {\r\n    public:\r\n    int i;\r\n    float f;\r\n    };\r\n\r\n\r\nvoid main() {\r\n    CNonStaticDataMemberCls objNSDMC;\r\n    cout<<objNSDMC;\r\n    }\n"})}),"\n",(0,a.jsx)(e.h2,{id:"members-functions",children:"Members Functions"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Static Members Functions"}),"\n",(0,a.jsx)(e.li,{children:"Non Static Members Functions"}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["As Static Members Functions and Non static Members Functions are hoisted outside the class object. The size of the class will also be equal to ",(0,a.jsx)(e.a,{href:"/blog/2011/09/18/why-size-of-an-empty-c-class-not-zero",children:"one Byte (~ size of Empty class)"})]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"class CMemberFunctionsCls\r\n{\r\npublic:\r\n    int fun1() { return 1; }\r\n    static int staticFun() { return 1; }\r\n\r\n};\r\n\r\nvoid main()\r\n{\r\n    CMemberFunctionsCls objMFC;\r\n    cout<<objMFC;\r\n}\n"})}),"\n",(0,a.jsxs)(e.ol,{start:"3",children:["\n",(0,a.jsx)(e.li,{children:"Virtual Members Functions If a class consists of virtual functions a table of pointers(i.e. Virtual Table) to virtual functions is generated for each class. And a pointer (vptr) to the created Virtual Table is inserted with in each class object. So the size of CVirtualFunctionCls object will be 4 Bytes which is nothing but a size of vptr."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"    class CVirtualFunctionCls\r\n    {\r\n    public:\r\n    virtual ~CVirtualFunctionCls() {}\r\n        virtual void virtualFun1() {}\r\n    virtual void virtualFun2() {}\r\n    };\r\n\r\n\r\nvoid main() {\r\n    CVirtualFunctionCls objVFC;\r\n    cout<<objVFC;\r\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"Let us see the class with all the above members"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"class Sample\r\n{\r\npublic:\r\n     Sample() {};\r\n\r\n     virtual ~Sample() {}\r\n     virtual void virtualFun1() {}\r\n     virtual void virtualFun2() {}\r\n\r\n     void normalFun() {}\r\n\r\n     static int getCount() //static function\r\n     {\r\n       return nCount;\r\n     }\r\n\r\nprivate:\r\n     int i;\r\n     static int nCount;\r\n};\r\n\r\nvoid main()\r\n{\r\n    Sample obj;\r\n    cout<<obj;\r\n}\r\n\n"})})]})}function m(n={}){let{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},50065:function(n,e,t){t.d(e,{Z:()=>l,a:()=>i});var r=t(67294);let a={},s=r.createContext(a);function i(n){let e=r.useContext(s);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:i(n.components),r.createElement(s.Provider,{value:e},n.children)}},21963:function(n){n.exports=JSON.parse('{"permalink":"/blog/2011/09/18/size-matters-c","source":"@site/blog/2011-09-18-size-matters-c.md","title":"Size Matters (C++)","description":"C++ class have","date":"2011-09-18T00:00:00.000Z","tags":[{"inline":true,"label":"C++","permalink":"/blog/tags/c"}],"readingTime":1.66,"hasTruncateMarker":false,"authors":[],"frontMatter":{"tags":["C++"]},"unlisted":false,"prevItem":{"title":"Memory Layout of a class (C++) Object","permalink":"/blog/2011/09/18/memory-layout-of-a-class-c-object"},"nextItem":{"title":"Variable arguments handling in C/C++","permalink":"/blog/2011/09/18/variable-arguments-handling"}}')}}]);