"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[2610],{3905:(n,e,t)=>{t.d(e,{Zo:()=>l,kt:()=>m});var a=t(7294);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function s(n,e){if(null==n)return{};var t,a,i=function(n,e){if(null==n)return{};var t,a,i={},r=Object.keys(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||(i[t]=n[t]);return i}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(a=0;a<r.length;a++)t=r[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(i[t]=n[t])}return i}var u=a.createContext({}),c=function(n){var e=a.useContext(u),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},l=function(n){var e=c(n.components);return a.createElement(u.Provider,{value:e},n.children)},p="mdxType",f={inlineCode:"code",wrapper:function(n){var e=n.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(n,e){var t=n.components,i=n.mdxType,r=n.originalType,u=n.parentName,l=s(n,["components","mdxType","originalType","parentName"]),p=c(t),d=i,m=p["".concat(u,".").concat(d)]||p[d]||f[d]||r;return t?a.createElement(m,o(o({ref:e},l),{},{components:t})):a.createElement(m,o({ref:e},l))}));function m(n,e){var t=arguments,i=e&&e.mdxType;if("string"==typeof n||i){var r=t.length,o=new Array(r);o[0]=d;var s={};for(var u in e)hasOwnProperty.call(e,u)&&(s[u]=e[u]);s.originalType=n,s[p]="string"==typeof n?n:i,o[1]=s;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9480:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>u,contentTitle:()=>o,default:()=>f,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=t(7462),i=(t(7294),t(3905));const r={sidebar_position:7},o="Functions",s={unversionedId:"articles/C/Functions",id:"articles/C/Functions",title:"Functions",description:"1.\tDefine a C function ?",source:"@site/docs/articles/C/Functions.md",sourceDirName:"articles/C",slug:"/articles/C/Functions",permalink:"/docs/articles/C/Functions",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Iterative Statements",permalink:"/docs/articles/C/Iterative"},next:{title:"Arrays",permalink:"/docs/articles/C/Arrays"}},u={},c=[{value:"1.\tDefine a C function ?",id:"1define-a-c-function-",level:3},{value:"2.\tExplain about parts of a function ?",id:"2explain-about-parts-of-a-function-",level:3},{value:"3.\tExplain about function Declaration and Definition?",id:"3explain-about-function-declaration-and-definition",level:3},{value:"4.\tWhat are the Advantages of using functions ?",id:"4what-are-the-advantages-of-using-functions-",level:3},{value:"5.\tWrite a program to perform addition of two numbers using function?",id:"5write-a-program-to-perform-addition-of-two-numbers-using-function",level:3},{value:"6.\tExplain about Passing Parameters to a Function ?",id:"6explain-about-passing-parameters-to-a-function-",level:3},{value:"7.\tWrite a program to swap two numbers using pass by reference?",id:"7write-a-program-to-swap-two-numbers-using-pass-by-reference",level:3}],l={toc:c},p="wrapper";function f(n){let{components:e,...t}=n;return(0,i.kt)(p,(0,a.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"functions"},"Functions"),(0,i.kt)("h3",{id:"1define-a-c-function-"},"1.\tDefine a C function ?"),(0,i.kt)("p",null,"Definition: A \u2018Function\u2019 can be defined as a group of statements which performs a certain task."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Syntax:")),"\nreturnType functionName ( parameter1, parameter2, ...)\n{\n//Statement(s)\n//body of the function\n}"),(0,i.kt)("h3",{id:"2explain-about-parts-of-a-function-"},"2.\tExplain about parts of a function ?"),(0,i.kt)("p",null,"A function definition in C programming language consists of a function header and a function body. Here are all the parts of a function:"),(0,i.kt)("p",null,"return_type function_name( parameter list )\n{\n//body of the function\n}"),(0,i.kt)("p",null,"a.\tReturn Type: A function may return a value. The return_type is the data type of the value the function returns. Some functions perform the desired operations without returning a value. In this case, the return_type is the keyword void."),(0,i.kt)("p",null,"b.\tFunction Name: This is the actual name of the function. The function name and the parameter list together constitute the function signature."),(0,i.kt)("p",null,"c.\tParameters: A parameter is like a placeholder. When a function is invoked, you pass a value to the parameter. This value is referred to as actual parameter or argument. The parameter list refers to the type, order, and number of the parameters of a function. Parameters are optional; that is, a function may contain no parameters."),(0,i.kt)("p",null,"d.\tFunction Body: The function body contains a collection of statements that define what the function does."),(0,i.kt)("p",null,"Note: returnType specifies the type of data that the function returns. A function may return any type of data except an Array."),(0,i.kt)("h3",{id:"3explain-about-function-declaration-and-definition"},"3.\tExplain about function Declaration and Definition?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Declaration: *\nA function declaration tells the compiler about a function name and how to call the function. The actual body of the function can be defined separately.\nA function declaration has the following parts:\nreturn_type function_name( parameter list );\nFor the above defined function max(), following is the function declaration:\nint max(int num1, int num2);\nParameter names are not important in function declaration only their type is required, so following is also valid declaration:\nint max(int, int);\nFunction declaration is required when we define a function in one source file and you call that function in another file. In such case we should declare the function at the top of the file calling the function.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Definition: *\nWhen a function is defined at any place in the program then it is called function definition. At the time of definition of a function actual logic is implemented with-in the function."))),(0,i.kt)("h3",{id:"4what-are-the-advantages-of-using-functions-"},"4.\tWhat are the Advantages of using functions ?"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Writing functions avoids rewriting the same code "),(0,i.kt)("li",{parentName:"ol"},"Using functions it becomes easier to write programs and keep track of what they are doing.")),(0,i.kt)("h3",{id:"5write-a-program-to-perform-addition-of-two-numbers-using-function"},"5.\tWrite a program to perform addition of two numbers using function?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n//Function Declaration\nint addition (int a, int b);\n\nint main ()\n{\n  int z;\n  z = addition (5,3);\n  printf("The result is = %d \\n",z);\n  return 0;\n}\n\n//Function definition\nint addition (int a, int b)\n{\n  int Result;\n  Result = a + b;\n  return Result;\n}\n\nOUTPUT:\nThe result is =  8\n')),(0,i.kt)("p",null,"Program flow:\nIn the above example the function addition  performs a certain task Adding of two numbers.\nThe value of both arguments passed in the call (5 and 3) are copied to the local variables int a and int b within the function."),(0,i.kt)("p",null,"The call to a function (addition (5,3)) is literally replaced by the value it returns (8)."),(0,i.kt)("h3",{id:"6explain-about-passing-parameters-to-a-function-"},"6.\tExplain about Passing Parameters to a Function ?"),(0,i.kt)("p",null,"There are two ways to pass parameters to a function:"),(0,i.kt)("p",null,"\u2022\tPass by Value: mechanism is used when you don't want to change the value of passed paramters. When parameters are passed by value then functions in C create copies of the passed in variables and do required processing on these copied variables."),(0,i.kt)("p",null,"\u2022\tPass by Reference mechanism is used when you want a function to do the changes in passed parameters and reflect those changes back to the calling function. In this case only addresses of the variables are passed to a function so that function can work directly over the addresses."),(0,i.kt)("h3",{id:"7write-a-program-to-swap-two-numbers-using-pass-by-reference"},"7.\tWrite a program to swap two numbers using pass by reference?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n \nvoid swap(int*, int*);\n \nint main()\n{\n   int x, y;\n \n   printf("Enter the value of x and y\\n");\n   scanf("%d%d",&x,&y);\n \n   printf("Before Swapping\\nx = %d\\ny = %d\\n", x, y);\n \n   swap(&x, &y); \n \n   printf("After Swapping\\nx = %d\\ny = %d\\n", x, y);\n \n   return 0;\n}\n \nvoid swap(int *a, int *b)\n{\n   int temp;\n \n   temp = *b;\n   *b   = *a;\n   *a   = temp;   \n}\n')))}f.isMDXComponent=!0}}]);