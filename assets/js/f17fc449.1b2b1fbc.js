"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[35652],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>h});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),f=r,h=m["".concat(l,".").concat(f)]||m[f]||u[f]||o;return a?n.createElement(h,i(i({ref:t},p),{},{components:a})):n.createElement(h,i({ref:t},p))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=a[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}f.displayName="MDXCreateElement"},98940:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={title:"Basics of ATL",date:"2012-07-08",categories:["com-dcom-atl"],tags:["atl"]},i=void 0,s={permalink:"/blog/2012/07/08/basics-of-atl",source:"@site/blog/2012-07-08-basics-of-atl.md",title:"Basics of ATL",description:"What you will Learn Here\u2026",date:"2012-07-08T00:00:00.000Z",formattedDate:"July 8, 2012",tags:[{label:"atl",permalink:"/blog/tags/atl"}],readingTime:1.735,hasTruncateMarker:!1,authors:[],frontMatter:{title:"Basics of ATL",date:"2012-07-08",categories:["com-dcom-atl"],tags:["atl"]},prevItem:{title:"Basics of ActiveX Controls",permalink:"/blog/2012/07/08/basics-of-activex-controls"},nextItem:{title:"C-Pointers What is the output",permalink:"/blog/2012/07/08/c-pointers-what-is-the-output"}},l={authorsImageUrls:[]},c=[],p={toc:c},m="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"What you will Learn Here\u2026")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Definition of ATL"),(0,r.kt)("li",{parentName:"ol"},"ATL Features"),(0,r.kt)("li",{parentName:"ol"},"Basic Definitions of ATL"),(0,r.kt)("li",{parentName:"ol"},"ATL's Component Class Hierarchy"),(0,r.kt)("li",{parentName:"ol"},"FAQ")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1","."," Definition of ATL")," The Active Template Library (ATL) is a set of template-based C++ classes that allows to create small, fast Component Object Model (COM) objects."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2","."," ATL Features")," 1.ATL provides two types of wizards a. AppWizard: AppWizard creates the initial ATL project. b. Object Wizard: Object Wizard produces code for basic COM components."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Built-in support for basic COM functionality such as IUnknown, class factories, IDispatch (automation), dual interfaces and self-registration."),(0,r.kt)("li",{parentName:"ol"},"Inbuilt Support for Microsoft\u2019s Interface Definition Language (IDL) which provides marshaling support for custom Vtable interfaces as well as component self-description through a type library."),(0,r.kt)("li",{parentName:"ol"},"Aggregation of objects and Automation support"),(0,r.kt)("li",{parentName:"ol"},"Support for developing ActiveX controls.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"3","."," Basic Definitions of ATL")," 1. ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"Marshaling:"))," Marshaling is the process of transferring function arguments and return values across process and machine boundaries."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"proxy/stub"))," DLL implements standard marshaling for each of the component interfaces.")),(0,r.kt)("p",null,"COM will use the IPC to communicate between client and server."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"LPC is used when both reside on the same machine.\n"),(0,r.kt)("li",{parentName:"ul"},"RPC is used in a distributed networked\xa0environment\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"4","."," ATL's Component Class Hierarchy")),(0,r.kt)("p",null,"ATL never Creates the instance of the CoClass Directly. Instead ATL uses CComObject template class with 'CMathComp' object type as a parameter to create our Object."),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"CComObject ","*"," pMath = new ComObject")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"CComObjectRootEx"))," - Handles object reference count management. ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"CComCoClass"))," - Provides methods for creating instances of a class and obtaining its properties it has createInstance() method which creates the instance of a COM Object through ClassFactory ",(0,r.kt)("em",{parentName:"p"},(0,r.kt)("strong",{parentName:"em"},"CComObject"))," - Implements IUnknown for an COM object."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"5","."," FAQ")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"What is ATL ? check - 1. Definition of ATL"),(0,r.kt)("li",{parentName:"ol"},"What is MIDL ? check - 2. ATL Features - 3 point"),(0,r.kt)("li",{parentName:"ol"},"What are the featurs of ATL ? check - 2. ATL Feature"),(0,r.kt)("li",{parentName:"ol"},"What is Marshiling ? check - 3. Basic Definitions of ATL - 1 point"),(0,r.kt)("li",{parentName:"ol"},"Explain about\xa0ATL's Class Hierarchy? check - 4.ATL's Component Class Hierarchy")))}u.isMDXComponent=!0}}]);