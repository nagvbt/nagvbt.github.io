"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[94692],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>g});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function c(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),l=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=l(t.components);return r.createElement(p.Provider,{value:e},t.children)},s="mdxType",d={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,o=t.originalType,p=t.parentName,u=c(t,["components","mdxType","originalType","parentName"]),s=l(n),m=a,g=s["".concat(p,".").concat(m)]||s[m]||d[m]||o;return n?r.createElement(g,i(i({ref:e},u),{},{components:n})):r.createElement(g,i({ref:e},u))}));function g(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var p in e)hasOwnProperty.call(e,p)&&(c[p]=e[p]);c.originalType=t,c[s]="string"==typeof t?t:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7262:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={title:"'Builder' Design Pattern using simple program",date:"2012-04-03",categories:["c-cpp-mfc-vcpp"],tags:["cpp","Design Patterns"]},i=void 0,c={permalink:"/blog/2012/04/03/builderdesignpatter",source:"@site/blog/2012-04-03-builderdesignpatter.md",title:"'Builder' Design Pattern using simple program",description:"Definition:",date:"2012-04-03T00:00:00.000Z",formattedDate:"April 3, 2012",tags:[{label:"cpp",permalink:"/blog/tags/cpp"},{label:"Design Patterns",permalink:"/blog/tags/design-patterns"}],readingTime:.915,hasTruncateMarker:!1,authors:[],frontMatter:{title:"'Builder' Design Pattern using simple program",date:"2012-04-03",categories:["c-cpp-mfc-vcpp"],tags:["cpp","Design Patterns"]},prevItem:{title:"Simple LinkedList program in C++",permalink:"/blog/2012/04/04/linkedlist"},nextItem:{title:"Simple Queue program in C++",permalink:"/blog/2012/04/02/queue"}},p={authorsImageUrls:[]},l=[],u={toc:l},s="wrapper";function d(t){let{components:e,...n}=t;return(0,a.kt)(s,(0,r.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Definition:")),(0,a.kt)("p",null,"Separate the construction of a complex object from its representation so that the same construction process can create different representations."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Program:")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#include "iostream"\nusing namespace std;\n\n// Builder pattern -- Creational example\nclass Product\n{\nprivate:\n    char\\* \\_parts\\[10\\];\n    int i;\n\npublic:\n    Product()\n    {\n      i = 0;\n    }\n\n    void Add(char\\* part)\n    {\n      \\_parts\\[i\\] = part;\n      i++;\n    }\n\n    void Show()\n    {\n        cout&lt;\n      for(int j = 0; j    {\n         cout&lt;&lt;\\_parts\\[j\\]&lt;BuildPartA();\n      builder-&gt;BuildPartB();\n    }\n};\n\nclass ConcreteBuilder1 : public Builder\n{\n    private:\n      Product \\_product;\n\n    public:\n    virtual void BuildPartA()\n    {\n      \\_product.Add("PartA");\n    }\n\n    virtual void BuildPartB()\n    {\n      \\_product.Add("PartB");\n    }\n\n    virtual Product GetResult()\n    {\n      return \\_product;\n    }\n};\n\nclass ConcreteBuilder2 : public Builder\n{\n    private:\n      Product \\_product;\n\n    public:\n    virtual void BuildPartA()\n    {\n      \\_product.Add("PartX");\n    }\n\n    virtual void BuildPartB()\n    {\n      \\_product.Add("PartY");\n    }\n\n    virtual Product GetResult()\n    {\n      return \\_product;\n    }\n};\n\nvoid main()\n{\n  // Create director and builders\n  Director director;\n\n  ConcreteBuilder1 b1;\n  ConcreteBuilder2 b2;\n\n  Product p1;\n  Product p2;\n\n  // Construct product p1\n  director.Construct(&amp;b1);\n  p1 = b1.GetResult();\n  p1.Show();\n\n  // Construct product p2\n  director.Construct(&amp;b2);\n  p2 = b2.GetResult();\n  p2.Show();\n\n  getchar();\n}\n\n/\\*\nOUT PUT\n\nProduct Parts:\nPartA\nPartB\n\nProduct Parts:\nPartX\nPartY\n\\*/\n')))}d.isMDXComponent=!0}}]);