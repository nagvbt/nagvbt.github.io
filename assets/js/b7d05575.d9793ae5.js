"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[11222],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>g});var n=a(67294);function p(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){p(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,p=function(e,t){if(null==e)return{};var a,n,p={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(p[a]=e[a]);return p}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(p[a]=e[a])}return p}var m=n.createContext({}),i=function(e){var t=n.useContext(m),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},s=function(e){var t=i(e.components);return n.createElement(m.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,p=e.mdxType,r=e.originalType,m=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=i(a),d=p,g=c["".concat(m,".").concat(d)]||c[d]||u[d]||r;return a?n.createElement(g,o(o({ref:t},s),{},{components:a})):n.createElement(g,o({ref:t},s))}));function g(e,t){var a=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var r=a.length,o=new Array(r);o[0]=d;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l[c]="string"==typeof e?e:p,o[1]=l;for(var i=2;i<r;i++)o[i]=a[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},57009:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var n=a(87462),p=(a(67294),a(3905));const r={title:"WCF Step by Step Tutorial",date:"2011-04-28",categories:["wcf"],tags:["wcf"]},o=void 0,l={permalink:"/blog/2011/04/28/wcf-step-by-step-tutorial",source:"@site/blog/2011-04-28-wcf-step-by-step-tutorial.md",title:"WCF Step by Step Tutorial",description:"Basics of WCF",date:"2011-04-28T00:00:00.000Z",formattedDate:"April 28, 2011",tags:[{label:"wcf",permalink:"/blog/tags/wcf"}],readingTime:4.73,hasTruncateMarker:!1,authors:[],frontMatter:{title:"WCF Step by Step Tutorial",date:"2011-04-28",categories:["wcf"],tags:["wcf"]},prevItem:{title:"List of Code Snippets in VS2008 for C#",permalink:"/blog/2011/04/29/list-of-code-snippets-in-vs2008-for-c"},nextItem:{title:"WPF SnippetManager",permalink:"/blog/2010/10/21/wpf-snippetmanager"}},m={authorsImageUrls:[]},i=[],s={toc:i},c="wrapper";function u(e){let{components:t,...a}=e;return(0,p.kt)(c,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Basics of WCF")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Definition of WCF")," "),(0,p.kt)("p",null,"Windows Communication Foundation (WCF) is a framework for building service-oriented applications. Using WCF we can build secure, reliable, transacted solutions that integrate across platforms."),(0,p.kt)("p",null,"WCF is a unified framework which provides :"),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"NET Remoting 2.Distributed Transactions 3.Message Queues and 4.Web Services\xa0into a single service-oriented programming model for distributed computing.")),(0,p.kt)("p",null,"WCF\xa0interoperate\xa0between WCF-based applications and any other processes that communicate via SOAP (Simple Object Access Protocol) messages."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Features of WCF")),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"Service Orientation"),(0,p.kt)("li",{parentName:"ol"},"Interoperability"),(0,p.kt)("li",{parentName:"ol"},"Multiple Message Patterns"),(0,p.kt)("li",{parentName:"ol"},"Service Metadata"),(0,p.kt)("li",{parentName:"ol"},"Data Contracts"),(0,p.kt)("li",{parentName:"ol"},"Security"),(0,p.kt)("li",{parentName:"ol"},"Multiple Transports and Encodings"),(0,p.kt)("li",{parentName:"ol"},"Reliable and Queued Messages"),(0,p.kt)("li",{parentName:"ol"},"Durable Messages"),(0,p.kt)("li",{parentName:"ol"},"Transactions"),(0,p.kt)("li",{parentName:"ol"},"AJAX and REST Support"),(0,p.kt)("li",{parentName:"ol"},"Extensibility")),(0,p.kt)("p",null,"To know more about features of WCF see:\xa0",(0,p.kt)("a",{parentName:"p",href:"http://msdn.microsoft.com/en-us/library/ms733103.aspx"},"http://msdn.microsoft.com/en-us/library/ms733103.aspx")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Terms of WCF")),(0,p.kt)("p",null,"A\xa0WCF service is exposed to the outside world as a collection of endpoints."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"1","."," Endpoint:")," Endpoint is a construct at which messages are sent or received (or both). Endpoint\xa0comprises of\xa0",(0,p.kt)("strong",{parentName:"p"},"ABC's")," "),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},(0,p.kt)("em",{parentName:"strong"},"What are ABC's of WCF ?"))," "),(0,p.kt)("p",null,(0,p.kt)("em",{parentName:"p"},(0,p.kt)("strong",{parentName:"em"},"A. Address")),"\xa0- Address is a location that defines where messages can be sent"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},(0,p.kt)("em",{parentName:"strong"},"B. Binding")),"\xa0- Binding is a specification of the communication mechanism (a binding) that described how messages should be sent"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},(0,p.kt)("em",{parentName:"strong"},"C. Contract")),"\xa0- Contract is a definition for a set of messages that can be sent or received (or both) at that location (a service contract) that describes what message can be sent."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"2","."," Service:")," A construct that exposes one or more endpoints, with each endpoint exposing one or more service operations."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"3","."," Contracts:")," A contract is a agreement between two or more parties for common understanding and it is a\xa0is a platform-neutral and standard\xa0way of describing what the service does.\xa0In WCF, all services expose contracts."),(0,p.kt)("p",null,"Types of Contracts: 1) Operation Contract: An operation contract defines the parameters and return type of an operation."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cs"},"\\[OperationContract\\]\ndouble Add(double i, double j);\n")),(0,p.kt)("p",null,"2) Service Contract: Ties together multiple related operations contracts into a single functional unit."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cs"},"\\[ServiceContract\\] //System.ServiceModel\npublic interface IMath\n{\n\\[OperationContract\\]\ndouble Add(double i, double j);\n\\[OperationContract\\]\ndouble Sub(double i, double j);\n\\[OperationContract\\]\nComplex AddComplexNo(Complex i, Complex j);\n\\[OperationContract\\]\nComplex SubComplexNo(Complex i, Complex j);\n}\n")),(0,p.kt)("p",null,"3) Data Contract: The descriptions in metadata of the data types that a service uses."),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cs"},"// Use a data contract\n\\[DataContract\\] //using System.Runtime.Serialization\npublic class Complex\n{\nprivate int real;\nprivate int imaginary;\n&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;\\[DataMember\\]\npublic int Real { get; set; }\n\n\\[DataMember\\]\npublic int Imaginary { get; set; }&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;\n\n}\n")),(0,p.kt)("h1",{id:"wcf-step-by-step-tutorial"},(0,p.kt)("strong",{parentName:"h1"},"WCF Step by Step Tutorial")),(0,p.kt)("p",null,"This is the Basic WCF Tutorial 'wcfMathSerLib' will be created in a step by step approach. This 'wcfMathSerLib' will be tested by 'ConsoleMathClient' and with 'WCF Test Client'"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Steps for creating wcfMathSerLib")),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Open Visual Studio 2010 and File->NewProject 2.select WCF in 'Recent Templates' 3.select 'WCF Service Library' 4.Give Name as wcfMathServiceLibrary 5.Click OK")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Delete IService1.cs and Service1.cs")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Add IMath.cs and MathService.cs and add the code listed below"))),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"IMath.cs")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cs"},"\nusing System.Runtime.Serialization;\nusing System.ServiceModel;\n\nnamespace WcfMathServLib\n{\n\\[ServiceContract\\] //System.ServiceModel\npublic interface IMath\n{\n\\[OperationContract\\]\ndouble Add(double i, double j);\n\\[OperationContract\\]\ndouble Sub(double i, double j);\n\\[OperationContract\\]\nComplex AddComplexNo(Complex i, Complex j);\n\\[OperationContract\\]\nComplex SubComplexNo(Complex i, Complex j);\n}\n&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;// Use a data contract\n\\[DataContract\\] //using System.Runtime.Serialization\npublic class Complex\n{\n    private int real;\n    private int imaginary;\n\n    \\[DataMember\\]\n    public int Real { get; set; }\n\n    \\[DataMember\\]\n    public int Imaginary { get; set; }\n}&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;\n\n}\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"MathService.cs")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cs"},"namespace WcfMathServLib\n{\npublic class MathService : IMath\n{\n&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;        public double Add(double i, double j)\n        {\n            return (i + j);\n        }\n\n        public double Sub(double i, double j)\n        {\n            return (i - j);\n        }\n\n        public Complex AddComplexNo(Complex i, Complex j)\n        {\n            Complex result = new Complex();\n            result.Real = i.Real + j.Real;\n            result.Imaginary = i.Imaginary + j.Imaginary;\n            return result;\n        }\n\n        public Complex SubComplexNo(Complex i, Complex j)\n        {\n            Complex result = new Complex();\n            result.Real = i.Real - j.Real;\n            result.Imaginary = i.Imaginary - j.Imaginary;\n            return result;\n        }\n    }\n}\n")),(0,p.kt)("p",null,"4.Modify the App.config file as shown"),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"App.config")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-xml"},'&amp;amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;amp;gt;\n&amp;amp;lt;configuration&amp;amp;gt;\n\n&amp;amp;lt;system.web&amp;amp;gt;\n&amp;amp;lt;compilation debug="true" /&amp;amp;gt;\n&amp;amp;lt;/system.web&amp;amp;gt;\n\n&amp;amp;lt;system.serviceModel&amp;amp;gt;\n&amp;amp;lt;services&amp;amp;gt;\n&amp;amp;lt;service name="WcfMathServLib.MathService"&amp;amp;gt;\n&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;    &amp;amp;lt;host&amp;amp;gt;\n      &amp;amp;lt;baseAddresses&amp;amp;gt;\n        &amp;amp;lt;add baseAddress = "http://localhost:8732/Design\\_Time\\_Addresses/WcfMathServLib/MathService/" /&amp;amp;gt;\n      &amp;amp;lt;/baseAddresses&amp;amp;gt;\n    &amp;amp;lt;/host&amp;amp;gt;\n\n    &amp;amp;lt;!-- Service Endpoints --&amp;amp;gt;\n    &amp;amp;lt;endpoint address ="" binding="wsHttpBinding" contract="WcfMathServLib.IMath"&amp;amp;gt;\n      &amp;amp;lt;identity&amp;amp;gt;\n        &amp;amp;lt;dns value="localhost"/&amp;amp;gt;\n      &amp;amp;lt;/identity&amp;amp;gt;\n    &amp;amp;lt;/endpoint&amp;amp;gt;\n\n    &amp;amp;lt;!-- Metadata Endpoints --&amp;amp;gt;\n    &amp;amp;lt;endpoint address="mex" binding="mexHttpBinding" contract="IMetadataExchange"/&amp;amp;gt;\n  &amp;amp;lt;/service&amp;amp;gt;\n&amp;amp;lt;/services&amp;amp;gt;\n&amp;amp;lt;behaviors&amp;amp;gt;\n\n  &amp;amp;lt;serviceBehaviors&amp;amp;gt;\n    &amp;amp;lt;behavior&amp;amp;gt;\n       &amp;amp;lt;serviceMetadata httpGetEnabled="True"/&amp;amp;gt;\n      &amp;amp;lt;serviceDebug includeExceptionDetailInFaults="False" /&amp;amp;gt;\n    &amp;amp;lt;/behavior&amp;amp;gt;\n  &amp;amp;lt;/serviceBehaviors&amp;amp;gt;\n&amp;amp;lt;/behaviors&amp;amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;\n\n&amp;amp;lt;/system.serviceModel&amp;amp;gt;\n\n&amp;amp;lt;/configuration&amp;amp;gt;\n')),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Result Using WCF Test Client")),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},"Run the WcfMathServLib project you will get the \u2018WCF Test Client\u2019"),(0,p.kt)("li",{parentName:"ol"},"Select each method say \u2018AddComplexNo\u2019 Give the values in \u2018Request\u2019"),(0,p.kt)("li",{parentName:"ol"},"Click on Invoke button"),(0,p.kt)("li",{parentName:"ol"},"See the results in \u201cResponse\u201d")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Steps for creating ConsoleMathClient")),(0,p.kt)("ol",null,(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Open Visual Studio 2010 and File->NewProject")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"select Visual C#->Windows in \u2018Installed Templates\u2019")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"select \u2018Console Application\u2019")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Give Name as ConsoleMathClient")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Click OK")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Go to \u2018Solution Explorer\u2019 Right click on ConsoleMathClient -> Select \u2018Add Service Reference\u2019 the below dialog will be displayed")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Click on Discover button")),(0,p.kt)("li",{parentName:"ol"},(0,p.kt)("p",{parentName:"li"},"Give namespace as \u2018MathServiceReference\u2019 and click OK"))),(0,p.kt)("p",null,"The service reference will be added now modify the program.cs as shown below."),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Program.cs")),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-cs"},"using System;\nusing ConsoleMathClient.MathServiceReference;\n\nnamespace ConsoleMathClient\n{\nclass Program\n{\nstatic void Main(string\\[\\] args)\n{\nConsole.WriteLine(&amp;amp;amp;amp;amp;amp;amp;amp;quot;Press &amp;amp;amp;amp;amp;amp;amp;amp;lt;Enter&amp;amp;amp;amp;amp;amp;amp;amp;gt; to run the client....&amp;amp;amp;amp;amp;amp;amp;amp;quot;);\nConsole.ReadLine();\n&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;        MathClient math = new MathClient();\n        Console.WriteLine(&amp;amp;amp;amp;amp;amp;amp;amp;quot;Add of 3 and 2 = {0}&amp;amp;amp;amp;amp;amp;amp;amp;quot;, math.Add(3, 2));\n        Console.WriteLine(&amp;amp;amp;amp;amp;amp;amp;amp;quot;Sub of 3 and 2 = {0}&amp;amp;amp;amp;amp;amp;amp;amp;quot;, math.Sub(3, 2));\n\n        Complex no1 = new Complex();\n        no1.Real = 3;\n        no1.Imaginary = 3;\n\n        Complex no2 = new Complex();\n        no2.Real = 2;\n        no2.Imaginary = 2;\n\n        Complex result = new Complex();\n        result = math.AddComplexNo(no1, no2);\n        Console.WriteLine(&amp;amp;amp;amp;amp;amp;amp;amp;quot;Add of 3+3i and 2+2i = {0}+{1}i&amp;amp;amp;amp;amp;amp;amp;amp;quot;, result.Real, result.Imaginary);\n\n        result = math.SubComplexNo(no1, no2);\n        Console.WriteLine(&amp;amp;amp;amp;amp;amp;amp;amp;quot;Sub of 3+3i and 2+2i = {0}+{1}i&amp;amp;amp;amp;amp;amp;amp;amp;quot;, result.Real, result.Imaginary);\n\n        Console.ReadLine();\n    }\n}&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;\n\n}\n")),(0,p.kt)("p",null,(0,p.kt)("strong",{parentName:"p"},"Result")),(0,p.kt)("p",null,"Compile and Run the project to see the Result"))}u.isMDXComponent=!0}}]);