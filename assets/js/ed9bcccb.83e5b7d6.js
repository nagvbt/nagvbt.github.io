"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[10360],{28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var a=r(96540);const i={},t=a.createContext(i);function o(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(t.Provider,{value:n},e.children)}},30846:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"C/Pointers","title":"Pointers","description":"1. Define Pointer ?","source":"@site/docs/C/Pointers.md","sourceDirName":"C","slug":"/C/Pointers","permalink":"/docs/C/Pointers","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"c","previous":{"title":"Structures Unions Enumerations","permalink":"/docs/C/Structures"},"next":{"title":"Data Structures","permalink":"/docs/C/DataStructures"}}');var i=r(74848),t=r(28453);const o={sidebar_position:10},l="Pointers",s={},c=[{value:"1. Define Pointer ?",id:"1-define-pointer-",level:3},{value:"2. Explain about pointer Notation ?",id:"2-explain-about-pointer-notation-",level:3},{value:"3. What is the difference between  Address of (&amp;) and Value at address (*) operators in pointers?",id:"3-what-is-the-difference-between--address-of--and-value-at-address--operators-in-pointers",level:3},{value:"3. Write a program to return more than one value from a function ?",id:"3-write-a-program-to-return-more-than-one-value-from-a-function-",level:3},{value:"4. What is the difference between *p++ and ++*p expressions ?",id:"4-what-is-the-difference-between-p-and-p-expressions-",level:3},{value:"5. What would be the equivalent pointer expression for referring the same element arr[i][j][k][l] ?",id:"5-what-would-be-the-equivalent-pointer-expression-for-referring-the-same-element-arrijkl-",level:3},{value:"6. Where we can use pointers ?",id:"6-where-we-can-use-pointers-",level:3},{value:"7. Declare an array of three function pointers where each function receives two ints and returns a float ?",id:"7-declare-an-array-of-three-function-pointers-where-each-function-receives-two-ints-and-returns-a-float-",level:3},{value:"8. Explain about Dynamic Memory allocation ?",id:"8-explain-about-dynamic-memory-allocation-",level:3},{value:"9. What are dynamic memory  management  functions in C?",id:"9-what-are-dynamic-memory--management--functions-in-c",level:3},{value:"10. Explain about malloc ?",id:"10-explain-about-malloc-",level:3},{value:"11. Explain about calloc ?",id:"11-explain-about-calloc-",level:3},{value:"12. Explain about realloc?",id:"12-explain-about-realloc",level:3},{value:"13. Explain about free?",id:"13-explain-about-free",level:3}];function d(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"pointers",children:"Pointers"})}),"\n",(0,i.jsx)(n.h3,{id:"1-define-pointer-",children:"1. Define Pointer ?"}),"\n",(0,i.jsx)(n.p,{children:"Definition: A pointer is a variable which stores the address of another variable."}),"\n",(0,i.jsx)(n.h3,{id:"2-explain-about-pointer-notation-",children:"2. Explain about pointer Notation ?"}),"\n",(0,i.jsx)(n.p,{children:"Consider the declaration,"}),"\n",(0,i.jsx)(n.p,{children:"int i = 3 ;"}),"\n",(0,i.jsx)(n.p,{children:"This declaration tells the C compiler to:\r\n(a) Reserve space in memory to hold the integer value.\r\n(b) Associate the name i with this memory location.\r\n(c) Store the value 3 at this location."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Example:"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\r\nint main( )\r\n{\r\n int i = 3 ;\r\n \r\n printf ( "\\nAddress of i = %u", &i ) ;\r\n printf ( "\\nValue of i = %d", i ) ;\r\n printf ( "\\nValue of i = %d", *(&i) ) ;\r\n\r\n return 0;\r\n}\r\n\r\n* OUTPUT: *\r\nAddress of i = 4652484\r\nValue of i = 3\r\nValue of i = 3\n'})}),"\n",(0,i.jsx)(n.p,{children:"We may represent i\u2019s location in memory by the following memory map."}),"\n",(0,i.jsx)(n.h3,{id:"3-what-is-the-difference-between--address-of--and-value-at-address--operators-in-pointers",children:"3. What is the difference between  Address of (&) and Value at address (*) operators in pointers?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Address of  (&) operator : *\r\nAddress of -> &\r\nThe &variable  which is  &i in the above program returns the address of variable i. so the output shows\r\nAddress of i = 4652484"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Value at address (",(0,i.jsx)(n.em,{children:") operator"}),"\r\nValue at address -> *\r\nThe \u2018value at address\u2019 operator is also called as \u2018indirection\u2019 operator.*(&variable) which is *(&i) in the above program returns the value stored at a particular address.\r\nValue of i = 3"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"3-write-a-program-to-return-more-than-one-value-from-a-function-",children:"3. Write a program to return more than one value from a function ?"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'void Calc(int a,int b,int *add, int*sub);\r\n\r\nvoid main()\r\n{\r\n  int add, sub;\r\n  Calc(4,3, &add, &sub);\r\n  cout<<"4+3="<<add<<endl;\r\n  cout<<"4-3="<<sub;\r\n  getchar();\r\n}\r\n\r\nvoid Calc(int a,int b,int *add, int*sub)\r\n{\r\n *add = a+b;\r\n *sub = a-b;\r\n}\r\n\r\n* OUTPUT: *\r\n4+3=7\r\n4-3=1\n'})}),"\n",(0,i.jsx)(n.h3,{id:"4-what-is-the-difference-between-p-and-p-expressions-",children:"4. What is the difference between *p++ and ++*p expressions ?"}),"\n",(0,i.jsx)(n.p,{children:"Both expressional are not one and the same.\r\n*p++ increments the pointer and not the value pointed by it. Where as ++*p increments the value being pointed to by p."}),"\n",(0,i.jsx)(n.h3,{id:"5-what-would-be-the-equivalent-pointer-expression-for-referring-the-same-element-arrijkl-",children:"5. What would be the equivalent pointer expression for referring the same element arr[i][j][k][l] ?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:"("}),"(",(0,i.jsx)(n.em,{children:"("}),"(arr+i)+j)+k)+l)"]}),"\n",(0,i.jsx)(n.h3,{id:"6-where-we-can-use-pointers-",children:"6. Where we can use pointers ?"}),"\n",(0,i.jsx)(n.p,{children:"a. Accessing array or string elements ?\r\nb. Call by refertence\r\nc. Dynamic memory allocation\r\nd. Implementing linked lists, trees, graphs and many other data structures"}),"\n",(0,i.jsx)(n.h3,{id:"7-declare-an-array-of-three-function-pointers-where-each-function-receives-two-ints-and-returns-a-float-",children:"7. Declare an array of three function pointers where each function receives two ints and returns a float ?"}),"\n",(0,i.jsx)(n.p,{children:"float (*arr[3])(int, int);"}),"\n",(0,i.jsx)(n.h3,{id:"8-explain-about-dynamic-memory-allocation-",children:"8. Explain about Dynamic Memory allocation ?"}),"\n",(0,i.jsx)(n.p,{children:"If we need a variable amount of memory that can only be determined during runtime in that case  we need some user input to determine the necessary amount of memory space."}),"\n",(0,i.jsx)(n.h3,{id:"9-what-are-dynamic-memory--management--functions-in-c",children:"9. What are dynamic memory  management  functions in C?"}),"\n",(0,i.jsx)(n.p,{children:"malloc, calloc, free, realloc"}),"\n",(0,i.jsx)(n.h3,{id:"10-explain-about-malloc-",children:"10. Explain about malloc ?"}),"\n",(0,i.jsxs)(n.p,{children:["malloc allocates a block of size of memory, returning a pointer to the beginning of the block.\r\n",(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\r\nchar ",(0,i.jsx)(n.em,{children:"arr;\r\nint i;\r\narr = (char"}),") malloc(i+1);"]}),"\n",(0,i.jsx)(n.p,{children:"Since malloc() returns a void pointer it is necessary to explicitly typecast it into an appropriate type of pointer."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.em,{children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\r\nint ",(0,i.jsx)(n.em,{children:"p1 = (int"}),")malloc(sizeof(int));"]}),"\n",(0,i.jsx)(n.h3,{id:"11-explain-about-calloc-",children:"11. Explain about calloc ?"}),"\n",(0,i.jsx)(n.p,{children:"Allocate space for array in memory. calloc allocates a block of memory for an array of num elements each of them size bytes long and initializes all its bits to zero. The effective result of an zero-initialized memory block of (num * size) bytes."}),"\n",(0,i.jsx)(n.p,{children:"void* calloc(size_t num, size_t size);"}),"\n",(0,i.jsx)(n.p,{children:"num - No. of elements to be allocated\r\nsize - size of elements"}),"\n",(0,i.jsx)(n.p,{children:"NOTE: In calloc and malloc if the function failed to allocate the requested block of memory a NULL pointer is returned."}),"\n",(0,i.jsx)(n.h3,{id:"12-explain-about-realloc",children:"12. Explain about realloc?"}),"\n",(0,i.jsxs)(n.p,{children:["void",(0,i.jsx)(n.em,{children:"realloc(void"})," ptr, size_t size);\r\nptr - pointer to a memory block previously allocated with malloc, calloc or realloc to be reallocated. If this is NULL a new block is allocated and a pointer to it is returned by the function."]}),"\n",(0,i.jsx)(n.h3,{id:"13-explain-about-free",children:"13. Explain about free?"}),"\n",(0,i.jsx)(n.p,{children:"free deallocate space in memory.\r\nvoid free(void* ptr);\r\nptr \u2013 pointer to a memory block previously allocated with malloc,calloc or realloc to be deal located."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);