"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[63427],{3905:(n,t,e)=>{e.d(t,{Zo:()=>p,kt:()=>f});var r=e(67294);function i(n,t,e){return t in n?Object.defineProperty(n,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):n[t]=e,n}function a(n,t){var e=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),e.push.apply(e,r)}return e}function o(n){for(var t=1;t<arguments.length;t++){var e=null!=arguments[t]?arguments[t]:{};t%2?a(Object(e),!0).forEach((function(t){i(n,t,e[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(e)):a(Object(e)).forEach((function(t){Object.defineProperty(n,t,Object.getOwnPropertyDescriptor(e,t))}))}return n}function s(n,t){if(null==n)return{};var e,r,i=function(n,t){if(null==n)return{};var e,r,i={},a=Object.keys(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||(i[e]=n[e]);return i}(n,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);for(r=0;r<a.length;r++)e=a[r],t.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(n,e)&&(i[e]=n[e])}return i}var l=r.createContext({}),u=function(n){var t=r.useContext(l),e=t;return n&&(e="function"==typeof n?n(t):o(o({},t),n)),e},p=function(n){var t=u(n.components);return r.createElement(l.Provider,{value:t},n.children)},m="mdxType",c={inlineCode:"code",wrapper:function(n){var t=n.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(n,t){var e=n.components,i=n.mdxType,a=n.originalType,l=n.parentName,p=s(n,["components","mdxType","originalType","parentName"]),m=u(e),d=i,f=m["".concat(l,".").concat(d)]||m[d]||c[d]||a;return e?r.createElement(f,o(o({ref:t},p),{},{components:e})):r.createElement(f,o({ref:t},p))}));function f(n,t){var e=arguments,i=t&&t.mdxType;if("string"==typeof n||i){var a=e.length,o=new Array(a);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=n,s[m]="string"==typeof n?n:i,o[1]=s;for(var u=2;u<a;u++)o[u]=e[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,e)}d.displayName="MDXCreateElement"},32320:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=e(87462),i=(e(67294),e(3905));const a={sidebar_position:6},o="Iterative Statements",s={unversionedId:"articles/C/Iterative",id:"articles/C/Iterative",title:"Iterative Statements",description:"1.\tWhat are Iterative Statements?",source:"@site/docs/articles/C/Iterative.md",sourceDirName:"articles/C",slug:"/articles/C/Iterative",permalink:"/docs/articles/C/Iterative",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Control Statements",permalink:"/docs/articles/C/ControlStatements"},next:{title:"Functions",permalink:"/docs/articles/C/Functions"}},l={},u=[{value:"1.\tWhat are Iterative Statements?",id:"1what-are-iterative-statements",level:3},{value:"2.\tExplain about \u2018while\u2019 Loop?",id:"2explain-about-while-loop",level:3},{value:"3.\tWrite a program to print numbers from 1 to 10 use \u2018while\u2019 Loop?",id:"3write-a-program-to-print-numbers-from-1-to-10-use-while-loop",level:3},{value:"4.\tExplain about \u2018do-while\u2019 Loop?",id:"4explain-about-do-while-loop",level:3},{value:"5.\tExplain about \u2018for\u2019 Loop?",id:"5explain-about-for-loop",level:3},{value:"6.\tWhat are \u2018jump\u2019 Statements?",id:"6what-are-jump-statements",level:3},{value:"7. Define \u2018break\u2019 and \u2018continue\u2019 statements?",id:"7-define-break-and-continue-statements",level:3},{value:"8.\tWrite a program to demonstrate \u2018break\u2019 and \u2018continue\u2019 statements?",id:"8write-a-program-to-demonstrate-break-and-continue-statements",level:3},{value:"9. Explain about \u2018return\u2019 statement ?",id:"9-explain-about-return-statement-",level:3},{value:"10.\t Explain about \u2018goto\u2019 statement and write a program to print 1 -10  numbers with out using while, do-while, for loop?",id:"10-explain-about-goto-statement-and-write-a-program-to-print-1--10--numbers-with-out-using-while-do-while-for-loop",level:3},{value:"11. Explain about \u2018exit\u2019 statement ?",id:"11-explain-about-exit-statement-",level:3},{value:"12.\tWrite a program to find given number is an ARMSTRONG NUMBER ?",id:"12write-a-program-to-find-given-number-is-an-armstrong-number-",level:3},{value:"13.\tWrite a program to find given number is an PERFECT NUMBER ?",id:"13write-a-program-to-find-given-number-is-an-perfect-number-",level:3},{value:"14.\tWrite a program to find FACTORIAL of a given number ?",id:"14write-a-program-to-find-factorial-of-a-given-number-",level:3},{value:"15.\tWrite a program to find FACTORIAL of a given number using recursion  ?",id:"15write-a-program-to-find-factorial-of-a-given-number-using-recursion--",level:3},{value:"16.\tWrite a program to print FIBONOCCI SERIES ?",id:"16write-a-program-to-print-fibonocci-series-",level:3},{value:"17.\tWrite a program to print FLOYD\u2019S TRIANGLE ?",id:"17write-a-program-to-print-floyds-triangle-",level:3},{value:"18.\tWrite a program to print Pascal \u2018s TRIANGLE ?",id:"18write-a-program-to-print-pascal-s-triangle-",level:3},{value:"19.\tWrite a program to print program to print patterns the following pattern (Stars Pyramid) ?",id:"19write-a-program-to-print-program-to-print-patterns-the-following-pattern-stars-pyramid-",level:3}],p={toc:u},m="wrapper";function c(n){let{components:t,...e}=n;return(0,i.kt)(m,(0,r.Z)({},p,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"iterative-statements"},"Iterative Statements"),(0,i.kt)("h3",{id:"1what-are-iterative-statements"},"1.\tWhat are Iterative Statements?"),(0,i.kt)("p",null,"Iteration statements (also called loops) allow a set of instructions to be repeatedly executed until a certain condition is reached. This condition may be predetermined (as in the for loop) or open ended (as in the while and do-while loops)."),(0,i.kt)("h3",{id:"2explain-about-while-loop"},"2.\tExplain about \u2018while\u2019 Loop?"),(0,i.kt)("p",null,"The while statement is used for repeating a statement or series of statements as long as a given conditional expression is evaluated to true.\n",(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Syntax:")),"\nwhile( condition )\n{\n//statements;\n}"),(0,i.kt)("h3",{id:"3write-a-program-to-print-numbers-from-1-to-10-use-while-loop"},"3.\tWrite a program to print numbers from 1 to 10 use \u2018while\u2019 Loop?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>      \nvoid main()\n{\n    int i = 0;\n\n    while( i<=10 )\n    {\n        printf("%d ", i);\n        i++;\n    }\n}\nOUTPUT: 0 1 2 3 4 5 6 7 8 9 10\n')),(0,i.kt)("h3",{id:"4explain-about-do-while-loop"},"4.\tExplain about \u2018do-while\u2019 Loop?"),(0,i.kt)("p",null,"The do..while statement executes a statement or statements once, then repeats the execution as long as a given conditional expression evaluates to true.  The do..while statement is used to create post-test loops."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Syntax:")),"\ndo\n{\n//statements;"),(0,i.kt)("p",null,"} while ( condition );"),(0,i.kt)("h3",{id:"5explain-about-for-loop"},"5.\tExplain about \u2018for\u2019 Loop?"),(0,i.kt)("p",null,"The for statement is used for repeating a statement or series of statements as long as a given conditional expression evaluates to true.\nOne of the main differences between while statement and for statement is that in addition to a conditional expression, you can also include code in the for statement\n\u2022\tto initialize a counter variable and\n\u2022\tchanges its value with each iteration"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Syntax:")),"\nfor ( initialization; condition; update statement)\n{\n//statement(s);\n}"),(0,i.kt)("h3",{id:"6what-are-jump-statements"},"6.\tWhat are \u2018jump\u2019 Statements?"),(0,i.kt)("p",null,"C has four statements that perform an unconditional branch: return, goto, break, and continue. Of these, you can use return and goto anywhere inside a function. You can use the break and continue statements in conjunction with any of the loop statements. As discussed earlier in this chapter, you can also use break with switch"),(0,i.kt)("h3",{id:"7-define-break-and-continue-statements"},"7. Define \u2018break\u2019 and \u2018continue\u2019 statements?"),(0,i.kt)("p",null,"1.Break : break statement is used to break any type of loop such as while, do while an for loop.  break statement terminates the loop body immediately. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"        2.Continue : continue statement is used to break current iteration. After continu estatement the control returns to the top of the loop test conditions.\n")),(0,i.kt)("h3",{id:"8write-a-program-to-demonstrate-break-and-continue-statements"},"8.\tWrite a program to demonstrate \u2018break\u2019 and \u2018continue\u2019 statements?"),(0,i.kt)("p",null,"Example of using break and continue statement:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n#define SIZE 10\nvoid main()\n{\n    // demonstration of using break statement\n    int items[SIZE] = {1,3,2,4,5,6,9,7,10,0};\n    int number_found = 4,i;\n\n    for(i = 0; i < SIZE;i++)\n    {\n        if(items[i] == number_found)\n        {\n            printf("number found at position %d\\n",i);\n            break;// break the loop\n        }\n        printf("finding at position %d\\n",i);\n    }\n\n    // demonstration of using continue statement\n    for(i = 0; i < SIZE;i++)\n    {       \n        if(items[i] != number_found)\n        {\n            printf("finding at position %d\\n",i);\n            continue;// break current iteration\n        }\n\n        // print number found and break the loop\n        printf("number found at position %d\\n",i);\n        break;\n    }   \n}\nOUTPUT\nfinding at position 0\nfinding at position 1\nfinding at position 2\nnumber found at position 3\nfinding at position 0\nfinding at position 1\nfinding at position 2\nnumber found at position 3\n')),(0,i.kt)("h3",{id:"9-explain-about-return-statement-"},"9. Explain about \u2018return\u2019 statement ?"),(0,i.kt)("p",null,"A return statement ends the processing of the current function and returns control to the caller of the function. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Syntax:")),"\nreturn expression; //expression is optional"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Example:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint function (void)\n{\n     int b;\n     b = scanf ("%d", &b);\n     return b; // returns the value of b to the calling function.\n}\n\nint main ()\n{\n     printf ("\\n%d", function ());\n     return 0;\n}\n')),(0,i.kt)("h3",{id:"10-explain-about-goto-statement-and-write-a-program-to-print-1--10--numbers-with-out-using-while-do-while-for-loop"},"10.\t Explain about \u2018goto\u2019 statement and write a program to print 1 -10  numbers with out using while, do-while, for loop?"),(0,i.kt)("p",null,"The goto statement performs an unconditional transfer of control to the named label. The label must be in the current function."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Syntax:")),"\n.\n.\ngoto label1;\n.\n.\nlabel1: statement;\n.\n.\nlabel2: statement;\n.\n.\ngoto label2;"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Example:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n\nint main() \n{\n  int n = 0;\n  loop: ; //label\n \n  printf("%d ", n);\n  n++;\n  \n  if (n<10) \n  {\n    goto loop;\n  }\n  \n  return 0;\n}\nOUTPUT: 0 1 2 3 4 5 6 7 8 9\n')),(0,i.kt)("h3",{id:"11-explain-about-exit-statement-"},"11. Explain about \u2018exit\u2019 statement ?"),(0,i.kt)("p",null,"Just as you can break out of a loop, you can break out of a program by using the standard library function exit( ). This function causes immediate termination of the entire program, forcing a return to the operating system. In effect, the exit( ) function acts as if it were breaking out of the entire program."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Example:"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'const int RED = 1;\nconst int GREEN = 2;\nconst int BLUE = 3;\n\n#include <stdio.h>      \nvoid main()\n{\n    int color = 1;\n    printf("Enter an integer to choose a color\\n");\n    printf("1. RED\\n");\n    printf("2. GREEN\\n");\n    printf("3. BLUE\\n");\n    printf("4. Quit\\n");\n    printf(" Enter your choice: ");\n\n    scanf("%d",&color); \n    switch(color)\n    {\n        case RED: printf("you chose red color\\n");\n        break;\n        case GREEN:printf("you chose green color\\n");\n        break;\n        case BLUE:printf("you chose blue color\\n");\n        break;\n        default:\n        exit(0); /* return to OS */\n    }\n}\n')),(0,i.kt)("h3",{id:"12write-a-program-to-find-given-number-is-an-armstrong-number-"},"12.\tWrite a program to find given number is an ARMSTRONG NUMBER ?"),(0,i.kt)("p",null,"Definition:  A number is armstrong if the sum of cubes of individual digits of a number is equal to the number itself.\nExample -  0, 1, 153, 370, 407. "),(0,i.kt)("p",null,"1^3 + 5^3 + 3^3 = 153"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>      \nvoid ArmstrongNumber()\n{\n   int number, sum = 0, temp, remainder;\n \n   printf("Enter an integer\\n");\n   scanf("%d",&number);\n \n   temp = number;\n \n   while( temp != 0 )\n   {\n      remainder = temp%10;\n      sum = sum + remainder*remainder*remainder;\n      temp = temp/10;\n   }\n \n   if ( number == sum )\n      printf("Entered number is an armstrong number.\\n");\n   else\n      printf("Entered number is not an armstrong number.\\n");\n}\n\nint main()\n{   \n   ArmstrongNumber();   \n   return 0;\n}\n')),(0,i.kt)("h3",{id:"13write-a-program-to-find-given-number-is-an-perfect-number-"},"13.\tWrite a program to find given number is an PERFECT NUMBER ?"),(0,i.kt)("p",null,"Definition: Perfect number is a positive number which sum of all positive divisors excluding that number is equal to that number.\nExample: 6 is perfect number since divisor of 6 are 1, 2 and 3.  Sum of its divisor is\n1 + 2+ 3 =6"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>      \nvoid PerfectNumber()\n{\n  int n,i=1,sum=0;\n\n  printf("Enter a number: ");\n  scanf_s("%d",&n);\n\n  while(i<n)\n  {\n      if(n%i==0)\n           sum=sum+i;\n       \n      i++;\n  }\n\n  if(sum==n)\n      printf("%d is a perfect number",i);\n  else\n      printf("%d is not a perfect number",i);\n}\n\nint main()\n{   \n   PerfectNumber();   \n}\n')),(0,i.kt)("h3",{id:"14write-a-program-to-find-factorial-of-a-given-number-"},"14.\tWrite a program to find FACTORIAL of a given number ?"),(0,i.kt)("p",null,"Factorial is represented using '!', so five factorial will be written as (5!), n factorial as (n!). Also\nn! = n",(0,i.kt)("em",{parentName:"p"},"(n-1)"),"(n-2)*(n-3)...3.2.1 and zero factorial is defined as one i.e. 0! = 1."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>      \nvoid Factorial()\n{\n  int c, n, fact = 1;\n \n  printf("Enter a number to calculate it\'s factorial\\n");\n  scanf_s("%d", &n);\n \n  for (c = 1; c <= n; c++)\n    fact = fact * c;\n \n  printf("Factorial of %d = %d\\n", n, fact);\n\n}\n\nint main()\n{      \n   Factorial();\n   return 0;\n}\n')),(0,i.kt)("h3",{id:"15write-a-program-to-find-factorial-of-a-given-number-using-recursion--"},"15.\tWrite a program to find FACTORIAL of a given number using recursion  ?"),(0,i.kt)("p",null,"Using recursion: Recursion is a technique in which a function calls itself, for example in above code factorial function is calling itself. To solve a problem using recursion you must first express its solution in recursive form."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>      \nlong factorial(int); \nint main()\n{\n  int n;\n  long f;\n \n  printf("Enter an integer to find factorial\\n");\n  scanf("%d", &n); \n \n  if (n < 0)\n    printf("Negative integers are not allowed.\\n");\n  else\n  {\n    f = factorial(n);\n    printf("%d! = %ld\\n", n, f);\n  }\n \n  return 0;\n}\n \nlong factorial(int n)\n{\n  if (n == 0)\n    return 1;\n  else\n    return(n * factorial(n-1));\n}\n')),(0,i.kt)("h3",{id:"16write-a-program-to-print-fibonocci-series-"},"16.\tWrite a program to print FIBONOCCI SERIES ?"),(0,i.kt)("p",null,"Numbers of Fibonacci sequence are known as Fibonacci numbers. First few numbers of series are 0, 1, 1, 2, 3, 5, 8 etc, Except first two terms in sequence every other term is the sum of two previous terms, For example 8 = 3 + 5 (addition of 3, 5"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>      \nvoid FibonocciSeries()\n{\n   int n, first = 0, second = 1, next, c;\n \n   printf("Enter the number of terms\\n");\n   scanf("%d",&n);\n \n   printf("First %d terms of Fibonacci series are :-\\n",n);\n \n   for ( c = 0 ; c < n ; c++ )\n   {\n      if ( c <= 1 )\n         next = c;\n      else\n      {\n         next = first + second;\n         first = second;\n         second = next;\n      }\n      printf("%d\\n",next);\n   }\n}\n\nint main()\n{   \n     FibonocciSeries();\n     return 0;\n}\n')),(0,i.kt)("h3",{id:"17write-a-program-to-print-floyds-triangle-"},"17.\tWrite a program to print FLOYD\u2019S TRIANGLE ?"),(0,i.kt)("p",null,"Floyd's triangle is a right-angled triangular array of natural numbers, used in computer science education. It is named after Robert Floyd. It is defined by filling the rows of the triangle with consecutive numbers, starting with a 1 in the top left corner:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>          \nvoid FloydsTriangle()\n{\n  int n, i,  c, a = 1;\n \n  printf(\u201cEnter the number of rows of Floyd\'s triangle to print:");\n  scanf("%d",&n);\n \n  for (i = 1; i <= n; i++)\n  {\n        for (c = 1; c <= i; c++)\n        {\n            printf("%d",a);\n\n            a++;\n        }\n        printf(\u201c\\n\u201d);\n  }\n\n}\n\nvoid main()\n{\n    FloydsTriangle();\n}\n\n* OUTPUT: *\nEnter the number of rows of Floyd\'s triangle to print:4\n    1\n    23\n    456\n    78910\n')),(0,i.kt)("h3",{id:"18write-a-program-to-print-pascal-s-triangle-"},"18.\tWrite a program to print Pascal \u2018s TRIANGLE ?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n \nlong factorial(int);\n \nint main()\n{\n   int i, n, c;\n \n   printf("Enter the number of rows you wish to see in pascal triangle:");\n   scanf("%d",&n);\n \n   for ( i = 0 ; i < n ; i++ )\n   {\n      for ( c = 0 ; c <= ( n - i - 2 ) ; c++ )\n         printf(" ");\n \n      for( c = 0 ; c <= i ; c++ )\n         printf("%ld ",factorial(i)/(factorial(c)*factorial(i-c)));\n \n      printf("\\n");\n   }\n \n   return 0;\n}\n \nlong factorial(int n)\n{\n   int c;\n   long result = 1;\n \n   for( c = 1 ; c <= n ; c++ )\n         result = result*c;\n \n   return ( result );\n}\n\n* OUTPUT *\n\nEnter the number of rows you wish to see in pascal triangle: 4\n\n   1\n  1 1\n 1 2 1\n1 3 3 1\n')),(0,i.kt)("h3",{id:"19write-a-program-to-print-program-to-print-patterns-the-following-pattern-stars-pyramid-"},"19.\tWrite a program to print program to print patterns the following pattern (Stars Pyramid) ?"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'#include <stdio.h>\n \nint main()\n{\n   int row, c, n, temp;\n \n   printf("Enter the number of rows in pyramid of stars you wish to see: ");\n   scanf("%d",&n);\n \n   temp = n;\n \n   for ( row = 1 ; row <= n ; row++ )\n   {\n      for ( c = 1 ; c < temp ; c++ )\n         printf(" ");\n \n      temp--;\n \n      for ( c = 1 ; c <= 2*row - 1 ; c++ )\n         printf("*");\n \n      printf("\\n");\n   }\n \n   return 0;\n}\n\n\n* OUTPUT *\n\nEnter the number of rows in pyramid of stars you wish to see: 5\n    *\n   ***\n  *****\n *******\n*********\n')))}c.isMDXComponent=!0}}]);