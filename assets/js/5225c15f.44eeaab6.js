"use strict";(self.webpackChunkNBT=self.webpackChunkNBT||[]).push([["72705"],{9714:function(n,e,r){r.r(e),r.d(e,{frontMatter:()=>l,default:()=>p,toc:()=>o,metadata:()=>s,assets:()=>d,contentTitle:()=>t});var s=JSON.parse('{"id":"Languages/Polymorphism","title":"Polymorphism","description":"Definition :","source":"@site/docs/Languages/Polymorphism.md","sourceDirName":"Languages","slug":"/Languages/Polymorphism","permalink":"/docs/Languages/Polymorphism","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":15,"frontMatter":{"sidebar_position":15},"sidebar":"tutorialSidebar","previous":{"title":"Inheritance","permalink":"/docs/Languages/Inheritance"},"next":{"title":"Enum","permalink":"/docs/Languages/Enum"}}'),a=r(85893),i=r(50065);let l={sidebar_position:15},t="Polymorphism",d={},o=[{value:"<strong>Definition :</strong>",id:"definition-",level:2},{value:"C#",id:"c",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Example",id:"example",level:3},{value:"Java",id:"java",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Example",id:"example-1",level:3},{value:"Python",id:"python",level:2},{value:"Syntax",id:"syntax-2",level:3},{value:"Example",id:"example-2",level:3},{value:"JavaScript (ES6+)",id:"javascript-es6",level:2},{value:"Syntax",id:"syntax-3",level:3},{value:"Example",id:"example-3",level:3},{value:"C++",id:"c-1",level:2},{value:"Syntax",id:"syntax-4",level:3},{value:"Example",id:"example-4",level:3},{value:"TypeScript",id:"typescript",level:2},{value:"Syntax",id:"syntax-5",level:3},{value:"Example",id:"example-5",level:3}];function c(n){let e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"polymorphism",children:"Polymorphism"})}),"\n",(0,a.jsx)(e.h2,{id:"definition-",children:(0,a.jsx)(e.strong,{children:"Definition :"})}),"\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)(e.strong,{children:"Polymorphism"})," is an object-oriented programming concept that means ",(0,a.jsx)(e.strong,{children:'"many forms."'})," It allows\r\nthe same method name to behave ",(0,a.jsx)(e.strong,{children:"differently based on the object"})," that is calling it.\r\nThere are two main types:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Compile-time polymorphism (Method Overloading)"})," \u2013 supported in C# and Java."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.strong,{children:"Run-time polymorphism (Method Overriding)"})," \u2013 supported in C#, Java, Python, and JavaScript."]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"This concept improves flexibility and code reusability."}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"c",children:"C#"}),"\n",(0,a.jsx)(e.h3,{id:"syntax",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:"class className {\r\n    public virtual void methodName() {\r\n        // base class behavior\r\n    }\r\n}\r\n\r\nclass DerivedClass : className {\r\n    public override void methodName() {\r\n        // overridden behavior\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-csharp",children:'using System;\r\n\r\nclass Person {\r\n    public virtual void displayInfo() {\r\n        Console.WriteLine("Person: General Info");\r\n    }\r\n}\r\n\r\nclass Student : Person {\r\n    public override void displayInfo() {\r\n        Console.WriteLine("Student: Specific Info");\r\n    }\r\n}\r\n\r\nclass Program {\r\n    static void Main() {\r\n        Person p = new Student();\r\n        p.displayInfo();  // Output: Student: Specific Info\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"java",children:"Java"}),"\n",(0,a.jsx)(e.h3,{id:"syntax-1",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"class className {\r\n    public void methodName() {\r\n        // base class behavior\r\n    }\r\n}\r\n\r\nclass DerivedClass extends className {\r\n    @Override\r\n    public void methodName() {\r\n        // overridden behavior\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-1",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'class Person {\r\n    public void displayInfo() {\r\n        System.out.println("Person: General Info");\r\n    }\r\n}\r\n\r\nclass Student extends Person {\r\n    @Override\r\n    public void displayInfo() {\r\n        System.out.println("Student: Specific Info");\r\n    }\r\n\r\n    public static void main(String[] args) {\r\n        Person p = new Student();\r\n        p.displayInfo();  // Output: Student: Specific Info\r\n    }\r\n}\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"python",children:"Python"}),"\n",(0,a.jsx)(e.h3,{id:"syntax-2",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"class className:\r\n    def methodName(self):\r\n        # base class behavior\r\n        pass\r\n\r\nclass DerivedClass(className):\r\n    def methodName(self):\r\n        # overridden behavior\r\n        pass\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-2",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'class Person:\r\n    def display_info(self):\r\n        print("Person: General Info")\r\n\r\nclass Student(Person):\r\n    def display_info(self):\r\n        print("Student: Specific Info")\r\n\r\np = Student()\r\np.display_info()  # Output: Student: Specific Info\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"javascript-es6",children:"JavaScript (ES6+)"}),"\n",(0,a.jsx)(e.h3,{id:"syntax-3",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"class className {\r\n    methodName() {\r\n        // base class behavior\r\n    }\r\n}\r\n\r\nclass DerivedClass extends className {\r\n    methodName() {\r\n        // overridden behavior\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-3",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:'class Person {\r\n    displayInfo() {\r\n        console.log("Person: General Info");\r\n    }\r\n}\r\n\r\nclass Student extends Person {\r\n    displayInfo() {\r\n        console.log("Student: Specific Info");\r\n    }\r\n}\r\n\r\nconst p = new Student();\r\np.displayInfo();  // Output: Student: Specific Info\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"c-1",children:"C++"}),"\n",(0,a.jsx)(e.h3,{id:"syntax-4",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:"class BaseClass {\r\npublic:\r\n    virtual void methodName() {\r\n        // base class behavior\r\n    }\r\n};\r\n\r\nclass DerivedClass : public BaseClass {\r\npublic:\r\n    void methodName() override {\r\n        // overridden behavior\r\n    }\r\n};\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-4",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-cpp",children:'#include <iostream>\r\nusing namespace std;\r\n\r\nclass Person {\r\npublic:\r\n    virtual void displayInfo() {\r\n        cout << "Person: General Info" << endl;\r\n    }\r\n};\r\n\r\nclass Student : public Person {\r\npublic:\r\n    void displayInfo() override {\r\n        cout << "Student: Specific Info" << endl;\r\n    }\r\n};\r\n\r\nint main() {\r\n    Person* p = new Student();\r\n    p->displayInfo();  // Output: Student: Specific Info\r\n    delete p;\r\n    return 0;\r\n}\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,a.jsx)(e.h3,{id:"syntax-5",children:"Syntax"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:"class BaseClass {\r\n    methodName(): void {\r\n        // base class behavior\r\n    }\r\n}\r\n\r\nclass DerivedClass extends BaseClass {\r\n    override methodName(): void {\r\n        // overridden behavior\r\n    }\r\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"example-5",children:"Example"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-typescript",children:'class Person {\r\n    displayInfo(): void {\r\n        console.log("Person: General Info");\r\n    }\r\n}\r\n\r\nclass Student extends Person {\r\n    override displayInfo(): void {\r\n        console.log("Student: Specific Info");\r\n    }\r\n}\r\n\r\nconst p: Person = new Student();\r\np.displayInfo();  // Output: Student: Specific Info\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.a,{href:"#polymorphism",children:"Back to top"})})]})}function p(n={}){let{wrapper:e}={...(0,i.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(c,{...n})}):c(n)}},50065:function(n,e,r){r.d(e,{Z:()=>t,a:()=>l});var s=r(67294);let a={},i=s.createContext(a);function l(n){let e=s.useContext(i);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:l(n.components),s.createElement(i.Provider,{value:e},n.children)}}}]);