"use strict";(self.webpackChunknagvbt=self.webpackChunknagvbt||[]).push([[14530],{28453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>o});var t=r(96540);const i={},s=t.createContext(i);function a(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),t.createElement(s.Provider,{value:e},n.children)}},56182:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Tutorials/ATL","title":"ATL","description":"If you are new to ATL ( Active Template Library ) please refer the below items.","source":"@site/docs/Tutorials/ATL.md","sourceDirName":"Tutorials","slug":"/Tutorials/ATL","permalink":"/docs/Tutorials/ATL","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"ActiveX","permalink":"/docs/Tutorials/ActiveX"},"next":{"title":"COM","permalink":"/docs/Tutorials/COM"}}');var i=r(74848),s=r(28453);const a={sidebar_position:6},o="ATL Tutorial",l={},c=[];function d(n){const e={a:"a",code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"atl-tutorial",children:"ATL Tutorial"})}),"\n",(0,i.jsx)(e.p,{children:"If you are new to ATL ( Active Template Library ) please refer the below items."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.a,{href:"/blog/2012/07/08/basics-of-atl",children:"1. Basics of ATL"})}),"\n",(0,i.jsx)(e.p,{children:"In this tutorial we will be creating"}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"MathComp which is a DLL or Inproc server and exposes the Add and Sub functions."}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"An MFC Dialog Based Application which acts like a Client for MathComp"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Steps for creating MathComp"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:"Open VS 2008"}),"\n",(0,i.jsxs)(e.li,{children:["File->NewProject Click OK -> Click Next ",(0,i.jsx)(e.strong,{children:"Select Server type:"})," as DLL ",(0,i.jsx)(e.strong,{children:"Select Addition options:"})," as 'Allow merging of proxy/stub code' and click Finish"]}),"\n",(0,i.jsx)(e.li,{children:"Add Component Class"}),"\n"]}),"\n",(0,i.jsxs)(e.p,{children:["Select ",(0,i.jsx)(e.code,{children:"ATL simple Object"})]}),"\n",(0,i.jsx)(e.p,{children:"Enter Short name: \"CMath\" to add the component class -> Click 'Finish'"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Add a Method to ICMath Interface"})}),"\n",(0,i.jsx)(e.p,{children:"The classes created are shown below in the class diagram."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"CCMath"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:"// CCMath\r\nclass ATL_NO_VTABLE CCMath :\r\n       public CComObjectRootEx<CComSingleThreadModel>,\r\n       public CComCoClass<CCMath, &CLSID_CMath>,\r\n       public IDispatchImpl<ICMath, &IID_ICMath, &LIBID_MathCompLib, /*wMajor =*/ 1, /*wMinor =*/ 0>\r\n{\r\npublic :\r\n      CCMath()\r\n      {\r\n      }\r\n\r\nDECLARE_REGISTRY_RESOURCEID(IDR_CMATH)\r\n\r\nBEGIN_COM_MAP(CCMath)\r\n      COM_INTERFACE_ENTRY(ICMath)\r\n      COM_INTERFACE_ENTRY(IDispatch)\r\nEND_COM_MAP()\r\n\r\nDECLARE_PROTECT_FINAL_CONSTRUCT()\r\n\r\n      HRESULT FinalConstruct()\r\n      {\r\n             return S_OK;\r\n      }\r\n\r\n       void FinalRelease()\r\n      {\r\n      }\r\n\r\npublic :\r\n\r\n      STDMETHOD(Add)(DOUBLE i, DOUBLE j, DOUBLE* result);\r\n      STDMETHOD(Sub)(DOUBLE i, DOUBLE j, DOUBLE* result);\r\n};\r\n\r\nOBJECT_ENTRY_AUTO( __uuidof(CMath), CCMath)\r\n\r\nCMath.h\r\n// CCMath\r\nSTDMETHODIMP CCMath::Add(DOUBLE i, DOUBLE j, DOUBLE* result)\r\n{\r\n      *result = i + j;\r\n       return S_OK;\r\n}\r\n\r\nSTDMETHODIMP CCMath::Sub(DOUBLE i, DOUBLE j, DOUBLE* result)\r\n{\r\n      *result = i - j;\r\n       return S_OK;\r\n}\n"})}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"MathComp.idl"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'// MathComp.idl : IDL source for MathComp\r\n// This file will be processed by the MIDL tool to\r\n// produce the type library (MathComp.tlb) and marshalling code.\r\n\r\nimport "oaidl.idl" ;\r\nimport "ocidl.idl" ;\r\n\r\n[\r\n       object ,\r\n       uuid (F3BDE3CF-884A-461A-A377-1F96A72239B0),\r\n       dual ,\r\n       nonextensible ,\r\n       helpstring ("ICMath Interface" ),\r\n       pointer_default (unique )\r\n]\r\ninterface ICMath : IDispatch{\r\n      [ id (1), helpstring ( "method Add")] HRESULT Add([ in ] DOUBLE i, [in ] DOUBLE j, [out ] DOUBLE* result);\r\n      [ id (2), helpstring ( "method Sub")] HRESULT Sub([ in ] DOUBLE i, [in ] DOUBLE j, [out ] DOUBLE* result);\r\n};\r\n[\r\n       uuid (44FF4D78-6AAD-4D2B-9150-DEBCCE79D8E0),\r\n       version (1.0),\r\n       helpstring ("MathComp 1.0 Type Library" )\r\n]\r\nlibrary MathCompLib\r\n{\r\n       importlib ("stdole2.tlb" );\r\n      [\r\n             uuid (4A8C8314-6C03-4AF7-96A1-9D6052A89363),\r\n             helpstring ("CMath Class" )\r\n      ]\r\n       coclass CMath\r\n      {\r\n            [ default ] interface ICMath;\r\n      };\r\n};\n'})}),"\n",(0,i.jsx)(e.p,{children:"NOTE: Other classes are not shown here please Download the source for complete code."}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Steps for creating MFC Client"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Create an MFC Dialog based application"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Design the Dialog as shown below"}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:"Add a Add button Handler (OnBnClickedButtonAdd) 4. Inside Add button handler add the below code"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-cpp",children:'//Step1: import include .tlb file\r\n#import "..MathCompMathComp.tlb" no_namespace\r\n\r\nvoid CCMathClientDlg::OnBnClickedButtonAdd()\r\n{\r\n      //Step2/////////////// Initialize the COM libraries ///////////////////////////////\r\n     CoInitialize(NULL);\r\n\r\n      //Step3/////////////////////////Retriving CLSID from ProgID///////////////////////\r\n      CLSID clsid;\r\n      CLSIDFromProgID(OLESTR("MathComp.CMath.1"),&clsid); // will be in CMath.rgs file\r\n\r\n      //Step4/////////////////////////////Creating instance of server///////////////////\r\n      ICMath *pICMath;\r\n\r\n      HRESULT hr = CoCreateInstance(\r\n                     clsid,             //The CLSID associated with the data and code that will be used to create the object.\r\n                     NULL,              //If NULL, indicates that the object is not being created as part of an aggregate\r\n                     CLSCTX_LOCAL_SERVER|CLSCTX_INPROC_SERVER, //ontext in which the code that manages the newly created object will run\r\n                     __uuidof(ICMath),  //riid: A reference to the identifier of the interface to be used to communicate with the object.\r\n                     (LPVOID*)&pICMath); //*ppv: Address of pointer variable that receives the interface pointer requested in riid.\r\n                                       //Upon successful return, *ppv contains the requested interface pointer. Upon failure, *ppv contains NULL.\r\n\r\n      if (FAILED(hr))\r\n      {\r\n            AfxMessageBox(_T("ICMath Failed"));\r\n      }\r\n\r\n      //Step5/////////////////////////////Using COM Component//////////////////////////\r\n      UpdateData(TRUE);\r\n\r\n      double res =0;\r\n      pICMath->Add(m_i, m_j, &res);\r\n      m_Result = res;\r\n\r\n      pICMath->Release(); // To avoid memory leak\r\n      pICMath = NULL;\r\n\r\n      //Step6////////////////////////////Uninit\'ializing the COM libraries//////////////\r\n      CoUninitialize();\r\n\r\n      UpdateData(FALSE);\r\n}\n'})})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}}}]);